/*
 Copyright 2009-2017 Luc Saffre
 License: BSD (see file COPYING for details)
*/

// lino.js --- generated Wed Oct 18 15:32:43 2017 by Lino Tera for Lydia 17.10.0 for Anonymous.
LANGUAGE_CHOICES = [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ];
MEDIA_URL = "/media/";

// hack to add a toCamel function, inspired by
// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
String.prototype.toCamel = function(){
  //~ return this.replace(/(\-[a-z])/g, function($1){return $1.toUpperCase().replace('-','');});
  //~ return this;
  return this.replace(/([A-Z])([A-Z]+)/g, function(match,p1,p2,offset,string){
      //~ console.log("20131005 got ",arguments);
      return p1 + p2.toLowerCase();});
};

/**
 * Ext.form.field.ComboBox crashes unexpectedly when more than one combo with paging presented on the
 * same physical page in the browser:
 * Ext.ComponentManager.register(): Registering duplicate component id "undefined-paging-toolbar"
 *
 * Solution: just comment nonexistent pickerId when component boundlist creates. Since this pickerId is
 * nowhere used this should be okay and Ext.Component will make sure about unique identifier by itself.
 *
 * Discussion: https://www.sencha.com/forum/showthread.php?303101
 */

Ext.define('Jarvus.hotfixes.form.field.ComboBoxPickerId', {
    override: 'Ext.form.field.ComboBox',

    createPicker: function() {
        var me = this,
            picker,
            pickerCfg = Ext.apply({
                xtype: 'boundlist',
                pickerField: me,
                selectionModel: me.pickerSelectionModel,
                floating: true,
                hidden: true,
                store: me.getPickerStore(),
                displayField: me.displayField,
                preserveScrollOnRefresh: true,
                pageSize: me.pageSize,
                tpl: me.tpl
            }, me.listConfig, me.defaultListConfig);

        picker = me.picker = Ext.widget(pickerCfg);
        if (me.pageSize) {
            picker.pagingToolbar.on('beforechange', me.onPageChange, me);
        }

        // We limit the height of the picker to fit in the space above
        // or below this field unless the picker has its own ideas about that.
        if (!picker.initialConfig.maxHeight) {
            picker.on({
                beforeshow: me.onBeforePickerShow,
                scope: me
            });
        }
        picker.getSelectionModel().on({
            beforeselect: me.onBeforeSelect,
            beforedeselect: me.onBeforeDeselect,
            focuschange: me.onFocusChange,
            scope: me
        });

        picker.getNavigationModel().navigateOnSpace = false;

        return picker;
    },
});

//init: function () {
// https://docs.sencha.com/extjs/6.0/wh...de.html#Button
//    https://www.sencha.com/forum/showthread.php?303936-Button-issue-with-WAI-ARIA
//Ext.enableAriaButtons = false;
//Ext.enableAriaPanels = false;
//};
Ext.define('AppsBoard.Application', {
    extend: 'Ext.app.Application',

    name: 'AppsBoard',

    stores: [
        // TODO: add global / shared stores here
    ],

    launch: function () {
        // TODO - Launch the application
    },
    init: function () {
    // https://docs.sencha.com/extjs/6.0/wh...de.html#Button
      //  https://www.sencha.com/forum/showthread.php?303936-Button-issue-with-WAI-ARIA
        Ext.enableAriaButtons = false;
        Ext.enableAriaPanels = false;
    },

    onAppUpdate: function () {
        Ext.Msg.confirm('Application Update', 'This application has an update, reload?',
            function (choice) {
                if (choice === 'yes') {
                    window.location.reload();
                }
            }
        );
    }
});


/* Ext.form.field.Month: thanks to Igor Semin @ sencha forum
   http://stackoverflow.com/questions/28167452/date-picker-year-and-month-only
   and
   http://stackoverflow.com/questions/28197217/month-field-on-extjs-5-1
*/
Ext.onReady(function() {
    Ext.define('Ext.form.field.Month', {
        extend: 'Ext.form.field.Date',
        alias: 'widget.monthfield',
        requires: ['Ext.picker.Month'],
        alternateClassName: ['Ext.form.MonthField', 'Ext.form.Month'],
        selectMonth: null,
        createPicker: function() {
            var me = this,
                format = Ext.String.format;
            return Ext.create('Ext.picker.Month', {
                pickerField: me,
                ownerCt: me.ownerCt,
                renderTo: document.body,
                floating: true,
                hidden: true,
                focusOnShow: true,
                minDate: me.minValue,
                maxDate: me.maxValue,
                disabledDatesRE: me.disabledDatesRE,
                disabledDatesText: me.disabledDatesText,
                disabledDays: me.disabledDays,
                disabledDaysText: me.disabledDaysText,
                format: me.format,
                showToday: me.showToday,
                startDay: me.startDay,
                minText: format(me.minText, me.formatDate(me.minValue)),
                maxText: format(me.maxText, me.formatDate(me.maxValue)),
                listeners: {
                    select: {
                        scope: me,
                        fn: me.onSelect
                    },
                    monthdblclick: {
                        scope: me,
                        fn: me.onOKClick
                    },
                    yeardblclick: {
                        scope: me,
                        fn: me.onOKClick
                    },
                    OkClick: {
                        scope: me,
                        fn: me.onOKClick
                    },
                    CancelClick: {
                        scope: me,
                        fn: me.onCancelClick
                    }
                },
                keyNavConfig: {
                    esc: function() {
                        me.collapse();
                    }
                }
            });
        },
        onCancelClick: function() {
            var me = this;
            me.selectMonth = null;
            me.collapse();
        },
        onOKClick: function() {
            var me = this;
            if (me.selectMonth) {
                me.setValue(me.selectMonth);
                me.fireEvent('select', me, me.selectMonth);
            }
            me.collapse();
        },
        onSelect: function(m, d) {
            var me = this;
            me.selectMonth = new Date((d[0] + 1) + '/1/' + d[1]);
        }
    });

    //Ext.create('Ext.form.field.Month', {
    //    format: 'F, Y',
    //    fieldLabel: 'Date',
    //    renderTo: Ext.getBody()
    //});
});

//Ext.preg('monthPickerPlugin', Ext.form.field.Month);


/**
JC Watsons solution (adapted to ExtJS 3.3.1 by LS) is elegant and simple:
`A "fix" for unchecked checkbox submission  behaviour
<http://www.sencha.com/forum/showthread.php?28449>`_

Added special handling for checkbox inputs. 
ExtJS defines disabled checkboxes `readonly`, not `disabled` as for other inputs.

*/
// editef by HKC (Migratio to Exjts6)
//Ext.lib.Ajax.serializeForm = function(form) {
Ext.Ajax.serializeForm = function(form) {
    //~ console.log('20120203 linolib.js serializeForm',form);
    var fElements = form.elements || (document.forms[form] || Ext.getDom(form)).elements,
        hasSubmit = false,
        encoder = encodeURIComponent,
        name,
        data = '',
        type,
        hasValue;

    Ext.each(fElements, function(element){
        name = element.name;
        type = element.type;

        if (!element.disabled && name && !(type == 'checkbox' && element.readonly)) {
            if (/select-(one|multiple)/i.test(type)) {
                Ext.each(element.options, function(opt){
                    if (opt.selected) {
                        hasValue = opt.hasAttribute ? opt.hasAttribute('value') : opt.getAttributeNode('value').specified;
                        data += String.format("{0}={1}&", encoder(name), encoder(hasValue ? opt.value : opt.text));
                    }
                });
            } else if (!(/file|undefined|reset|button/i.test(type))) {
                //~ if (!(/radio|checkbox/i.test(type) && !element.checked) && !(type == 'submit' && hasSubmit)) {
                if (!(type == 'submit' && hasSubmit)) {
                    if (type == 'checkbox') {
                        //~ console.log('20111001',element,'data += ',encoder(name) + '=' + (element.checked ? 'on' : 'off') + '&');
                        data += encoder(name) + '=' + (element.checked ? 'on' : 'off') + '&';
                    } else {
                        //~ console.log('20111001',element,'data += ',encoder(name) + '=' + encoder(element.value) + '&');
                        data += encoder(name) + '=' + encoder(element.value) + '&';
                    }
                    hasSubmit = /submit/i.test(type);
                }
            }
        //~ } else {
            //~ console.log(name,type,element.readonly);
        }
    });
    return data.substr(0, data.length - 1);
};



/*
Set a long timeout of fifteen minutes. 
See /blog/2012/0307
*/
Ext.Ajax.timeout = 15 * 60 * 1000; 

/*
 * Thanks to 
 * `huuze <http://stackoverflow.com/users/10040/huuuze>`_ for the question
 * and to 
 * `chrisv <http://stackoverflow.com/users/683808/chrisv>`_
 * for the answer on
 * http://stackoverflow.com/questions/3764589/how-do-i-include-django-1-2s-csrf-token-in-a-javascript-generated-html-form/5485616#5485616
 * 
 * */
 
Ext.Ajax.on('beforerequest', function (conn, options) {
   if (!(/^http:.*/.test(options.url) || /^https:.*/.test(options.url))) {
     if (typeof(options.headers) == "undefined") {
       options.headers = {'X-CSRFToken': Ext.util.Cookies.get('csrftoken')};
     } else {
       options.headers.extend({'X-CSRFToken': Ext.util.Cookies.get('csrftoken')});
     }                        
   }
}, this);


/*
My fix for the "Cannot set QuickTips dismissDelay to 0" bug,
see http://www.sencha.com/forum/showthread.php?183515 
*/
//Edited by HKC
//Ext.override(Ext.QuickTip,{
//Ext.define('Lino.QuickTip', {
//    override : 'Ext.QuickTip',
//  showAt : function(xy){
//        var t = this.activeTarget;
        //~ console.log("20120224 QuickTip.showAt",this.title,this.dismissDelay,t.dismissDelay);
        //if(t){
        //    if(!this.rendered){
        //        this.render(Ext.getBody());
        //        this.activeTarget = t;
        //    }
        //    if(t.width){
        //        this.setWidth(t.width);
        //        this.body.setWidth(this.adjustBodyWidth(t.width - this.getFrameWidth()));
        //        this.measureWidth = false;
        //    } else{
        //        this.measureWidth = true;
        //    }
        //    this.setTitle(t.title || '');
        //    this.body.update(t.text);
        //    this.autoHide = t.autoHide;
        //     bugfix by Luc 20120226
        //    if (t.dismissDelay != undefined) this.dismissDelay = t.dismissDelay;
        //    ~ this.dismissDelay = t.dismissDelay || this.dismissDelay;
        //    if(this.lastCls){
        //        this.el.removeClass(this.lastCls);
        //        delete this.lastCls;
        //    }
        //    if(t.cls){
        //        this.el.addClass(t.cls);
        //        this.lastCls = t.cls;
        //    }
        //    if(this.anchor){
        //        this.constrainPosition = false;
        //    }else if(t.align){
        //        xy = this.el.getAlignToXY(t.el, t.align);
        //        this.constrainPosition = false;
        //    }else{
        //        this.constrainPosition = true;
        //    }
        //}
        //Ext.QuickTip.superclass.showAt.call(this, xy);
       //this.callSuper([xy]);
    //}
//});

/*
Another hack. See /docs/blog/touch 2012/0228
*/
// Editef by HKC (Migration to Exjts6)
// https://docs.sencha.com/extjs/6.0/core_concepts/components.html -> Subclassing
//Ext.Element.addMethods(
Ext.define('My.Lino.Component', {
    extend: 'Ext.Element',
    newMethod : function() {
        var VISIBILITY      = "visibility",
            DISPLAY         = "display",
            HIDDEN          = "hidden",
            NONE            = "none",
            XMASKED         = "x-masked",
            XMASKEDRELATIVE = "x-masked-relative",
            data            = Ext.Element.data;

        return {

            mask : function(msg, msgCls) {
                var me  = this,
                    dom = me.dom,
                    dh  = Ext.DomHelper,
                    EXTELMASKMSG = "ext-el-mask-msg",
                    el,
                    mask;
                // removed the following lines. See /docs/blog/2012/0228
                //~ if (!(/^body/i.test(dom.tagName) && me.getStyle('position') == 'static')) {
                    //~ console.log(20120228,dom.tagName,me);
                    //~ me.addClass(XMASKEDRELATIVE);
                //~ }
                if (el = data(dom, 'maskMsg')) {
                    el.remove();
                }
                if (el = data(dom, 'mask')) {
                    el.remove();
                }

                mask = dh.append(dom, {cls : "ext-el-mask"}, true);
                data(dom, 'mask', mask);

                me.addClass(XMASKED);
                mask.setDisplayed(true);

                if (typeof msg == 'string') {
                    var mm = dh.append(dom, {cls : EXTELMASKMSG, cn:{tag:'div'}}, true);
                    data(dom, 'maskMsg', mm);
                    mm.dom.className = msgCls ? EXTELMASKMSG + " " + msgCls : EXTELMASKMSG;
                    mm.dom.firstChild.innerHTML = msg;
                    mm.setDisplayed(true);
                    mm.center(me);
                }


                if (Ext.isIE && !(Ext.isIE7 && Ext.isStrict) && me.getStyle('height') == 'auto') {
                    mask.setSize(undefined, me.getHeight());
                }

                return mask;
            }


        };
    }()
});
//);



Ext.namespace('Lino');
    
    

//~ Lino.subst_user_field = new Ext.form.ComboBox({});
//~ Lino.subst_user = null;
Lino.insert_subst_user = function(p){
    //~ console.log('20120714 insert_subst_user',Lino.subst_user,p);
    //~ if (Lino.subst_user_field.getValue()) {
    if (p.su) return;
    if (Lino.subst_user) {
        //~ p.su = Lino.subst_user_field.getValue();
        p.su = Lino.subst_user;
    //~ } else {
        //~ delete p.su;
    }
    //~ console.log('20120714 insert_subst_user -->',Lino.subst_user,p);
}



Lino.set_subst_user = function(id, name) {
    //~ console.log(20130723,'Lino.set_subst_user',id,name,Lino.current_window,Lino.viewport);
    Lino.subst_user = id;
    if (Lino.current_window) 
        Lino.current_window.main_item.set_base_param("su",id);
    if (Lino.viewport) 
        Lino.permalink_handler(Lino.current_window)();
};



//~ Lino.select_subst_user = function(cmp,rec,value){
    //~ Lino.subst_user=value;
    //~ console.log(20120713,rec);
//~ }
    
Lino.current_window = null;
Lino.window_history = Array();
    
Lino.chars2width = function(cols) {  return cols * 9; };
Lino.rows2height = function(cols) {  return cols * 20; };
Lino.perc2width = function(perc) {
    // var w = Math.max(document.documentElement.clientWidth, window.innerWidth);
    // console.log("20151226", document, window, w);
    var w = Lino.viewport.getWidth();
    return w * perc / 100;
};


// HKC
//Lino.MainPanel = {
Ext.define('Lino.MainPanel',{
    extend: 'Ext.panel.Panel',
  is_home_page : false,
  auto_apply_params: true,
  setting_param_values : false,
  config_containing_window : function(wincfg) { }
  ,init_containing_window : function(win) { }
  ,is_loading : function() {
      if (!this.rendered) return true;
      //~ return (Ext.select('.x-loading-msg').elements.length > 0);
      return true;
    }
  ,do_when_clean : function(auto_save,todo) { todo() }
  ,get_master_params : function() {
    var p = {};
    p['mt'] = this.content_type;
    rec = this.get_current_record();
    if (rec) {
      if (rec.phantom) {
          p['mk'] = undefined;
      }else{
          p['mk'] = rec.id;
      }
    } else {
      p['mk'] = undefined;
    }
    //~ console.log('get_master_params returns',p,'using record',rec);
    return p;
  }
  ,get_permalink : function() {
    var p = Ext.apply({}, this.get_base_params());
    delete p.fmt;
    Ext.apply(p, this.get_permalink_params());

    if (this.toggle_params_panel_btn) {
        p.sp = this.toggle_params_panel_btn.pressed;
        //~ if (this.toggle_params_panel_btn.pressed == this.params_panel_hidden) {
          //~ p.sp = true;
        //~ }
    }

    //~ Lino.insert_subst_user(p);
     //~ p.fmt = 'html';
    //~ console.log('get_permalink',p,this.get_permalink_params());
    if (this.is_home_page)
        //~ var url = '';
        var url = '/';
    else
        var url = this.get_permalink_url();
    if (p.su == null)
        delete p.su;
    if (Ext.urlEncode(p)) url = url + "?" + Ext.urlEncode(p);
    return url;
  }
  ,get_record_url : function(record_id) {
      var url = '/api' + this.ls_url
      //~ var url = this.containing_window.config.url_data; // ls_url;
      url += '/' + (record_id === undefined ?  this.default_record_id : String(record_id));
      //~ if (record_id !== undefined) url += '/' + String(record_id);
      //~ url += '/' + String(record_id);
      return url;
  }
  ,get_permalink_url : function() {
      return '/api' + this.ls_url;
  }
  ,get_permalink_params : function() {
      //~ return {an:'grid'};
      var p = {};
      if (this.action_name)
          p.an = this.action_name;
      this.add_param_values(p,false)
      return p;
  }
  /*

  Lino.MainPanel.set_status() : the status can have the following keys:

  - param_values : values of parameter fields
  - field_values : values of action parameter fields
  - base_params
  - record_id
  - active_tab
  - data_record
  - show_params_panel
  - current_page

   */
  ,set_status : function(status, requesting_panel) {}
  ,get_status : function() { return {}}
  ,refresh : function() {}
  ,get_base_params : function() {  // Lino.MainPanel
    var p = {};
    Lino.insert_subst_user(p);
    return p;
  }
  ,add_params_panel : function (tbar) {
      // console.log("20160701 Lino.MainPanel.add_params_panel()")
      if (this.params_panel) {
        //~  20130923b
        //~ this.params_panel.autoHeight = true; // 20130924
        var t = this;
        var update = function() {
            var p = t.params_panel;
            //~ console.log("update", p.getSize().height,p.forceLayout,p.autoHeight);
            var w = t.get_containing_window();
            Lino.do_when_visible(w, function() {
                //~ p.doLayout(true); // doLayout(shallow, force)
                //w.doLayout(true); // doLayout(shallow, force)
                // HKC , disable doLayout function
                //~ t.params_panel.on('afterlayout',update,t,{single:true});
            });
        };
        Lino.do_when_visible(this.params_panel, update);
        this.params_panel.on('show',update);
        this.params_panel.on('hide',update);
        //~ this.params_panel.on('bodyresize',update);
        this.params_panel.on('afterlayout',update);
        //~ this.params_panel.on('afterlayout',update,this,{single:true});
        //~ this.params_panel.on('bodyresize',update,this,{single:true});
        //~ this.params_panel.on('resize',update,this,{single:true});
        //~ this.params_panel.on('render',update,this,{single:true});

        // this.params_panel.on('render',
        //~ this.params_panel.on('afterlayout',update,this,{single:true,delay:200});
        //~ this.params_panel.on('bodyresize',update,this,{single:true,delay:200});
        this.toggle_params_panel_btn = Ext.create('Ext.Button',{ scope:this,
          //~ text: "$_("[parameters]")", // gear
          iconCls: 'x-tbar-database_gear',
          tooltip:"Show or hide the table parameters panel",
          enableToggle: true,
          //~ pressed: ! this.params_panel.hidden,
          pressed: ! this.params_panel_hidden,
          toggleHandler: function(btn,state) {
            //~ console.log("20120210 add_params_panel",state,this.params_panel);
            if (state) {
                this.params_panel.show();
            } else {
                this.params_panel.hide();
            }
            //~ this.params_panel.on('afterlayout',update,this,{single:true});
            //~ t.get_containing_window().doLayout();
            //~ this.params_panel.on('afterlayout',function() {
                //~ console.log("20130918 afterlayout");
                //~ t.get_containing_window().doLayout(); // doLayout(shallow, force)
            //~ },this,{single:true});
          }
        });
        tbar = tbar.concat([this.toggle_params_panel_btn]);

        if (this.auto_apply_params) {
          
          var refresh = function(newValue, oldValue, eOpts) {
            if (!t.setting_param_values && this.isValid()) {
                t._force_dirty = true;
                t.refresh();
            }
          };
          Ext.each(this.params_panel.fields,function(f) {
              f.on('change',refresh);
          //~ f.on('valid',function() {t.refresh()});
          // if (f instanceof Ext.form.Checkbox) {
          //     f.on('check',refresh);
          // } else if (f instanceof Ext.form.field.Date) {
          //     f.on('select',refresh);
          // } else if (f instanceof Ext.form.TriggerField) {
          //     f.on('select',refresh);
              //~ f.on('change',refresh);
              //~ f.on('valid',refresh);
          // } else {
          //     if (! f.on)
          //         console.log("20121010 no method 'on'",f);
          //     else
          //         f.on('change',refresh);
          //   }
          });
        }
      }
      return tbar;
  }
  ,add_param_values : function (p,force_dirty) {
    if (this.params_panel) {
      /*
      * 20120918 add param_values to the request string
      * *only if the params_form is dirty*.
      * Otherwise Actor.default_params() would never be used.
      *
      * 20121023 But IntegClients.params_default has non-empty default values.
      * Users must have the possibility to make them empty.
      *
      * 20130605 : added `force_dirty` parameter because Checkbox fields don't
      * mark their form as dirty when check is fired.
      *
      * 20130721 : `force_dirty` not as a parameter but as
      * `this._force_dirty` because
      *
      * 20130915 : both _force_dirty and force_dirty parameter are needed.
      *
      */
      if (force_dirty || this._force_dirty || this.params_panel.form.isDirty()) {
      //~ if (this._force_dirty || this.params_panel.form.isDirty()) {
        p.pv = this.get_param_values();
        //~ console.log("20130923 form is dirty (",force_dirty,this._force_dirty,this.params_panel.form.isDirty(),")");
        //~ console.log("20130923 form is dirty",p);
      }else{
        //~ console.log("20130923 form not dirty:",this.params_panel.form);
        if (this.status_param_values)
          p.pv = Lino.fields2array(
            this.params_panel.fields,this.status_param_values);
      }
      //~ if (!this.params_panel.form.isDirty()) return;
      //~ p.pv = this.get_param_values();
      //~ console.log("20120203 add_param_values added pv",p.pv,"to",p);
    }
  },
  get_param_values : function() { // similar to get_field_values()
      return Lino.fields2array(this.params_panel.fields);
  },
  set_param_values : function(pv) {
    if (this.params_panel) {
        if (this._force_dirty){
            pv = {};
            for (var field in this.params_panel.fields){
                var current_field = this.params_panel.fields[field];
                if (current_field instanceof Lino.ComboBox){
                    pv[current_field.hiddenName] = current_field.hiddenvalue_tosubmit;
                    if (current_field.isDirty()){
                        current_field.hiddenvalue_id = current_field.hiddenvalue_tosubmit;
                    }
                    pv[current_field.name] = current_field.rawValue;
                }
                else {
                    pv[current_field.name] = current_field.getValue();
                }
            }
        }
      //~ console.log('20120203 MainPanel.set_param_values', pv);
      this.status_param_values = pv;
      //~ this.params_panel.form.suspendEvents(false);
      this.setting_param_values = true;
      if (pv) {
          this.params_panel.form.my_loadRecord(pv);
      } else {
        this.params_panel.form.reset();
      }
      this.setting_param_values = false;
      this._force_dirty = false;
      //~ this.params_panel.form.resumeEvents();
    }
  }
});



Ext.define('Lino.Viewport', {
    extend :  'Ext.container.Viewport',
     mixins: ['Lino.MainPanel'],
  layout : "fit"
  ,is_home_page : true
  ,initComponent : function(){
    // Lino.Viewport.superclass.initComponent.call(this);
    this.callSuper(arguments);
    this.on('render',function(){
      // this.loadMask = new Ext.LoadMask(this.el,{msg:"Please wait..."});
      //   this.loadMask = {message:"Please wait..."};
        this.loadMask = Ext.create('Ext.LoadMask',{
                                        msg    : 'Please wait...',
                                        target : this,
                                    });
      //~ console.log("20121118 Lino.viewport.loadMask",this.loadMask);
    },this);
  }
  ,refresh : function() {
      var caller = this;
      // console.log("20140829 Lino.Viewport.refresh()");
      if (caller.loadMask) caller.loadMask.show();
      var success = function(response) {
        if (caller.loadMask) caller.loadMask.hide();
        if (response.responseText) {
          var result = Ext.decode(response.responseText);
          //~ console.log('Lino.do_action()',action.name,'result is',result);
          if (result.html) {
              var cmp = Ext.getCmp('dashboard');
              // cmp.removeAll(true);  // 20140829
              cmp.update(result.html, true);
          }
          if (result.message) {
              if (result.alert) {
                  //~ Ext.MessageBox.alert('Alert',result.alert_msg);
                  Ext.MessageBox.alert('Alert',result.message);
              } else {
                  Lino.notify(result.message);
              }
          }
          
          if (result.notify_msg) Lino.notify(result.notify_msg);
          if (result.js_code) { 
            var jsr = result.js_code(caller);
            //~ console.log('Lino.do_action()',action,'returned from js_code in',result);
          };
        }
      };
      var action = {
        url : '/api/main_html',
        waitMsg: "Please wait...",
        failure: Lino.ajax_error_handler(caller),
        success: success,
        method: 'GET',
        params: {}
      };
      Lino.insert_subst_user(action.params);
      Ext.Ajax.request(action);
    
  }
});




Lino.open_window = function(win, st, requesting_panel) {
  // console.log("20140831 Lino.open_window()", win, win.el.getBox());
  var cw = Lino.current_window;
  if (cw) {
    // console.log("20140829 Lino.open_window() save current status",
    //             cw.main_item.get_status());
    Lino.window_history.push({
      window:cw,
      status:cw.main_item.get_status()
    });
  }
  Lino.current_window = win;
  //~ if (st.su) 
      //~ Lino.subst_user_field.setValue(st.su);
  win.main_item.set_status(st, requesting_panel);
  // win.toFront();
  win.show();
};

Lino.load_url = function(url) {
    //~ foo.bar.baz = 2; 
    //~ console.log("20121120 Lino.load_url()");
    //~ Lino.body_loadMask.show();
    Lino.viewport.loadMask.show();
    // if (Lino.viewport.loadMask){
    //     Ext.Msg.show(Lino.viewport.loadMask);
    // }
    //~ location.replace(url);
    document.location = url;
};

Lino.close_window = function(status_update, norestore) {
  // norestore is used when called by handle_action_result() who 
  // will call set_status itself later
  var cw = Lino.current_window;
  var ww = Lino.window_history.pop();
  var retval = cw.main_item.requesting_panel;
  // console.log(
  //     "20150514 Lino.close_window() going to close", cw.title,
  //     "previous is", ww, 
  //     "norestore is", norestore,
  //     "retval is", retval);
  if (ww) {
    //~ if (status_update) Ext.apply(ww.status,status_update);
    if(!norestore) {
        if (status_update) status_update(ww);
        ww.window.main_item.set_status(ww.status);
    }
    Lino.current_window = ww.window;
  } else {
      Lino.current_window = null;
      // new since 20140829:
      if(!norestore) { Lino.viewport.refresh(); }
  }
  if (cw) cw.hide_really();
  if (ww && (typeof ww.window.main_item.refresh == 'function')) {
        ww.window.main_item.refresh();
    }
  return retval;
};

Lino.kill_current_window = function() {
  // console.log("20140418 Lino.kill_current_window()");
  var cw = Lino.current_window;
  Lino.current_window = null;
  if (cw) cw.hide_really();
};

Lino.reload = function() {
    // First close all windows to ensure all changes are saved
    Lino.close_all_windows();

    // Then reload current view
    var url =  "/";

    var p = {};
    Lino.insert_subst_user(p);
    if (Ext.urlEncode(p))
        url = url + "?" + Ext.urlEncode(p);

    Lino.load_url(url);
};

Lino.handle_home_button = function() {
  if (Lino.window_history.length == 0)
      Lino.reload();
  else
      Lino.close_all_windows();
};

Lino.close_all_windows = function() {
    while (Lino.window_history.length > 0) {
        Lino.close_window();
    }
};

Lino.calling_window = function() {
    if (Lino.window_history.length) 
        return Lino.window_history[Lino.window_history.length-1];
};

//~ Lino.WindowAction = function(mainItemClass,windowConfig,mainConfig,ppf) {
//Lino.WindowAction = function(windowConfig,main_item_fn) {
    //~ if(!mainConfig) mainConfig = {};
    //~ mainConfig.is_main_window = true;
    //this.windowConfig = windowConfig;
    //this.main_item_fn = main_item_fn;
    //~ if (ppf) mainConfig.params_panel.fields = ppf;
    //~ this.mainConfig = mainConfig;
    //~ this.mainItemClass = mainItemClass;
//};

//Ext.define('Lino.WindowAction', {
Ext.define('Lino.WindowAction', {
    // extend: 'Ext.Component',
//Lino.WindowAction = Ext.extend(Lino.WindowAction,{
    window : null,
    //~ mainItemClass: null,
    constructor : function(windowConfig,main_item_fn){
        this.windowConfig = windowConfig;
        this.main_item_fn = main_item_fn;
    },
    get_window : function() {
      //~ if(mainConfig) Ext.apply(this.mainConfig,mainConfig);
      // if (this.window == null || this.window.isDestroyed)  { // 20140829
      // if (this.window == null || this.window.getBox().width == 0)  { // 20140829
      if (this.window == null)  {
      // if (true)  {
          //~ this.windowConfig.main_item = new this.mainItemClass(this.mainConfig);
          this.windowConfig.main_item = this.main_item_fn();
          this.window = Ext.create('Lino.Window',this.windowConfig);
      }
      else {
        // Refresh existing grid windows,
        if (Array.isArray(this.windowConfig.items)){
                this.windowConfig.items.forEach(
                    function(i){if (i.refresh != null) {i.refresh();}}
                    );                }
        // Always have first tab open on detail windows
        if (this.windowConfig.items != null &&
            this.windowConfig.items.items != null &&
            Array.isArray(this.windowConfig.items.items.items) &&
            this.windowConfig.items.items.items[0].isXType("tabpanel")) {
                this.windowConfig.items.items.items[0].setActiveTab(this.windowConfig.items.items.items[0].items.items[0]);
                }

           }

      return this.window;
    },
    run : function(requesting_panel, status) {
      // console.log('20140829 window_action.run()', this)
      var f = Lino.open_window.bind(this ,this.get_window(), status, requesting_panel);
      var panel = Ext.getCmp(requesting_panel);
        if(panel) panel.do_when_clean(true, f); else f();
    }
  
});

// HKC
//Lino.PanelMixin = {
Ext.define('Lino.PanelMixin', {
    //extend: 'Ext.panel.Table',
  get_containing_window : function (){
      if (this.containing_window) return this.containing_window;
      return this.containing_panel.get_containing_window();
  }
  ,set_window_title : function(title) {
    //~ this.setTitle(title);
    var cw = this.get_containing_window();

    //~ if (cw) {
    //~ if (cw && cw.closable) {
    if (cw && !cw.main_item.hide_window_title) {
      //~ console.log('20111202 set_window_title(',title,') for',this.containing_window);
      //~ if (! this.containing_window.rendered) console.log("WARNING: not rendered!");
      cw.setTitle(title);
    //~ } else {
      //~ document.title = title;
    }
    //~ else console.log('20111202 not set_window_title(',title,') for',this);
  }
  
});


// Lino.status_bar = new Ext.ux.StatusBar({defaultText:'Lino version 17.10.1.'});






/* 
  Originally copied from Ext JS Library 3.3.1
  Modifications by Luc Saffre : 
  - rendering of phantom records
  - fire afteredit event
  - react on dblclcik, not on single click

 */
Ext.define('Lino.CheckColumn',{
    override : 'Ext.grid.column.Check',

    // processEvent : function(name, e, grid, rowIndex, colIndex){
    processEvent: function(type, view, cell, recordIndex, cellIndex, e, record, row) {
        //~ console.log('20110713 Lino.CheckColumn.processEvent',name)
        if (type == 'click') {
        //~ if (name == 'mousedown') {
        //~ if (name == 'dblclick') {
            return this.toggleValue(view.grid, recordIndex, cellIndex,record);
        } else {
            //return Ext.grid.ActionColumn.superclass.processEvent.apply(this, arguments);
             this.callSuper(arguments);
        }
    },
    
    toggleValue : function (grid,rowIndex,colIndex,record) {
        // var record = grid.store.getAt(rowIndex);
        // var dataIndex = grid.colModel.getDataIndex(colIndex);
        var dataIndex = this.dataIndex;
        // 20120514
        //~ if(record.data.disabled_fields && record.data.disabled_fields[dataIndex]) {
          //~ Lino.notify("This field is disabled");
          //~ return false;
        //~ }
      
        //~ if (dataIndex in record.data['disabled_fields']) {
            //~ Lino.notify("This field is disabled.");
            //~ return false;
        //~ }
        var startValue = record.data[dataIndex];
        var value = !startValue;
        //~ record.set(this.dataIndex, value);
        var e = {
            grid: grid,
            record: record,
            field: dataIndex,
            originalValue: startValue,
            value: value,
            row: rowIndex,
            column: colIndex,
            cancel: false
        };
        // record.set(dataIndex, value);
        // if(grid.fireEvent("beforeedit", e) !== false && !e.cancel){
        //~ if(grid.fireEvent("validateedit", e) !== false && !e.cancel){
        record.set(dataIndex, value);
        delete e.cancel;
        grid.fireEvent("edit",grid, e);
        // grid.on_afteredit(grid, e);
        // Ext.fireEvent("edit",grid, e);
        // }
        return false; // Cancel event propagation
    },

    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
        if (record.data.disabled_fields && (record.data.disabled_fields[this.dataIndex]
                                            || record.data.disable_editing)) {
            metaData.tdCls += ' ' + this.disabledCls;
        }
        return r = this.defaultRenderer(value, metaData);

        // // This is how you can edit the default render of a checkbox. Commented out since not needed.
        // var p = new DOMParser();
        // var d = p.parseFromString(r,"text/html");
        // d.body.firstChild.classList.add(this.disabledCls);
        // return d.body.innerHTML

    },
    renderer_unused : function(v, p, record){
        if (record.phantom) return '';
        p.css += ' x-grid3-check-col-td'; 
        return String.format('<div class="x-grid3-check-col{0}">&#160;</div>', v ? '-on' : '');
    },
    checkchange : function(rowIndex, checked, record, e, eOpts ) {
        console.log('Ext.field.Checkbox get changes');
},

    // Deprecate use as a plugin. Remove in 4.0
    // init: Ext.emptyFn
});

// register ptype. Deprecate. Remove in 4.0
// Ext.preg('checkcolumn', Lino.CheckColumn);

// backwards compat. Remove in 4.0
// Ext.grid.CheckColumn = Lino.CheckColumn;

// Disable by HKC (Migratio to Exjts6)
// register Column xtype
Ext.grid.column.Check = Lino.CheckColumn;


/* 20110725 : 
Lino.on_tab_activate is necessary 
in contacts.Person.2.dtl 
(but don't ask me why...)
*/
Lino.on_tab_activate = function(item) {
  //~ console.log('activate',item); 
  if (item.rendered && item.doLayout) item.doLayout();
  //~ if (item.rendered) item.doLayout();
};

Ext.define('Lino.TimeField', {
    extend: 'Ext.form.field.Time',
    format: 'H:i',
    completeEdit: function() {
        var me = this,
            // val = me.getValue();   original code
            val = me.getRawValue();
        me.callParent(arguments);
        // Only set the raw value if the current value is valid and is not falsy
        if (me.validateValue(val)) {
            me.setValue(val);
        }
    }
  });

Ext.define('Lino.DateField', {
    extend: 'Ext.form.field.Date',
  //~ boxMinWidth: Lino.chars2width(15), // 20131005 changed from 11 to 15
    format: 'd.m.Y',
    altFormats: 'd/m/Y|Y-m-d'
  });

Ext.define('Lino.DatePickerField', {
    extend: 'Ext.picker.Date',
  //~ boxMinWidth: Lino.chars2width(11),
    format: 'd.m.Y',
  //~ altFormats: 'd/m/Y|Y-m-d'
    formatDate : function(date){
      //~ console.log("20121203 formatDate",this.name,date);
      return Ext.isDate(date) ? date.dateFormat(this.format) : date;
  }
});

Ext.define('Lino.DateTimeField', {
    extend: 'Ext.ux.DateTimeField',
    dateFormat: 'd.m.Y',
    timeFormat: 'H:i'
  //~ ,hiddenFormat: 'd.m.Y H:i'
});

Ext.define('Lino.URLField', {
    extend: 'Ext.form.field.Text',
    triggerClass : 'x-form-search-trigger',
    //~ triggerClass : 'x-form-world-trigger',
    vtype: 'url',
    onTriggerClick : function() {
    //~ console.log('Lino.URLField.onTriggerClick',this.value)
    //~ document.location = this.value;
        window.open(this.getValue(),'_blank');
    }
});

Ext.define('Lino.IncompleteDateField', {
    extend: 'Ext.form.TextField',
    //~ regex: /^-?\d+-[01]\d-[0123]\d$/,
    //~ regex: /^[0123]\d\.[01]\d\.-?\d+$/,
    maxLength: 10,
    boxMinWidth: Lino.chars2width(10),
    regex: /^[0123]?\d\.[01]?\d\.-?\d+$/,
    regexText: 'Enter a date in format YYYY-MM-DD (use zeroes for unknown parts).'
});


//~ Lino.make_dropzone = function(cmp) {
    //~ cmp.on('render', function(ct, position){
      //~ ct.el.on({
        //~ dragenter:function(event){
          //~ event.browserEvent.dataTransfer.dropEffect = 'move';
          //~ return true;
        //~ }
        //~ ,dragover:function(event){
          //~ event.browserEvent.dataTransfer.dropEffect = 'move';
          //~ event.stopEvent();
          //~ return true;
        //~ }
        //~ ,drop:{
          //~ scope:this
          //~ ,fn:function(event){
            //~ event.stopEvent();
            //~ console.log(20110516);
            //~ var files = event.browserEvent.dataTransfer.files;
            //~ if(files === undefined){
              //~ return true;
            //~ }
            //~ var len = files.length;
            //~ while(--len >= 0){
              //~ console.log(files[len]);
              //~ // this.processDragAndDropFileUpload(files[len]);
            //~ }
          //~ }
        //~ }
      //~ });
    //~ });
//~ };

//~ Lino.FileUploadField = Ext.ux.form.FileUploadField;

Ext.define('Lino.FileUploadField', {
    extend: 'Ext.ux.form.FileUploadField',
    unused_onRender : function(ct, position){
      //Lino.FileUploadField.superclass.onRender.call(this, ct, position);
         this.callSuper(ct, position);
      this.el.on({
        dragenter:function(event){
          event.browserEvent.dataTransfer.dropEffect = 'move';
          return true;
        }
        ,dragover:function(event){
          event.browserEvent.dataTransfer.dropEffect = 'move';
          event.stopEvent();
          return true;
        }
        ,drop:{
          scope:this
          ,fn:function(event){
            event.stopEvent();
            //~ console.log(20110516);
            var files = event.browserEvent.dataTransfer.files;
            if(files === undefined){
              return true;
            }
            var len = files.length;
            while(--len >= 0){
              console.log(files[len]);
              //~ this.processDragAndDropFileUpload(files[len]);
            }
          }
        }
      });
    }
});

Ext.define('Lino.FileField', {
    extend: 'Ext.form.field.Text',
    triggerClass : 'x-form-search-trigger',
    editable: false,
    onTriggerClick : function() {
        //~ console.log('Lino.URLField.onTriggerClick',this.value)
        //~ document.location = this.value;
        if (this.getValue()) window.open(MEDIA_URL + '/'+this.getValue(),'_blank');
    }
});

Lino.file_field_handler = function(panel,config) {
  if (panel.action_name == 'insert') {
      panel.has_file_upload = true;


      // config.value = '<br/><br/>';

      var f = new Lino.FileUploadField(config);
      //~ Lino.make_dropzone(f);
      return f;
      //~ return new Ext.ux.form.FileUploadField(config);
      //~ return new Lino.FileField(config);
      
  } else {
      //~ return new Lino.URLField(config);
      return new Lino.FileField(config);
  }
};

Ext.define('Lino_Panel', {
    override : 'Ext.panel.Panel',
    // bodyStyle: 'padding:0px;width:0px;',
    bodyStyle : 'background: #d3e1f1;',
});


Ext.define('Lino.VBorderPanel', {
    extend: 'Ext.Panel',
    constructor : function(config) {
      config.layout = 'border';
      delete config.layoutConfig;
      //Lino.VBorderPanel.superclass.constructor.call(this,config);
         this.callSuper(config);
      for(var i=0; i < this.items.length;i++) {
        var item = this.items.get(i);
        if (this.isVertical(item) && item.collapsible) {
          item.on('collapse',this.onBodyResize,this);
          item.on('expand',this.onBodyResize,this);
        }
      }
    },
    isVertical : function(item) {
       return (item.region == 'north' || item.region == 'south' || item.region == 'center');
    },
    onBodyResize: function(w, h){
        //~ console.log('VBorderPanel.onBodyResize',this.title)
      if (this.isVisible()) { // to avoid "Uncaught TypeError: Cannot call method 'getHeight' of undefined."
        var sumflex = 0;
        var availableHeight = this.getInnerHeight();
        var me = this;
        this.items.each(function(item){
          if (me.isVertical(item)) {
              if (item.collapsed || item.flex == 0 || item.flex === undefined) {
                  if (item.rendered) availableHeight -= item.getHeight();
              } else {
                  sumflex += item.flex;
              }
          } 
          
        });
        //~ for(var i=0; i < this.items.length;i++) {
          //~ var item = this.items.get(i);
          //~ // if (this.isVertical(item) && item.getResizeEl()) {
          //~ if (this.isVertical(item)) {
              //~ if (item.collapsed || item.flex == 0 || item.flex === undefined) {
                  //~ // item.syncSize()
                  //~ // item.doLayout()
                  //~ // if (item.region == "north") console.log('region north',item.getHeight(),item.id, item);
                  //~ // if (item.getHeight() == 0) console.log(20100921,'both flex and getHeight() are 0!');
                  //~ availableHeight -= item.getHeight();
              //~ } else {
                  //~ sumflex += item.flex;
                  //~ // console.log(item.flex);
              //~ }
          //~ } 
          //~ // else console.log('non-vertical item in VBoderPanel:',item)
        //~ }
        var hunit = availableHeight / sumflex;
        //~ console.log('sumflex=',sumflex,'hunit=',hunit, 'availableHeight=',availableHeight);
        for(var i=0; i < this.items.length;i++) {
          var item = this.items.get(i);
          if (this.isVertical(item)) {
              if (item.flex != 0 && ! item.collapsed) {
                  item.setHeight(hunit * item.flex);
                  //~ console.log(item.region,' : height set to',item.getHeight());
              }
          }
          //~ else console.log('non-vertical item in VBoderPanel:',item)
        }
      }
      //Lino.VBorderPanel.superclass.onBodyResize.call(this, w, h);
         this.callSuper(w, h);
    }
});

function PseudoConsole() {
    this.log = function() {};
};
if (typeof(console) == 'undefined') console = Ext.create('PseudoConsole',{});

Lino.notify = function(msg) {
  if (msg == undefined) msg = ''; else console.log(msg);
  
    if (msg == undefined) return;
    // Lino.alert(msg);
  
};

Lino.alert = function(msg) {
  Ext.MessageBox.alert('Notify',msg);
};


//~ Lino.show_about = function() {
  //~ new Ext.Window({
    //~ width: 400, height: 400,
    //~ title: "About",
    //~ html: '<a href="http://www.extjs.com" target="_blank">ExtJS</a> version ' + Ext.version
  //~ }).show();
//~ };

function obj2str(o) {
  if (typeof o != 'object') return String(o);
  var s = '';
  for (var p in o) {
    s += p + ': ' + obj2str(o[p]) + '\n';
  }
  return s;
}

Lino.on_store_exception = function (store,type,action,options,response,arg) {
  //~ throw response;
  console.log("on_store_exception: store=",store,
    "type=",type,
    "action=",action,
    "options=",options,
    "response=",response,
    "arg=",arg);
  if (arg != undefined && arg) { console.log(arg.stack)};
  Ext.Msg.alert("Database problem",
                "There was a problem with the database connection. If the error persists, try reloading your browser.");
};

//~ Lino.on_submit_success = function(form, action) {
   //~ Lino.notify(action.result.message);
   //~ this.close();
//~ };

Lino.on_submit_failure = function(form, action) {
    //~ Lino.notify();
  // action may be undefined
    switch (action.failureType) {
        case Ext.form.Action.CLIENT_INVALID:
            Ext.Msg.alert('Client-side failure', 'Form fields may not be submitted with invalid values');
            break;
        case Ext.form.Action.CONNECT_FAILURE:
            Ext.Msg.alert('Connection failure', 'Ajax communication failed');
            break;
        case Ext.form.Action.SERVER_INVALID:
            Ext.Msg.alert('Server-side failure', action.result.message);
   }
};



/*
Lino.save_wc_handler = function(ww) {
  return function(event,toolEl,panel,tc) {
    var pos = panel.getPosition();
    var size = panel.getSize();
    wc = ww.get_window_config();
    Ext.applyIf(wc,{ 
      x:pos[0],y:pos[1],height:size.height,width:size.width,
      maximized:panel.maximized});
    Lino.do_action(ww,{url:'/window_configs/'+ww.config.permalink_name,params:wc,method:'POST'});
  }
};

*/

Lino.show_in_own_window_button = function(handler) {
  return {
    qtip: "Show this panel in own window", 
    //id: "up",
    type: "up",
      callback : function(panel, tool, event) {
          handler.run(null,{base_params:panel.containing_panel.get_master_params()});
    }
  }
}

Lino.action_handler = function (panel, on_success, on_confirm) {
  return function (response) {
      if (!panel) { 
          if (Lino.current_window) 
              panel = Lino.current_window.main_item;
          else panel = Lino.viewport;
      }
    if (panel.loadMask) {
        panel.loadMask.hide();
    }
    if (!response.responseText) return ;
    var result = Ext.decode(response.responseText);
    Lino.handle_action_result(panel, result, on_success, on_confirm);
  }
};

Lino.handle_action_result = function (panel, result, on_success, on_confirm) {

    // console.log('20150514 Lino.handle_action_result()', result);
    
    // if (panel instanceof Lino.GridPanel) {
    //     gridmode = true;
    // } else {
    //     gridmode = false;
    // }

    //~ if (result.goto_record) {
        //~ var js = "Lino." + result.goto_record[0] + '.detail.run';
        //~ var h = eval(js);
        //~ h(panel,{record_id:result.goto_record[1]});
    //~ }
    
    if (result.goto_url) {
        document.location = result.goto_url;
        return;
    }
    
    if (result.xcallback) {
        //~ var config = {title:"Confirmation"};
        var config = {title:result.xcallback.title};
        config.buttons = Ext.Msg.YESNO;
        config.icon = Ext.Msg.QUESTION;
        var p = {};
        Lino.insert_subst_user(p);
        //config.buttons = result.xcallback.buttons;
        config.message = result.message;
        config.fn = function(buttonId) {
            panel.loadMask.show();
          //~ Lino.insert_subst_user(p);
          Ext.Ajax.request({
            method: 'GET',
            url: '/callbacks/'
                  + result.xcallback.id + '/' + buttonId,
            params: p,
            failure: Lino.ajax_error_handler(panel),
            success: Lino.action_handler(panel, on_success, on_confirm)
          });
        };
        Ext.MessageBox.show(config);
        return;
    }

    // `record_id` and/or `data_record` both mean "display the detail
    // of this record". 
    
    if(result.detail_handler_name) {
        // TODO: make sure that result.detail_handler_name is secure
        var detail_handler = eval("Lino." + result.detail_handler_name);
    }
    var ns = {};  // new status
    if (result.close_window) {
        
        // Subsequent processing expects that `panel` is "the current
        // panel". But if we close the window, `panel` must point
        // to the previous window. Note the case of an insert window
        // that has been invoked by double-clicking on the phantom row
        // of a slave table in a detail window. In that case we want
        // `panel` to become the grid panel of the slave table who
        // called the insert window, not the master's detail form
        // panel.  When the insert window has been called by an action
        // link (e.g. generated using ar.insert_button), then
        // Lino.close_window can return `undefined`.

        if(result.record_id || result.data_record) {
            var ww = Lino.calling_window();
            if (ww && ww.window.main_item instanceof Lino.FormPanel) {
                if (ww.window.main_item.ls_detail_handler == detail_handler) {
                    ns.record_id = result.record_id;
                    ns.data_record = result.data_record;
                    // console.log("20150514 use new status.");
                }
            }
        }

        panel = Lino.close_window(
            function(ww) { Ext.apply(ww.status, ns) }); 
        if (!panel) 
            // console.log("20150514 close_window returned no panel.");
            if (Lino.current_window)
                panel = Lino.current_window.main_item;

    }

    if(result.record_id || result.data_record) {
        if (! (ns.record_id || ns.data_record)) {
          // no close_window, so we must update record data in current
          // panel (if it is the detail_handler for this record) or
          // open the detail handler.
          var st = {
              record_id: result.record_id,
              data_record: result.data_record
          };
          if (result.active_tab) st.active_tab = result.active_tab;
          if (panel instanceof Lino.FormPanel 
              && panel.ls_detail_handler == detail_handler) 
            {
              // console.log("20150514 use panel.set_status().");
              panel.set_status(st);
          } else if (panel !== undefined) {
              // console.log("20150514 run detail_handler.");
              st.base_params = panel.get_base_params();
              detail_handler.run(null, st);
          }

          // if (panel instanceof Lino.FormPanel 
          //     && panel.ls_url == result.actor_url) {
          //     // console.log("20140506 case 2 it's a FormPanel:", panel);
          //     panel.set_status({
          //         record_id: result.record_id,
          //         data_record: result.data_record});
          // } else if (panel.ls_detail_handler 
          //            && panel.ls_url == result.actor_url) {
          //     // console.log("20140506 case 4");
          //     panel.ls_detail_handler.run(null, {
          //         record_id: result.record_id,
          //         data_record: result.data_record,
          //         base_params: panel.get_base_params()});
          // } else {
          //     result.refresh_all = true;
          //     console.log("20140604 case 6", result.actor_url);
          // }
        }
    }

    // `eval_js` must get handled after `close_window` because it
    // might ask to open a new window (and we don't want to close that
    // new window).  It must execute *before* any MessageBox,
    // otherwise the box would get hidden by a window that opens
    // afterwards.

    if (result.eval_js) {
        //~ console.log(20120618,result.eval_js);
        eval(result.eval_js);
    }
    
    if (on_success && result.success) {
        // console.log("20140430 handle_action_result calls on_success", 
        //             on_success);
        on_success(result);
    }
    
    if (result.info_message) {
        console.log(result.info_message);
    }
    
    if (result.warning_message) {
        if (!result.alert) result.alert = "Warning";
        Ext.MessageBox.alert(result.alert, result.warning_message);
    }
    
    if (result.message) {
        //~ if (result.alert && ! gridmode) {
        if (result.alert) { // 20120628b 
            //~ Ext.MessageBox.alert('Alert',result.alert_msg);
            if (result.alert === true) result.alert = "Alert";
            Ext.MessageBox.alert(result.alert, result.message);
        } else {
            Lino.notify(result.message);
        }
    }

    if(result.record_deleted && panel.ls_detail_handler == detail_handler) {
        panel.after_delete();
    }
    
    if (result.refresh_all) {
        var cw = Lino.current_window;
        // var cw = panel.get_containing_window();
        if (cw) {
            // console.log("20140917 refresh_all calls refresh on", cw.main_item);
            cw.main_item.refresh();
        } else { Lino.viewport.refresh(); }
        // else console.log("20140917 cannot refresh_all because ",
        //                  "there is no current_window");
    } else {
        if (result.refresh) {
            // console.log("20140917 Gonna call panel.refresh()", panel);
            panel.refresh();
        }
    }if (result.goto_url) document.location = result.goto_url;
    if (result.open_url) {
        //~ console.log(20111126,result.open_url);
        //~ if (!result.message)
            //~ Lino.notify('Open new window <a href="'+result.open_url+'" target="_blank">'+result.open_url+'</a>');
        window.open(result.open_url,'foo',"");
        //~ document.location = result.open_url;
    }
};

// obsolete but still used for deleting records.
Lino.do_action = function(caller,action) { 
  action.success = function(response) {
    if (caller.loadMask) caller.loadMask.hide();
    //~ console.log('Lino.do_action()',action,'action success',response);
    if (action.after_success) {
        //~ console.log('Lino.do_action() calling after_success');
        action.after_success();
    }
    if (response.responseText) {
      var result = Ext.decode(response.responseText);
      //~ console.log('Lino.do_action()',action.name,'result is',result);
      if (result.message) {
          if (result.alert) {
              //~ Ext.MessageBox.alert('Alert',result.alert_msg);
              Ext.MessageBox.alert('Alert',result.message);
          } else {
              Lino.notify(result.message);
          }
      }
      
      //~ if (result.alert_msg) Ext.MessageBox.alert('Alert',result.alert_msg);
      //~ if (result.message) Lino.notify(result.message);
      if (result.notify_msg) Lino.notify(result.notify_msg);
      if (result.js_code) { 
        //~ console.log('Lino.do_action()',action,'gonna call js_code in',result);
        var jsr = result.js_code(caller);
        //~ console.log('Lino.do_action()',action,'returned from js_code in',result);
        if (action.after_js_code) {
          //~ console.log('Lino.do_action()',action,'gonna call after_js_code');
          action.after_js_code(jsr);
          //~ console.log('Lino.do_action()',action,'returned from after_js_code');
        //~ } else {
          //~ console.log('Lino.do_action()',action,' : after_js_code is false');
        }
      };
    }
  };
  Ext.applyIf(action,{
    waitMsg: "Please wait...",
    failure: Lino.ajax_error_handler(caller),
    params: {}
  });
  //~ action.params.su = Lino.subst_user;
  Lino.insert_subst_user(action.params);
  
  Ext.Ajax.request(action);
};

//~ Lino.gup = function( name )
//~ {
  //~ // Thanks to http://www.netlobo.com/url_query_string_javascript.html
  //~ name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
  //~ var regexS = "[\\?&]"+name+"=([^&#]*)";
  //~ var regex = new RegExp( regexS );
  //~ var results = regex.exec( window.location.href );
  //~ if( results == null )
    //~ return "";
  //~ else
    //~ return results[1];
//~ };

//~ Lino.refresh_handler = function (ww) {
  //~ return function() { 
      //~ console.log('refresh',ww);
      //~ ww.main_item.doLayout(false,true);
      //~ ww.main_item.syncSize();
  //~ }
//~ };

//~ Lino.tools_close_handler = function (ww) {
  //~ return function() { 
      //~ ww.close();
  //~ }
//~ };
Lino.permalink_handler = function (ww) {
  return function() { 
    //~ document.location = ww.main_item.get_permalink();
    //~ console.log('20130723 Lino.permalink_handler',ww);
    
    /* Uncaught TypeError: Cannot read property 'main_item' of null  */
    if (ww) {
        var url = ww.main_item.get_permalink();
    } else {
        var url = Lino.viewport.get_permalink();
    }
    Lino.load_url(url);
  }
};
//~ Lino.run_permalink = function() {
  //~ var plink = Lino.gup('permalink');
  //~ if(plink) { eval('Lino.'+plink); }
//~ }


Lino.ajax_error_handler = function(panel) {
  return function(response,options) {
    console.log('Ajax failure:', response, options);
    //  Disable by HKC
    if (panel.loadMask) panel.loadMask.hide();
    if (response.responseText) {
      var lines = response.responseText.split('\n');
      if (lines.length > 10) {
          line = lines.splice(5, lines.length-10, "(...)");
      }
      //~ console.log(20131005, response.statusText.toCamel());
      Ext.MessageBox.alert(
        response.statusText.toCamel(),
        lines.join('<br/>')
        //~ response.responseText.replace(/\n/g,'<br/>'))
      )
    } else {
      Ext.MessageBox.alert('Action failed',
        'Lino server did not respond to Ajax request');
    }
  }
}
// Ext.Ajax.on('requestexception',Lino.ajax_error_handler)
 


Ext.QuickTips.init();

/* setting QuickTips dismissDelay to 0 */
// Apply a set of config properties to the singleton
//~ Ext.apply(Ext.QuickTips.getQuickTip(), {
//~ Ext.apply(Ext.ToolTip, {
    //~ dismissDelay: 0
    //~ autoHide: false,
    //~ closable: true,
    //~ maxWidth: 200,
    //~ minWidth: 100,
    //~ showDelay: 50      // Show 50ms after entering target
    //~ ,trackMouse: true
//~ });


//~ Ext.apply(Ext.QuickTip, {
    //~ dismissDelay: 0,
//~ });
  
Lino.quicktip_renderer = function(title,body) {
  return function(c) {
    //~ if (c instanceof Ext.Panel) var t = c.bwrap; else // 20130129
    // if (c instanceof Ext.Panel) var t = c.header; else // 20130129
    var t = c.getId();
    //~ console.log(20130129,t,title,body);
    //~ t.dismissDelay = 0;
    Ext.tip.QuickTipManager.register({
      target: t,
      //~ cls: 'lino-quicktip-classical',
      dismissDelay: 0,
      //~ autoHide: false,
      showDelay: 50,      // Show 50ms after entering target
      //~ title: title,
      text: body
    });
  }
};


  
Lino.help_text_editor = function() {
  //~ var bp = {
      //~ mk:this.content_type,
      //~ mt:1
    //~ };
    //~ console.log(20120202,bp);
  //~ Lino.lino.ContentTypes.detail({},{base_params:bp});
  //~ Lino.lino.ContentTypes.detail.run(null,{record_id:this.content_type});
  //  Edited by HKC
  Lino.gfks.ContentTypes.detail.run(null,{record_id:this.content_type});
};

// Path to the blank image should point to a valid location on your server
//~ Ext.BLANK_IMAGE_URL = MEDIA_URL + '/extjs/resources/images/default/s.gif'; 


// used as Ext.grid.Column.renderer for id columns in order to hide the special id value -99999
Lino.id_renderer = function(value, metaData, record, rowIndex, colIndex, store) {
  //~ if (record.phantom) return '';
  return value;
;}

Lino.raw_renderer = function(value, metaData, record, rowIndex, colIndex, store) {
  return value;
};

Lino.text_renderer = function(value, metaData, record, rowIndex, colIndex, store) {
  //~ return "not implemented"; 
  return value;
};

Ext.define('Lino.NullNumberColumn', {
    extend: 'Ext.grid.Column',
    align : 'right',
    format : '0,000.00/i', 
    renderer : function(value, metaData, record, rowIndex, colIndex, store) {
        //~ console.log(20130128,"NullNumberColumn.renderer",value);
        if (value === null) return '';
        return Ext.util.Format.number(value, this.format);
    }
});

Ext.define('Lino.NavigationModel', {
    override : 'Ext.grid.NavigationModel',
    onCellMouseDown: function(view, cell, cellIndex, record, row, recordIndex, mousedownEvent) {
        if (mousedownEvent.target.text == '➚'){
            mousedownEvent.preventDefault(true);
            var href = mousedownEvent.target.href;
            var detail_panel = href.split('-')[0];
            var params = href.split('-')[1];
            var record_id = parseInt(params);
            // Lino.run_detail_handler(eval(detail_panel),params);
            var detail_panel_object = eval(detail_panel);
            detail_panel_object.run(null,{record_id:record_id});
        }
        else if  (mousedownEvent.target.text != undefined){
            var targetEl = mousedownEvent.getTarget(null, null, true);
            targetEl.focus();
            this.callParent(arguments);
        }
        else {
            // var targetEl = mousedownEvent.getTarget(null, null, true);
            // targetEl.focus();
            this.callParent(arguments);
        }
    },
    });

Lino.link_button = function(url) {
    // return '<a href="' + url + '"><img src="/media/lino/extjs/images/xsite/link.png" alt="link_button"></a>'
    return Ext.String.format('<a href="' + url + '" style="z-index: 1000">&#10138;</a>');
};

Lino.link_button_with_value = function(url,value) {
    // return '<a href="' + url + '"><img src="/media/lino/extjs/images/xsite/link.png" alt="link_button"></a>'
    return Ext.String.format('   <a href="' + url + '" style="z-index: 1000">' + value + '</a>');
};

Lino.fk_renderer = function(fkname,handlername) {
  //~ console.log('Lino.fk_renderer handler=',handler);
  return function(value, metaData, record, rowIndex, colIndex, store,view) {
    //~ console.log('Lino.fk_renderer',fkname,rowIndex,colIndex,record,metaData,store);
    //~ if (record.phantom) return '';
    if (value) {
        var url = 'javascript:'+handlername + '.run(null,{\'record_id\':' + String(record.data[fkname]) + '})'
        return Lino.link_button(url) + Lino.link_button_with_value(url,value);
        // until 20140822 (clickable foreign keys):
        // var s = '<a href="javascript:' ;
        // s += handlername + '.run(null,{record_id:\'' + String(record.data[fkname]) + '\'})">';
        // s += value + '</a>';
        // return s
    }
    return '';
  }
};

Lino.lfk_renderer = function(panel,fkname) {
  //~ console.log('Lino.fk_renderer handler=',handler);
  var handlername = 'console.log';
  return function(value, metaData, record, rowIndex, colIndex, store) {
    //~ console.log('Lino.fk_renderer',fkname,rowIndex,colIndex,record,metaData,store);
    if (record.phantom) return '';
    if (value) {
        var s = '<a href="javascript:' ;
        s += handlername + '({},{record_id:\'' + String(record.data[fkname]) + '\'})">';
        s += value + '</a>';
        //~ console.log('Lino.fk_renderer',value,'-->',s);
        return s
    }
    return '';
  }
};

//~ Lino.gfk_renderer = function() {
  //~ return function(value, metaData, record, rowIndex, colIndex, store) {
    //~ if (record.phantom) return '';
    //~ console.log('Lino.gfk_renderer',value,colIndex,record,metaData,store);
    //~ return value;
  //~ }
//~ };


Lino.build_buttons = function(panel,actions) {
  //~ console.log("20121006 Lino.build_buttons",actions);
  if (actions) {
    var buttons = Array(actions.length);
    var cmenu = Array(actions.length);
    var keyhandlers = {};
    for (var i=0; i < actions.length; i++) {
      var a = actions[i];
      if (a.menu) a.menu = Lino.build_buttons(panel,a.menu).bbar;
      buttons[i] = a;
      cmenu[i] = {
            text : a.menu_item_text,
            iconCls : a.iconCls,
            menu : a.menu,
            itemId : a.itemId
          };
      if (a.panel_btn_handler) {
          //Edited by HKC
          //var h = a.panel_btn_handler.createCallback(panel);
          //var h = Ext.callback(a.panel_btn_handler,a, [panel]);
          var h = Ext.Function.pass(a.panel_btn_handler, [panel]);
          //callback = Ext.Function.pass(originalFunction, ['Hello', 'World']);
          if (a.auto_save == true) {
              //Edited by HKC
              //h = panel.do_when_clean.createDelegate(panel,[true,h]);
              h = panel.do_when_clean.bind(panel,true,h);
          } else if (a.auto_save == null) {
              //Edited by HKC
              //h = panel.do_when_clean.createDelegate(panel,[false,h]);
              h = panel.do_when_clean.bind(panel,false,h);
          } else if (a.auto_save == false) {
              // h = h;
          } else {
              console.log("20120703 unhandled auto_save value",a)
          }
          buttons[i].handler = h;
          cmenu[i].handler = h;
          if (a.keycode) {
              keyhandlers[a.keycode] = h;
          }
          //~ if (buttons[i].xtype == 'splitbutton') {
              //~ cmenu[i].menu = a.menu;
          //~ } else {
              //~ cmenu[i].handler = h;
          //~ }
      } else {
          console.log("action without panel_btn_handler",a)
          // cmenu[i].handler = a.handler;
      }
    }
    return {
        bbar:buttons, 
        // cmenu:new Ext.menu.Menu(cmenu),
        cmenu:Ext.create('Ext.menu.Menu', {renderTo: Ext.getBody(),items:cmenu}),
        keyhandlers: keyhandlers
    };
  }
}

Lino.do_when_visible = function(cmp,todo) {
  //~ if (cmp.el && cmp.el.dom) 
  if (cmp.isVisible()) { 
    // 'visible' means 'rendered and not hidden'
    //~ console.log(cmp.title,'-> cmp is visible now');
    todo(); 
  //~ } else {
      //~ cmp.on('resize',todo,cmp,{single:true});
  //~ }
  //~ if (false) { // 20120213
  } else { 
    //~ console.log('Lino.do_when_visible() must defer because not isVisible()',todo,cmp);
    if (cmp.rendered) {
      //~ console.log(cmp,'-> cmp is rendered but not visible: and now?');
      //~ console.log(cmp.title,'-> cmp is rendered but not visible: try again in a moment...');
      //~ var fn = function() {Lino.do_when_visible(cmp,todo)};
      //~ fn.defer(100);
      
      //Lino.do_when_visible.defer(50,this,[cmp,todo]);
        Ext.defer(function() {
           Lino.do_when_visible(cmp,todo);
        },  50) ;
      //~ Lino.do_when_visible.defer(100,this,[cmp,todo]);
      
    } else {
      //~ console.log(cmp.title,'-> after render');
      cmp.on('afterrender',todo,cmp,{single:true});
    }
  }
  
};    

/*
*/
Lino.do_on_current_record = function(panel, fn, phantom_fn) {
  // console.log('20140930 do_on_current_record', arguments);
  var rec = panel.get_current_record();
  if (rec == undefined) {
    Lino.notify("There's no selected record.");
    return;
  }
  // 20120307 A VirtualTable with a Detail (lino.Models) has only "phantom" records.
  if (rec.phantom) {
    //~ if (!panel.editable) { console.log("20120312 not editable:",panel)}
    if (phantom_fn) {
      phantom_fn(panel);
    } else {
      Lino.notify("Action not available on phantom record.");
    }
    return;
  }
  return fn(rec);
};


Lino.call_ajax_action = function(
    panel, method, url, p, actionName, step, on_confirm, on_success) {
  p.an = actionName;
  if (!panel || !panel.isVisible()) {
  //~ if (true) { // 20131026 : workflow_actions of a newly created record detail executed but did't refresh the screen because their requesting panel was the insert (not the detail) formpanel.
      if (Lino.current_window) 
          panel = Lino.current_window.main_item;
      else panel = Lino.viewport;
  }
  // console.log("20150130 a", p.pv);
  // Ext.apply(p, panel.get_base_params());
  // console.log("20150130 b", p.pv);

  if (panel.get_selected) {
      var selected_recs = panel.get_selected();
      //~ console.log("20130831",selected_recs);
      var rs = Array(selected_recs.length);
      for(var i=0; i < selected_recs.length;i++) {
          rs[i] = selected_recs[i].data.id;
      };
      p.sr = rs;
  }
  
  // console.log("20140516 Lino.call_ajax_action", p, actionName, step);
  if (panel.loadMask) panel.loadMask.show();
    
  Ext.Ajax.request({
    method: method
    ,url: url
    ,params: p
    ,success: Lino.action_handler(panel, on_success, on_confirm)
    ,failure: Lino.ajax_error_handler(panel)
  });
};




Lino.row_action_handler = function(actionName, hm, pp) {
  var p = {};
  var fn = function(panel, btn, step) {
      // console.log('20150514 row_action_handler');
      if (pp) { p = pp(panel); if (! p) return; }
      
      if (!panel || panel.get_current_record == undefined) { // AFTER_20130725
        // console.log('20140930 row_action_handler 2', panel);
        panel = Ext.getCmp(panel);
        if (panel == undefined) {
          Lino.notify("Invalid panel spec.");
          return;
        }
      }
      
      Lino.do_on_current_record(panel, function(rec) {
          //~ console.log(panel);
          panel.add_param_values(p, true);
          Ext.apply(p, panel.get_base_params());
          Lino.call_ajax_action(
              panel, hm, panel.get_record_url(rec.id), 
              p, actionName, step, fn);
      });
  };
  return fn;
};

Lino.list_action_handler = function(ls_url,actionName,hm,pp) {
  var p = {};
  var url = '/api' + ls_url
  var fn = function(panel,btn,step) {
      //~ console.log("20121210 Lino.list_action_handler",arguments);
      if (pp) { p = pp(panel);  if (! p) return; }
      if (panel) { // may be undefined when called e.g. from quicklink
          panel.add_param_values(p, true);
          Ext.apply(p, panel.get_base_params());
      }
      Lino.call_ajax_action(panel, hm,url, p, actionName, step, fn);
  };
  return fn;
};

Lino.param_action_handler = function(window_action) { // 20121012
  var fn = function(panel,btn,step) {
    Lino.do_on_current_record(panel,function(rec) {
      window_action.run(panel.getId(),{}); 
    });
  };
  return fn;
};


Lino.run_row_action = function(
    requesting_panel, is_on_main_actor, url, meth, pk,
    actionName, params, preprocessor) {
  //~ var panel = action.get_window().main_item;
  // console.log("20140930 Lino.run_row_action", params);
  url = '/api' + url  + '/' + pk;
  var panel = Ext.getCmp(requesting_panel);
  // var params = {}
  // if (init_params) Ext.apply(params, init_params);
  if (!params) params = {};
  if (preprocessor) {
      var p = preprocessor();
      Ext.apply(params, p);
  }
  if (panel && is_on_main_actor) {
      Ext.apply(params, panel.get_base_params())
  } else {
      // 20170731
      // params.pv = Array();
      // delete params.pv;
      Lino.insert_subst_user(params);
  }
  var fn = function(panel, btn, step) {
    Lino.call_ajax_action(panel, meth, url, params, actionName, step, fn);
  }
  fn(panel, null, null);
}


Lino.show_detail = function(panel, btn) {
  Lino.do_on_current_record(panel, 
    function(rec) {
      //~ panel.loadMask.show();
      Lino.run_detail_handler(panel, rec.id);
    },
    Lino.show_insert
  );
};

Lino.run_detail_handler = function(panel,pk) {
  var bp = panel.get_base_params();
  panel.add_param_values(bp); // 20120918
  var status = {
    record_id:pk,
    base_params:bp
  };
  //~ console.log("20120918 Lino.show_detail",status);
  panel.ls_detail_handler.run(null,status);
};

Lino.show_fk_detail = function(combo,detail_action,insert_action) {
    //~ console.log("Lino.show_fk_detail",combo,handler);
    // pk = combo.getValue();
    pk = combo.hiddenvalue_id;
    if (pk) {
        detail_action.run(null,{record_id: pk})
      } else {
        insert_action.run(null);
        //~ Lino.notify("Cannot show detail for empty foreign key.");
      }
};

Lino.show_insert = function(panel,btn) {
  var bp = panel.get_base_params();
  //~ console.log('20120125 Lino.show_insert',bp)
  //~ panel.ls_insert_handler.run(null,{record_id:-99999,base_params:bp});
  panel.ls_insert_handler.run(panel.getId(),{base_params:bp});
};




//if (Ext.ux.grid !== undefined) {
if (Ext.grid.filters.Filters !== undefined) {
    //HKC
    //Lino.GridFilters = Ext.extend(Ext.ux.grid.GridFilters,{
    Ext.define('Lino.GridFilters', {
    extend: 'Ext.grid.filters.Filters',
      encode:true,
      local:false
    });
} else {
    Lino.GridFilters = function() {}; // dummy
    // HKC
    //Ext.override(Lino.GridFilters,{
    Ext.define('Lino.GridFilters', {
    override: 'Lino.GridFilters',
      init : function() {}
    });
};

// https://stackoverflow.com/questions/26589495/extjs-remote-filtering-determine-filter-data-type-on-the-server-side

Ext.define('Ext.override.grid.filters.filter.Base', {
override: 'Ext.grid.filters.filter.Base',
createFilter: function(config, key) {
    var me = this,
        filter = me.callParent(arguments),
        type = me.getInitialConfig('type');
    filter.type = type;
    return filter;
}
});
Ext.define('Ext.override.util.Filter', {
override: 'Ext.util.Filter',
getState: function() {
    var me = this,
        state = this.callParent(arguments);
    if (me.type) {
        state.type = me.type;
    }
    return state;
}
});



//    HKC Ext.data.field.Field

//Lino.FieldBoxMixin = {
Ext.define('Lino.FieldBoxMixin', {
    extend: 'Ext.data.field.Field',
  before_init : function(config,params) {
    if (params) Ext.apply(config,params);
    var actions = Lino.build_buttons(this, config.ls_bbar_actions);
    if (actions) config.bbar = actions.bbar;
  },
  //~ constructor : function(ww,config,params){
    //~ this.containing_window = ww;
    //~ if (params) Ext.apply(config,params);
    //~ var actions = Lino.build_buttons(this,config.ls_bbar_actions);
    //~ if (actions) config.bbar = actions.bbar;
    //~ Lino.FieldBoxMixin.superclass.constructor.call(this, config);
  //~ },
  do_when_clean : function(auto_save,todo) { todo() },
  //~ format_data : function(html) { return '<div class="htmlText">' + html + '</div>' },
  format_data : function(html) { return html },
  get_base_params : function() {
    // needed for insert action
    var p = Ext.apply({}, this.base_params);
    Lino.insert_subst_user(p);
    return p;
  },
  set_base_params : function(p) {
    this.base_params = Ext.apply({},p);
    //~ if (p.param_values) this.set_param_values(p.param_values);  
  },
  clear_base_params : function() {
      this.base_params = {};
      Lino.insert_subst_user(this.base_params);
  },
  set_base_param : function(k,v) {
    this.base_params[k] = v;
  }
});


Ext.define('Lino.HtmlBoxPanel', {
    extend : 'Ext.panel.Panel',
     mixins: [
         'Lino.PanelMixin',
         'Lino.FieldBoxMixin'
     ],
    scrollable:true,

  disabled_in_insert_window : true,
  constructor : function(config,params) {
    this.before_init(config,params);
      config.viewType = 'tableview';
      this.callSuper(arguments);
  },
  //~ constructor : function(ww,config,params){
    //~ this.ww = ww;
    //~ if (params) Ext.apply(config,params);
    //~ var actions = Lino.build_buttons(this,config.ls_bbar_actions);
    //~ if (actions) config.bbar = actions.bbar;
    //~ Lino.FieldBoxMixin.constructor.call(this, ww,config,params);
  //~ },
  //~ constructor : function(ww,config,params){
    //~ this.ww = ww;
    //~ if (params) Ext.apply(config,params);
    //~ var actions = Lino.build_buttons(this,config.ls_bbar_actions);
    //~ if (actions) config.bbar = actions.bbar;
    //~ Lino.FieldBoxMixin.superclass.constructor.call(this, config);
  //~ },
  //~ disable : function() { var tb = this.getBottomToolbar(); if(tb) tb.disable()},
  //~ enable : function() { var tb = this.getBottomToolbar(); if(tb) tb.enable()},
  onRender : function(ct, position){
    // Lino.HtmlBoxPanel.superclass.onRender.call(this, ct, position);
      this.callSuper(arguments);
    //~ console.log(20111125,this.containing_window);
    if (this.containing_panel) {
      this.containing_panel.on('enable',this.enable,this);
      this.containing_panel.on('disable',this.disable,this);
    }
    this.el.on({
      dragenter:function(event){
        event.browserEvent.dataTransfer.dropEffect = 'move';
        return true;
      }
      ,dragover:function(event){
        event.browserEvent.dataTransfer.dropEffect = 'move';
        event.stopEvent();
        return true;
      }
      ,drop:{
        scope:this
        ,fn:function(event){
          event.stopEvent();
          //~ console.log(20110516);
          var files = event.browserEvent.dataTransfer.files;
          if(files === undefined){
            return true;
          }
          var len = files.length;
          while(--len >= 0){
            console.log(files[len]);
            //~ this.processDragAndDropFileUpload(files[len]);
          }
          Lino.show_insert(this);
        }
      }
    });
  },
  refresh : function(unused) {
      // this.containing_panel.refresh();
      this.refresh_with_after();
  },
  /* HtmlBoxPanel */
  refresh_with_after : function(after) {
      // var todo = this.containing_panel.refresh();
      var box = this.items.get(0);
      var todo = function() {
          var main_height = this.getHeight();
        if (this.disabled) { return; }
        this.set_base_params(this.containing_panel.get_master_params());

        var el = box.getEl();
        if (el) {
            var record = this.containing_panel.get_current_record();
            var newcontent = record ? 
                this.format_data(record.data[this.name]) : '';
            // console.log('20140917 HtmlBox.refresh()',
            //             this.name, record.data.LinksByHuman);
            // update is @deprecated in 5.0.0 ,Please use {@link #setHtml} instead.
            el.setHtml(newcontent);
            // var newHeight = el.getHeight();
            // el.setMaxHeight(newHeight);
            // if (newHeight < main_height){
            //     box.updateMaxHeight(newHeight);
            //     }
            // else {
            //     box.updateMaxHeight(main_height);
            // }
            // box.updateMaxHeight(newHeight);
        // } else {
        //     console.log('20140502 cannot HtmlBox.refresh()',this.name);
        }
      };
      //  HKC
      //Lino.do_when_visible(box, todo.createDelegate(this));
      Lino.do_when_visible(box, todo.bind(this));
  }
});
//~ Ext.override(Lino.HtmlBoxPanel,Lino.FieldBoxMixin);

// HKC
//Lino.ActionFormPanel = Ext.extend(Ext.form.FormPanel,Lino.MainPanel);
//Lino.ActionFormPanel = Ext.extend(Lino.ActionFormPanel, Lino.PanelMixin);
//Lino.ActionFormPanel = Ext.extend(Lino.ActionFormPanel, Lino.FieldBoxMixin);
//Lino.ActionFormPanel = Ext.extend(Lino.ActionFormPanel, {
Ext.define('Lino.ActionFormPanel', {
    extend : 'Ext.form.FormPanel',
     mixins: [
         //'Ext.form.FormPanel',
         'Lino.MainPanel',
         'Lino.PanelMixin',
         'Lino.FieldBoxMixin'
     ],

  //~ layout:'fit'
  //~ ,autoHeight: true
  //~ ,frame: true
  window_title : "Action Parameters",
  constructor : function(config){
    config.buttons = [
        {text: 'OK', handler: this.on_ok, scope: this},
        {text: 'Cancel', handler: this.on_cancel, scope: this}
    ];
    Lino.ActionFormPanel.superclass.constructor.call(this, config);
      //this.callSuper(arguments);
  }
  //~ ,initComponent : function(){
    //~ Lino.ActionFormPanel.superclass.initComponent.call(this);
  //~ }
  ,on_cancel : function() { 
    this.get_containing_window().close();
  }
  ,on_ok : function() { 
    var panel = this.requesting_panel;
    // var panel = this.get_containing_window().main_item;
    // console.log("20131004 on_ok",this,panel,arguments);
    var actionName = this.action_name;
    var pk = this.record_id || this.default_record_id;
    if (pk == undefined && this.base_params) { pk = this.base_params.mk; }
    if (pk == undefined && panel) {
        pk = panel.get_current_record().id;
    }
    if (pk == undefined) {
        // list actions e.g. VerifyUser, SignIn
        pk = '-99998';
        // Lino.alert("Sorry, dialog action without base_params.mk");
        // return;
    }
    var self = this;
    // function on_success() { self.get_containing_window().close(); };
    // see 20131004 and 20140430
    var url = '/api';

    // 20150119 : The OK button on AgentsByClient.create_visit went to
    // /api/pcsw/Clients/ instead of /api/pcsw/Coachings/
    // if (panel) 
    //     url += panel.ls_url;
    // else 
    //     url += this.ls_url;

    if (this.ls_url) 
        url += this.ls_url;
    else 
        url += panel.ls_url;
    url += '/' + pk;
    // wrap into function to prepare possible recursive call
    var fn = function(panel, btn, step) {
      var p = {};
      self.add_field_values(p);
      if (panel) Ext.apply(p, panel.get_base_params());
      delete p.pv;
      // console.log("20150130", p.pv);

      Lino.call_ajax_action(
          panel, 'GET', url, p, actionName, step, fn); //  , on_success);
    };
    fn(panel, null, null);
    
    
  }
  /* ActionFormPanel*/
  ,set_status : function(status, rp){
    this.requesting_panel = Ext.getCmp(rp);
    //~ console.log('20120918 ActionFormPanel.set_status()',status,rp,this.requesting_panel);
    this.clear_base_params();
    if (status == undefined) status = {};
    //~ if (status.param_values) 
    this.set_field_values(status.field_values);
    if (status.base_params) this.set_base_params(status.base_params);
    this.record_id = status.record_id;
  }
  
  ,before_row_edit : function(record) {}
  ,add_field_values : function (p) { // similar to add_param_values()
      /* LS 20160517 : Until now Lino tested whether the form is
       dirty, and if not, submitted only the values which had been set
       by set_status. But now status_field_values can be empty because
       Action.keep_user_values is True. In that case we must submit
       the current values even if the form is not dirty.  I don't
       remember why we had this feature of not submitting unmodified
       field values, so I remove this feature for now. */
      p.fv = this.get_field_values();
      // if (this.form.isDirty()) {
      //   p.fv = this.get_field_values();
      // }else{
      //   if (this.status_field_values) 
      //     p.fv = Lino.fields2array(this.fields,this.status_field_values);
      // }
      //~ console.log("20120203 add_param_values added pv",pv,"to",p);
  }
  ,get_field_values : function() {
      return Lino.fields2array(this.fields);
  }
  ,set_field_values : function(pv) {
      //~ console.log('20120203 MainPanel.set_param_values', pv);
      this.status_field_values = pv;
      if (pv) {
          this.form.my_loadRecord(pv);
          var record = { data: pv };
          this.before_row_edit(record);
      } else {
          this.form.reset(); 
          this.before_row_edit();
      }
  }
  ,config_containing_window : function(wincfg) { 
      wincfg.title = this.window_title;
      wincfg.keys = [
        {   // HKC
            //key: Ext.EventObject.ENTER,
            key : Ext.event.Event.ENTER,
            fn: this.on_ok, scope: this }
      ];
      
      if (!wincfg.defaultButton) {
          var f = this.getForm();

          if(f.isFormField){
              wincfg.defaultButton = f;
              return false;
          }
      }

  }
});

    
Lino.fields2array = function(fields,values) {
    //~ console.log('20130605 fields2array gonna loop on', fields,values);
    var pv = Array(fields.length);
    for(var i=0; i < fields.length;i++) {
        var f = fields[i];
        if (values) 
          var v = values[f.name];
        else 
          var v = f.getValue();
        if (f instanceof Lino.ComboBox && (!Number.isInteger(v) || v == null )){
            if (f.rawValue == ""){
                pv[i] = null;
            }
            else {
                pv[i] = f.hiddenvalue_id;
            }
            // v = f.rawValue;
            // var data = f.config.store;
            // var index = 1;
            // for (var e=0 ; e < data.length ; e++){
            //     if (data[e][index] == v) {
            //         pv[i] = data[e][0];
            //         break;
            //     }
            // }
        }
        else {
            pv[i] = v; // f.getValue();
        }
        if (f.formatDate) {
            pv[i] = f.formatDate(pv[i]);
        } ;
    };
    return pv;
};


Ext.define('Lino.form.field.HtmlEditor',{
    override : 'Ext.form.field.HtmlEditor',
    // Extjs set the default value to (Non-breaking space) in Opera,
    // (Zero-width space) in all other browsers. as following.
    // defaultValue: Ext.isOpera ? '&#160;' : '&#8203;',
    // So with Opera If the user does not edit a record with HtmlEditor as at least one of its fields. Lino will
    // consider the record as Dirty (Edited by the user) which is false. To prevent this , we set the defaultValue to
    // Zero-width space for all browsers.
    defaultValue: '&#8203;',
    fixKeys: (function() {
        var tag;
        if (Ext.isIE10m) {
            return function(e) {
                var me = this,
                    k = e.getKey(),
                    doc = me.getDoc(),
                    readOnly = me.readOnly,
                    range, target;
                if (k === e.TAB) {
                    e.stopEvent();
                    // TODO: add tab support for IE 11.
                    if (!readOnly) {
                        range = doc.selection.createRange();
                        if (range) {
                            if (range.collapse) {
                                range.collapse(true);
                                range.pasteHTML('&#160;&#160;&#160;&#160;');
                            }
                            me.deferFocus();
                        }
                    }
                }
                //HKC change | Start
                else if (k == e.S && e.ctrlKey){
                    parent = this.getBubbleTarget();
                    while (parent != null && parent != undefined && !(parent instanceof Lino.FormPanel)){
                        parent = parent.getBubbleTarget();
                    }
                    if (parent != undefined){
                        parent.on_ok(e);
                    }
                    e.stopEvent();
                    e.preventDefault();
                    this.focus();
                }
                //HKC change | End
            };
        }
        if (Ext.isOpera) {
            return function(e) {
                var me = this,
                    k = e.getKey(),
                    readOnly = me.readOnly;
                if (k === e.TAB) {
                    e.stopEvent();
                    if (!readOnly) {
                        me.win.focus();
                        me.execCmd('InsertHTML', '&#160;&#160;&#160;&#160;');
                        me.deferFocus();
                    }
                }
                //HKC change | Start
                else if (k == e.S && e.ctrlKey){
                    parent = this.getBubbleTarget();
                    while (parent != null && parent != undefined && !(parent instanceof Lino.FormPanel)){
                        parent = parent.getBubbleTarget();
                    }
                    if (parent != undefined){
                        parent.on_ok(e);
                    }
                    e.stopEvent();
                    e.preventDefault();
                    this.focus();
                }
                //HKC change | End
            };
        }
        // Not needed, so null.
        return null;
    }()),
});

// Ext.define('Lino.grid.column.Check',{
//     override : 'Ext.grid.column.Check',
//     checkchange : function(rowIndex, checked, record, e, eOpts ) {
//         console.log('Ext.field.Checkbox get changes');
// },
// });
//Edited by HKC
//    Ext.define('Lino.PanelMixin', {
//    extend: 'Ext.panel.Table',
//Ext.override('Ext.form.Basic',{
Ext.define('Lino.form.Panel', {
    //extend : 'Ext.form.Panel',
    override : 'Ext.form.BasicForm',
    //xtype  : 'myview',
    my_loadRecord : function(values){
    //~ loadRecord : function(record){
        /* Same as ExtJS's loadRecord() (setValues()), except that we
        forward also the record to field.setValue() so that Lino.Combobox
        can use it.
        */
        //~ console.log('20120918 my_loadRecord',values)
        if(Ext.isArray(values)){
            for(var i = 0, len = values.length; i < len; i++){
                var v = values[i];
                var f = this.findField(v.id);
                if(f){
                    f.setValue(v.value,values);
                    if(this.trackResetOnLoad){
                        f.originalValue = f.getValue();
                    }
                }
            }
        }else{
            var field, id;
            for(id in values){
                if(!Ext.isFunction(values[id]) && (field = this.findField(id))){
                    field.setValue(values[id],values);
                    //TFP #1974
                    if (values[field.hiddenName]){
                        field.hiddenvalue_tosubmit =values[field.hiddenName];
                        field.hiddenvalue_id =values[field.hiddenName];
                        field.setHiddenValue(values[field.hiddenName])}
                        field.changed = true;
                    if(this.trackResetOnLoad){
                        field.originalValue = field.getValue();
                        //~ if (field.hiddenField) {
                          //~ field.hiddenField.originalValue = field.hiddenField.value;
                        //~ }
                    }
                }
            }
        }
        return this;
    }
});

// HKC
//Lino.FormPanel = Ext.extend(Ext.form.FormPanel,Lino.MainPanel);
//Lino.FormPanel = Ext.extend(Lino.FormPanel,Lino.PanelMixin);
//Lino.FormPanel = Ext.extend(Lino.FormPanel,{
// https://www.sencha.com/forum/showthread.php?287211-extjs5-amp-initComponent&p=1050308&viewfull=1#post1050308
Ext.define('Lino.FormPanel', {
    extend : 'Ext.form.Panel',
     mixins: [
         'Lino.PanelMixin',
         'Lino.MainPanel'
     ],

  params_panel_hidden : false,
  save_action_name : null,
  layout: 'anchor',
    defaults: {
        anchor: '100%'
    },
  //~ base_params : {},
  //~ query_params : {},
  //~ 20110119b quick_search_text : '',
  constructor : function(config,params){
    if (params) Ext.apply(config,params);
    this.base_params = {};
    //~ ww.config.base_params.query = ''; // 20111018
    //~ console.log(config);
    //~ console.log('FormPanel.constructor() 1',config)
    //~ Ext.applyIf(config,{base_params:{}});
    //~ console.log('FormPanel.constructor() 2',config)

    config.trackResetOnLoad = true;

    Lino.FormPanel.superclass.constructor.call(this, config);
      // this.callSuper(arguments);

    //~ this.set_base_param('$URL_PARAM_FILTER',null); // 20111018
    //~ this.set_base_param('$URL_PARAM_FILTER',''); // 20111018

  },
  initComponent : function(){

    this.containing_panel = this;

    //~ console.log("20111201 containing_window",this.containing_window,this);


    var actions = Lino.build_buttons(this, this.ls_bbar_actions);
    if (actions) {
        this.bbar = actions.bbar;
    //~ } else {
        //~ this.bbar = [];
    }
    //~ Ext.apply(config,Lino.build_buttons(this,config.ls_bbar_actions));
    //~ config.bbar = Lino.build_buttons(this,config.ls_bbar_actions);
    //~ var config = this;

    //~ if (this.containing_window instanceof Lino.DetailWrapper) {

    //~ console.log('20120121 initComponent', this.action_name);
    //~ if (this.action_name == 'detail' | this.action_name == 'show') {
    //~ if (this.action_name != 'insert') {
    if (! this.hide_top_toolbar) {
      this.tbar = [];
      // 20111015
      if (! this.hide_navigator) {
        this.record_selector = Ext.create('Lino.RemoteComboFieldElement',{
          store: Ext.create('Lino.ComplexRemoteComboStore',{
            //~ baseParams: this.containing_window.config.base_params,
            baseParams: this.get_base_params(),
            //~ value: this.containing_window.config.base_params.query,
            proxy: Ext.create('Ext.data.HttpProxy',{
              url: '/choices' + this.ls_url,
              method:'GET',
              reader: {
                  type: 'json',
                  rootProperty: 'rows',
                  totalProperty: "count",
                  idProperty: this.ls_id_property,
                  keepRawData: true // LS 20151221
              },
            })
          }),
          pageSize:25,
          listeners: {
            scope:this,
            select:function(combo,record,index) {
              //~ console.log('jumpto_select',arguments);
              // this.goto_record_id(record.id);
                this.goto_record_id(record.data.value);
            }
          },
          emptyText: "Go to record",
          always_enabled: true,
        });
        this.tbar = this.tbar.concat([this.record_selector]);

        this.tbar = this.tbar.concat([
            this.first = Ext.create('Ext.button.Button',{
              tooltip:"First",disabled:true,
              handler:this.moveFirst,scope:this,iconCls:'x-tbar-page-first'}),
          this.prev = Ext.create('Ext.button.Button',{
              tooltip:"Previous",disabled:true,
              handler:this.movePrev,scope:this,iconCls:'x-tbar-page-prev'}),
          this.next = Ext.create('Ext.button.Button',{
              tooltip:"Next",disabled:true,
              handler:this.moveNext,scope:this,iconCls:'x-tbar-page-next'}),
          this.last = Ext.create('Ext.button.Button',{
              tooltip:"Last",disabled:true,
              handler:this.moveLast,scope:this,iconCls:'x-tbar-page-last'})
        ]);
      }
      this.tbar = this.add_params_panel(this.tbar);

      //~ console.log(20101117,this.containing_window.refresh);
      // this.tbar = this.tbar.concat([
      //   {
          //~ text:'Refresh',
          //HKC
          //handler:function(){ this.do_when_clean(false,this.refresh.createDelegate(this)) },
          //   handler:function(){ this.do_when_clean(false,this.refresh.bind(this)) },
          // iconCls: 'x-tbar-loading',
          // tooltip:"Reload current record",
          // scope:this}
      // ]);
      this.tbar = this.tbar.concat(Ext.create('Ext.button.Button',{
                tooltip:"Reload current record",
                disabled:true,
                handler:function(){ this.do_when_clean(false,this.refresh.bind(this)) },
                scope:this,
                iconCls:'x-tbar-loading'}));

      if (this.bbar) { // since 20121016
        if (this.tbar) {
            this.tbar = this.tbar.concat(['-']) ;
        } else {
          this.tbar = [];
        }
        this.tbar = this.tbar.concat(this.bbar) ;
        this.bbar = undefined;
      }

      this.tbar = this.tbar.concat([
          '->',
          this.displayItem = Ext.create('Ext.Toolbar.TextItem',{})
      ]);

    }
    //~ if (this.content_type && this.action_name != 'insert') {
      //~ this.bbar = this.bbar.concat([
        //~ '->',
        //~ { text: "[$_('Help Text Editor')]",
          //~ handler: Lino.help_text_editor,
          //~ qtip: "$_('Edit help texts for fields on this model.')",
          //~ scope: this}
      //~ ])
    //~ }
    //~ this.before_row_edit = config.before_row_edit.createDelegate(this);

    //~ if (this.master_panel) {
        //~ this.set_base_params(this.master_panel.get_master_params());
    //~ }

    //  Edited by HKC
    // Lino.FormPanel.superclass.initComponent.call(this);
    this.callSuper();  // 20160630
    // this.callParent();  // 20160630

    // this.on('show',
    //         function(){ this.init_focus();},
    //         this);

    this.on('render',function(){
      //  HKC
      //this.loadMask = new Ext.create('Ext.LoadM,(this.bwrap,{msg:"Please wait..."}));
        this.loadMask = Ext.create('Ext.LoadMask',{
                                        msg    : 'Please wait...',
                                        target : this,
                                    });
    },this);


    if (this.action_name == 'insert') {
      this.cascade(function(cmp){
        // console.log('20110613 cascade',cmp);
        if (cmp.disabled_in_insert_window) {
            //~ cmp.disable();
            cmp.hide();
        }
      });

    }

  },

  unused_init_focus : function(){
    // set focus to the first field
    console.log("20140205 Lino.FormPanel.init_focus");
    // Lino.FormPanel.superclass.focus.call(this);
    this.getForm().items.each(function(f){
        if(f.isFormField && f.rendered){
            f.focus();
            console.log("20140205 focus", f);
            return false;
        }
    });
  },

  /* FormPanel */
  get_status : function(){
      var st = {
        base_params: this.get_base_params(),
        // data_record : this.get_current_record()
        }
      st.record_id = this.get_current_record().id;
      // 20140917 : get_status must not store the whole data_record
      // because that would prevent the form from actually reloading
      // when set_status is called after a child window closed.

      var tp = this.items.get(0);
      if (tp instanceof Ext.TabPanel) {
        st.active_tab = tp.getActiveTab();
      }
      st.param_values = this.status_param_values;
      return st;
  },

  /* FormPanel */
  set_status : function(status, rp){
    this.requesting_panel = Ext.getCmp(rp);
    // console.log('20140917 FormPanel.set_status()', status);
    this.clear_base_params();
    if (status == undefined) status = {};
    //~ if (status.param_values)
    this.set_param_values(status.param_values);
    if (status.base_params) this.set_base_params(status.base_params);
    var tp = this.containing_window.items.get(0);
    if (tp instanceof Ext.TabPanel) {
      if (status.active_tab) {
        //~ console.log('20111201 active_tab',this.active_tab,this.items.get(0));
        //~ tp.activeTab = status.active_tab;
        tp.setActiveTab(status.active_tab);
        //~ this.main_item.items.get(0).activate(status.active_tab);
      } else {
        if (! status.data_record) {  // 20141206
            tp.setActiveTab(0);
        }
      }
    }

    if (status.data_record) {
      /* defer because set_window_title() didn't work otherwise */
      // 20140421 removed defer for bughunting to simplify side effects
      // this.set_current_record.createDelegate(
      //     this, [status.data_record]).defer(100);
      this.set_current_record(status.data_record);
      //~ return;
    } else {
        var record_id = status.record_id || this.default_record_id;
        if (record_id != undefined) {
          /* possible values include 0 and null, 0 being a valid record id,
          null the equivalent of undefined
          */
          this.load_record_id(record_id);
        } else {
            this.set_current_record(undefined);
        }
    }
    // this.init_focus();
  }
  ,get_base_params : function() {  /* FormPanel */
    // needed for insert_action
    var p = Ext.apply({}, this.base_params);
    Lino.insert_subst_user(p);
    return p;
  }
  ,set_base_params : function(p) {
    //~ this.base_params = Ext.apply({},this.base_params); // make sure it is an instance variable
    delete p['query'] // 20120725
    Ext.apply(this.base_params,p);
    if (this.record_selector) {
        var store = this.record_selector.getStore();
        // for (k in p) store.setBaseParam(k,p[k]);
        for (k in p) store.getProxy().setExtraParam(k,p[k]);
        delete this.record_selector.lastQuery;
        //~ console.log("20120725 record_selector.setBaseParam",p)
    }
  }
  ,clear_base_params : function() {
      this.base_params = {};
      Lino.insert_subst_user(this.base_params);
  }
  ,set_base_param : function(k,v) {
    this.base_params[k] = v;
  }
  ,after_delete : function() {
    if (this.current_record.navinfo.next)
      this.moveNext();
    else if (this.current_record.navinfo.prev)
      this.movePrev();
    else
      this.abandon();
  }
  ,moveFirst : function() {this.goto_record_id(
      this.current_record.navinfo.first)}
  ,movePrev : function() {this.goto_record_id(
      this.current_record.navinfo.prev)}
  ,moveNext : function() {this.goto_record_id(
      this.current_record.navinfo.next)}
  ,moveLast : function() {this.goto_record_id(
      this.current_record.navinfo.last)}

  ,refresh : function(unused) {
      this.refresh_with_after();
  }
  /* FormPanel */
  ,refresh_with_after : function(after) {
    // console.log('20140917 Lino.FormPanel.refresh_with_after()',this);
    if (this.current_record) {
        this.load_record_id(this.current_record.id, after);
    } else {
        this.set_current_record(undefined, after);
    }
  }

  ,do_when_clean : function(auto_save, todo) {
    var this_ = this;
    if (this.form.isDirty()) {
        // console.log('20140421 do_when_clean : form is dirty')
        if (auto_save) {
            this_.save(todo);
        } else {
          //~ console.log('20111217 do_when_clean() form is dirty',this.form);
          var config = {title:"Confirmation"};
          config.buttons = Ext.Msg.YESNO;
          config.icon = Ext.Msg.QUESTION;
          config.message = "Save changes to current record ?";
          config.fn = function(buttonId) {
            //~ console.log('do_when_clean',buttonId)
            if (buttonId == "yes") {
                //~ Lino.submit_detail(this_,undefined,todo);
                //~ this_.containing_window.save(todo);
                this_.save(todo);
            } else if (buttonId == "no") {
              todo();
            }
          };
          Ext.MessageBox.show(config);
        }
    }else{
      // console.log('20140421 do_when_clean : now!')
      todo();
    }
  }

  ,goto_record_id : function(record_id) {
    // console.log('20140917 Lino.FormPanel.goto_record_id()',record_id);
    //~ var this_ = this;
    //~ this.do_when_clean(function() { this_.load_record_id(record_id) }
    this.do_when_clean(
        // HKC
        // true, this.load_record_id.createDelegate(this, [record_id]));
        // true, this.load_record_id.bind(record_id));
        true, this.load_record_id.bind(this,[record_id]));
  }

  ,load_record_id : function(record_id, after) {
    var this_ = this;
    var p = Ext.apply({}, this.get_base_params());
    if (this.action_name)
        p.an = this.action_name;
    p.rp = this.getId();
    p.fmt = 'json';
    this.add_param_values(p);
    if (this.loadMask) this.loadMask.show();
    Ext.Ajax.request({
      waitMsg: 'Loading record...',
      method: 'GET',
      params: p,
      scope: this,
      url: this.get_record_url(record_id),
      success: function(response) {
        // todo: convert to Lino.action_handler.... but result
        if (this.loadMask) this.loadMask.hide();
        if (response.responseText) {
          var rec = Ext.decode(response.responseText);
          // console.log('20150905 load_record_id success', rec);
          this.set_param_values(rec.param_values);
          this.set_current_record(rec, after);
        }
      },
      failure: Lino.ajax_error_handler(this)
    });
  }

  ,abandon : function () {
    Ext.MessageBox.alert('Note',
      "No more records to display. Detail window has been closed.");
    Lino.close_window();
  }

  ,set_current_record : function(record, after) {
      // console.log('20150905 set_current_record', record);
    if (this.record_selector) {
        // HKC: disable this line to avoid getting "Save or not the record" when closing and IsDirty() is True
        //this.record_selector.clearValue();
        // e.g. InsertWrapper FormPanel doesn't have a record_selector
    }
    this.current_record = record;
    if (record && record.data) {
      this.enable();
      this.form.my_loadRecord(record.data);
      this.set_window_title(record.title);
      //~ this.getBottomToolbar().enable();
      //  console.log("HKC disable getBottomToolbar");
      var da = record.data.disabled_fields;
      if (da) {
          //~ console.log('20120528 disabled_actions =',da,this.getBottomToolbar());
          //~ 20121016 this.getBottomToolbar().items.each(function(item,index,length){
          // var tb = this.tbar;
          // var tb = this.getTopToolbar();
          var tb = this.getDockedItems()[0];
          if (tb) tb.items.each(function(item,index,length){
              //~ console.log('20120528 ',item.itemId,'-->',da[item.itemId]);
              if (da[item.itemId]) item.disable(); else item.enable();
          });
      };
if (this.disable_editing | record.data.disable_editing) {
//          console.log("20120202 disable_editing",record.title);
          this.form.getFields().each(function(cmp){
            if (!cmp.always_enabled) cmp.disable();
          },this);
      } else {
          this.form.getFields().each(function(cmp){
//            console.log("20120202");
            if (record.data.disabled_fields[cmp.name]) cmp.disable();
            else cmp.enable();
          },this);

          //~ if (record.data.disabled_fields) {
              //~ for (i = 0; i < record.data.disabled_fields.length; i++) {
                  //~ var flds = this.find('name',record.data.disabled_fields[i]);
                  //~ if (flds.length == 1) {
                    //~ flds[0].disable();
                  //~ }
              //~ }
          //~ }
      };
      if (this.first) {
        if (record.navinfo  && ! this.hide_navigator) {
          this.first.setDisabled(!record.navinfo.first);
          this.prev.setDisabled(!record.navinfo.prev);
          this.next.setDisabled(!record.navinfo.next);
          this.last.setDisabled(!record.navinfo.last);
          //this.displayItem.setText(record.navinfo.message);
          this.displayItem.text = record.navinfo.message;
        } else {
          this.first.setDisabled(true);
          this.prev.setDisabled(true);
          this.next.setDisabled(true);
          this.last.setDisabled(true);
        }
      }
    } else {
      if (this.form.rendered)
        this.form.reset(); /* FileUploadField would fail when resetting a non-rendered form */
      //~ this.disable();
      //~ this.getBottomToolbar().disable();
        //  HKC
      this.form.items.each(function(cmp){
       cmp.disable();
      },this);
      this.set_window_title(this.empty_title);
      //~ this.containing_window.window.setTitle(this.empty_title);
      if (!this.hide_navigator) {
        this.first.disable();
        this.prev.disable();
        this.next.disable();
        this.last.disable();
      }
    }
    // console.log('20140917 gonna call before_row_edit', record);
    this.before_row_edit(record);
    // console.log('20140917 gonna call after', after);
    // if (after) after();
    if (after && Ext.isFunction(after)){
        after();
    }
  },

  /* FormPanel */
  before_row_edit : function(record) {},
  search_change : function(field,oldValue,newValue) {
    //~ console.log('search_change',field.getValue(),oldValue,newValue)
    this.set_base_param('query',field.getValue());
    this.refresh();
  },

  get_selected : function() { return [ this.current_record ] },
  get_current_record : function() {
    //~ console.log(20100714,this.current_record);
    return this.current_record
  },

  get_permalink_url : function() {
      var rec = this.get_current_record();
      if (rec && ! rec.phantom && rec.id != -99998)
          return '/api'
              + this.ls_url + '/' + rec.id;
      return '/api' + this.ls_url;

  },
  add_param_tab : function(p) {
    var main = this.items.get(0);
    if (main.activeTab) {
      var tab = main.items.indexOf(main.activeTab);
      // console.log('20150130 main.activeTab', tab, main.activeTab);
      if (tab) p.tab = tab;
    // } else {
    //   console.log('20150130 no main.activeTab');
    }
  },
  get_permalink_params : function() {
    var p = {};
    //~ var p = {an:'detail'};
    if (this.action_name)
        p.an = this.action_name;
    this.add_param_tab(p)
    this.add_param_values(p)
    return p;
  }

  ,validate_form : function() {  // not used. see actions.ValidateForm
      // var ov = {};
      // this.form.items.each(function(f){
      //     ov[f.name] = f.originalValue
      // });

      // console.log('20140509 FormPanel.validate_form', ov);
      // var after = function() {
      //     this.form.items.each(function(f){
      //         f.originalValue = ov[f.name];
      //     });
      // }
      // this.save2(null, 'validate', after);
      this.save2(null, 'validate');
  }

  /* Lino.FormPanel */
  ,save : function(after) {
    var action_name = this.save_action_name;
    if (!action_name)
        action_name = this.action_name;
    // console.log('20140503 FormPanel.save', action_name);
    this.save2(after, action_name);
  }

  ,save2 : function(after, action_name) {
    var rec = this.get_current_record();
    if (!rec) {
        Lino.notify("Sorry, no current record.");
        return;
    }
    var panel = this;
    if (this.has_file_upload) this.form.fileUpload = true;
    this.loadMask.show();
    var p = {};
    Ext.apply(p, this.get_base_params());
    p.rp = this.getId();
    p.an = action_name;
    this.add_param_tab(p);
    // console.log('20150216 FormPanel.save()', rec, this.form);
    var submit_config = {
        params: p,
        scope: this,
        success: function(form, action) {
          this.loadMask.hide();
          Lino.notify(action.result.message);
          Lino.handle_action_result(this, action.result, after);
        },
        failure: function(form,action) {
          this.loadMask.hide();
          Lino.on_submit_failure(form, action);
        },
        clientValidation: true
    };
    if (rec.phantom) {  // it's a new record
      Ext.apply(submit_config, {
        url: '/api' + this.ls_url,
        method: 'POST'
      });
      // panel.refresh();
      // temporarily disabled. See 20151002
    } else {  // submit on existing row
      Ext.apply(submit_config, {
        url: '/api'
              + this.ls_url + '/' + rec.id,
        method: 'PUT'
      })
    }
    var form = this.getForm();
    for (i = 0; i < form.getFields().length ; i++){
        field = form.getFields().items[i];
        if (field.hiddenvalue_tosubmit && field.changed){
            if (field.hiddenvalue_tosubmit == "Mynull"){
                hiddenvalue_tosubmit = null;
            }
            else {
                hiddenvalue_tosubmit = field.hiddenvalue_tosubmit;
            }
            submit_config['params'][field.hiddenName] = hiddenvalue_tosubmit;
            field.changed = false;
        }
    }
    form.submit(submit_config);
  }

  ,on_cancel : function() {
    this.get_containing_window().close();
  }
  ,on_ok : function(e) {
        e.stopEvent();
      // console.log("20140424");
      // this.save(null, true, this.save_action_name);
      this.save();
  }
  ,config_containing_window : function(cls, wincfg) {

      // Note that defaultButton means: which component should receive
      // focus when Window is focussed.  If no defaultButton set,
      // specify the first form field.

      //if (!wincfg.defaultButton) this.getForm().items.each(function(f){
      //    if(f.isFormField){
      //        wincfg.defaultButton = f;
              // console.log("20140205 defaultButton", f);
              //return false;
          //}
      //});
        // New feature by Extjs 6.2.0 , see http://docs.sencha.com/extjs/6.2.0/modern/Ext.mixin.Keyboard.html
      wincfg.keyMap = {};

        wincfg.keyMap['ESC'] = {
                 handler: 'on_cancel',
                 scope: cls,
             };
        // Cmd on Mac OS X, Ctrl on Windows/Linux.
        wincfg.keyMap['CmdOrCtrl+S'] = {
                handler: 'on_ok',
                 scope: cls,
            };
  }

});

// #1045 Allowing typing to start editing a cell.

var TypeEditResetValue = false;
// global variable for checking if we're
//wanting to clear the value of an editor when starting to edit via key-stroke

Ext.override(Ext.grid.plugin.CellEditing, {

        requires: [
            'Ext.grid.column.Column',
            'Ext.util.KeyMap'
        ],

    initEditTriggers: function() {
        var me = this,
            view = me.view;

        // Listen for the edit trigger event.
        if (me.triggerEvent === 'cellfocus') {
            me.mon(view, 'cellfocus', me.onCellFocus, me);
        } else if (me.triggerEvent === 'rowfocus') {
            me.mon(view, 'rowfocus', me.onRowFocus, me);
        } else {

            // Prevent the View from processing when the SelectionModel focuses.
            // This is because the SelectionModel processes the mousedown event, and
            // focusing causes a scroll which means that the subsequent mouseup might
            // take place at a different document XY position, and will therefore
            // not trigger a click.
            // This Editor must call the View's focusCell method directly when we recieve a request to edit
            if (view.getSelectionModel().isCellModel) {
                view.onCellFocus = me.beforeViewCellFocus.bind(me);
            }

            // We want to have an option to disable click-editing, as we use double for detail open, and single for selection
            if (me.clicksToEdit) {
            // Listen for whichever click event we are configured to use
            me.mon(view, me.triggerEvent || ('cell' + (me.clicksToEdit === 1 ? 'click' : 'dblclick')), me.onCellClick, me);
            }
        }

        // add/remove header event listeners need to be added immediately because
        // columns can be added/removed before render
        me.initAddRemoveHeaderEvents();

        // Attach new bindings to the View's NavigationModel which processes cellkeydown events.
        me.view.getNavigationModel().addKeyBindings({
            esc: me.onEscKey,
            scope: me
        });

        // Start of Edits
        view.on('render', function() {
                me.keyNav = new Ext.util.KeyMap({
                    target : view.el,
                    binding:[
                    {
                        // key: [65, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105],  // 0123456789 + numpad0123456789
                        key: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 ,65, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105],  // 0123456789 + numpad0123456789
                        // key: /[a-z]/,
                        // key: ['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', 96, 97, 98, 99, 100, 101, 102, 103, 104, 105],
                        handler: me.onNumberKey,
                        scope: me
                    },
                    // {
                    //     key: 13,    // ENTER
                    //     handler: me.onEnterKey,
                    //     scope: me
                    // }, {
                    //     key: 27,    // ESC
                    //     handler: me.onEscKey,
                    //     scope: me
                    // }
                ]});
            }, me, { single: true });
        //End of Edits

    },


        onNumberKey: function(e) {
            var me = this,
                grid = me.grid,
                selModel = grid.getSelectionModel(),
                record,
                columnHeader = grid.headerCt.getHeaderAtIndex(0);
//            console.log("onNumberKey");
//            console.log(e);
            // Calculate editing start position from SelectionModel
            // CellSelectionModel
            if (selModel.getCurrentPosition) {
                pos = selModel.getCurrentPosition();
                record = grid.store.getAt(pos.row);
                columnHeader = grid.headerCt.getHeaderAtIndex(pos.column);
            }
            // RowSelectionModel
            else {
                record = selModel.getLastSelected();
            }

            // if current cell have editor, then save numeric key in global variable
            var ed = me.getEditor(record, columnHeader);
            // console.log(ed.editing)
            //todo get maskre and if match open editor
            if (!ed.editing) {
//                console.log("has ed")
                // newValue = String.fromCharCode(e);
                if (ed.field && ed.field.selectOnFocus){ // There is a race condition here with selecting on keystart
                    ed.field.selectOnFocus = false;
                    setTimeout(function(ed){
                     ed.field.selectOnFocus = ed.field.config.selectOnFocus;
                    }.bind(this,ed), 100);
                    }
//                console.log("RV = true")
                TypeEditResetValue = true

            }

            // start cell edit mode
//            TypeEdit = true
            me.startEdit(record, columnHeader);
        }
});

Ext.override(Ext.Editor, {
    startEdit : function(el, value, focus) {
        var me = this,
            field = me.field;

        me.completeEdit();
//        console.log(el, value, focus);
        me.boundEl = Ext.get(el);
        value = Ext.isDefined(value) ? value : me.boundEl.dom.innerHTML;

        if (!me.rendered) {
            me.render(me.parentEl || document.body);
        }

        if (me.fireEvent('beforestartedit', me, me.boundEl, value) !== false) {
//            console.log("startEdit")
            me.startValue = value;
            me.show();
            field.reset();
            field.setValue((TypeEditResetValue ? "" : value));
            me.realign(true);
            if (focus){field.focus(false,10);}
            if (field.autoSize) {
                field.autoSize();
            }
            me.editing = true;

            // reset global newValue

//            console.log("RV = false")
            TypeEditResetValue = false;
        }
    }
});

Lino.getRowClass = function(record, rowIndex, rowParams, store) {
    //~ console.log(20130816,record);
    //~ return 'x-grid3-row-green';
    //~ return record.data.row_class + ' auto-height';
    return record.data.row_class;
  //~ if (true) {
      //~ return 'x-grid3-row-red';
  //~ }
  //~ if (record.phantom) {
    //~ console.log(20101009,record);
    //~ rowParams.bodyStyle = "color:red;background-color:blue";
    //~ return 'lino-phantom-row';
    //~ }
  //~ console.log('20101009 not a phantom:',record);
  //~ return '';
}

//~ FOO = 0;

//Edited by HKC
//Lino.GridStore = Ext.extend(Ext.data.ArrayStore,{
Lino.GridStoreConfig = {
    autoLoad: true // 20160915
    ,leadingBufferZone: 20
    ,pageSize: 35 // 20160915
    // ,buffered: true // 20160915

    ,setup_options: function(options){
        if (!options) options = {};
        if (!options.params) options.params = {};
        options.params.fmt = 'json';
        options.params.rp = this.grid_panel.getId();
        Lino.insert_subst_user(options.params); // since 20121016
        options.params['idParam'] = this.idParam;
        options.params['id'] = this.idParam;
        this.grid_panel.add_param_values(options.params);
        return options;
    }

    // TFP OLD CODE,
    //  , load: function(options){
    //~ foo.bar = baz; // 20120213
    // console.log("20160701 GridStore.load()", this, options);

    // var start = this.grid_panel.start_at_bottom ? -1 : 0;
    // // 20160915
    // // if (this.grid_panel.hide_top_toolbar) {
    // if (true) {
    //     //~ console.log("20120206 GridStore.load() toolbar is hidden");
    //     // options.params.start = start;
    //     // if (this.grid_panel.preview_limit) {
    //     //   options.params.limit = this.grid_panel.preview_limit;
    //     // }
    // } else {
    //     var ps = this.grid_panel.calculatePageSize();
    //     // var ps = 15;
    //     if (!ps) {
    //       // console.log("GridStore.load() failed to calculate pagesize");
    //       return false;
    //     } 
    //     options.params.limit = ps;
      
    //     if (this.grid_panel.paging_toolbar) {
    //         // this.grid_panel.paging_toolbar.store.pageSize =  ps;
    //         // this.pageSize = ps;
    //         this.setConfig('pageSize', ps);
    //         // this.grid_panel.paging_toolbar.store.setConfig('pageSize', ps);
    //         // console.log(
    //         //     "20160630 GridStore.load() tbar ok", 
    //         //     this.grid_panel);
    //     } else {
    //         console.log(
    //             "20160630 GridStore.load() without tbar?!", 
    //             this.grid_panel);
    //     }
    //     if (options.params.start == undefined)
    //         // if (start != -1) 
    //         //     start = this.grid_panel.getTopToolbar().cursor
    //         options.params.start = start;
    //     if (options.start == undefined)
    //         // if (start != -1) 
    //         //     start = this.grid_panel.getTopToolbar().cursor
    //         options.start = start;
      
    //     // console.log("20141108 GridStore.load() ", options.params);
    // }
    // this.grid_panel.paging_toolbar.store.load(options.params);
    //     this.grid_panel.paging_toolbar.store.proxy.config.reader.limit = options.limit;
    //     this.grid_panel.paging_toolbar.store.proxy.config.reader.start = options.start;
    //~ Lino.insert_subst_user(options.params);
    // console.log("20160701 GridStore.load()", options.params, this.baseParams);
    // return Lino.GridStore.superclass.prefetch.call(this, options);
    //    return this.callSuper(arguments);
    //  }
  // ,insert : function(index, records) {
  //   return Ext.data.Store.prototype.insert.call(this, index, records)
    // return Lino.GridStore.superclass.insert.call(this, index, records);
  // }
};


Ext.define('Lino.GridStore', Ext.apply(Lino.GridStoreConfig,{
    extend: 'Ext.data.BufferedStore'
    // ,mixins: ['Ext.data.BufferedStore']
    //extend : 'Ext.data.ArrayStore'

    ,prefetch: function(options) {
    options = this.setup_options(options);
     return this.callSuper(arguments);
     }
}));

Ext.define('Lino.GridJsonStore', Ext.apply(Lino.GridStoreConfig,{
    extend : 'Ext.data.JsonStore'
    // ,mixins: ['Ext.data.BufferedStore']
    //extend : 'Ext.data.ArrayStore'

    ,load: function(options) {
    options = this.setup_options(options);
     return this.callSuper(arguments);
     }
}));


Lino.get_current_grid_config = function(panel) {
    return panel.get_current_grid_config();
}


// Like the default value for GridView.cellTpl but adds a class "lino-auto-height"
Lino.auto_height_cell_template = Ext.create('Ext.Template',
'<td class="x-grid3-col x-grid3-cell x-grid3-td-{id} {css}" style="{style}" tabIndex="0" {cellAttr}>',
    '<div class="lino-auto-height x-grid3-cell-inner x-grid3-col-{id}" unselectable="on" {attr}>{value}</div>',
'</td>'
);

// Edited by HKC (Migration to Exjts6)
// EditorGridPanel does not exist any more. replaced by Ext.grid.plugin.CellEditing
//Lino.GridPanel = Ext.extend(Ext.grid.EditorGridPanel, Lino.MainPanel);
//Lino.GridPanel = Ext.extend(Ext.grid.plugin.CellEditing, Lino.MainPanel);
//Lino.GridPanel = Ext.extend(Lino.GridPanel, Lino.PanelMixin);
//Lino.GridPanel = Ext.extend(Lino.GridPanel, {
Ext.define('Lino.GridPanel', {
    extend : 'Ext.grid.Panel',
     mixins: [
         // 'Ext.grid.plugin.CellEditing',
         'Lino.MainPanel',
         'Lino.PanelMixin'
     ],

  quick_search_text : '',
  start_at_bottom : false,
  is_searching : false,
  disabled_in_insert_window : true,
  // clicksToEdit:2,  // 20160815
  enableColLock: false,
  autoHeight: false,
  params_panel_hidden : false,
  preview_limit : undefined,
  row_height: 1,
    // Height setting has no effect but to overcome the hasRange() error.
    // See : https://www.sencha.com/forum/showthread.php?304363-Buffered-Store-Fatal-HasRange-Call/page2
    height : 100,
  //~ loadMask: true,
  //~ viewConfig: {
          //~ getRowClass: Lino.getRowClass,
          //~ emptyText:"$_('No data to display.')"
        //~ },
        
        
  // loadMask: {message:"Please wait..."},

  constructor : function(config){
      config.plugins = [];
      config.plugins.push({
          ptype: 'cellediting',
          clicksToEdit: 0 // disabled
      });

    //config.plugins = [new Lino.GridFilters()];
    config.plugins.push(Ext.create('Lino.GridFilters',{}));
      // config.plugins.push('gridfilters');



      if (config.p){
          config.is_main_window = config.p.is_main_window;
          config.params_panel = config.p.params_panel;
          }
    /* Very strange... here we cannot use callSuper()... otherwise
     * `this` is not passed correctly... 
     */ 
    Lino.GridPanel.superclass.constructor.call(this, config);
    // this.callSuper(config);
    
    //~ if (this.containing_window) {
        //~ console.log("20111206 install refresh");
        //~ this.containing_window.on('show',this.refresh,this);
    //~ }
    
  },
  
  init_containing_window : function(win) { 
    //~ console.log("20111206 install refresh");
    //~ win.on('show',this.refresh,this);
  }

  ,handle_key_event : function(e) { 
    // console.log("20140514 handle_key_event", e, this.keyhandlers);
    var h = this.keyhandlers[e.keyCode];
    if (h) {
      h(this);
      e.stopEvent();
    }
  }
  
  ,initComponent : function(){
    
    /* 
    Problem 20111206:
    When a GridPanel is the main item of the window, then it doesn't 
    have it's own header but uses the window's header bar.
    We must do this in initComponent because e.g. in beforerender 
    it's already to late: a header element has been created because 
    there was a title.
    But Lino.Window adds itself as `this.containing_window` 
    only after the GridPanel has been initialized.
    Workaround is to generate a line "params.containing_window = true;" 
    in the handler function.
    */
    this.loadMask = Ext.create('Ext.LoadMask',{
                                        msg    : 'Please wait...',
                                        target : this,
                                    });
    if (this.is_main_window) {
        //~ console.log(20111206, 'delete title',this.title,'from',this);
        this.tools = undefined;  
        this.title = undefined;  /* simply deleting it 
          isn't enough because that would only 
          unhide the title defined in some base class. */
    } 
    //~ else console.log(20111206, 'dont delete title',this.title,'from',this);
    
    /* e.g. when slave gridwindow called from a permalink */
    //~ if (this.base_params) Ext.apply(bp,this.base_params);  
    
    var proxy = Ext.create('Ext.data.HttpProxy',{

    //var proxy = {
      // 20120814 
      url: '/api' + this.ls_url
      ,method: "GET"
      ,idParam : this.ls_id_property
      ,reader: {
          type: 'json',
          rootProperty: 'rows',
          totalProperty: "count", 
          idProperty: this.ls_id_property,
          idParam : this.ls_id_property,
          keepRawData: true // LS 20151221
      }
        //type: 'ajax',
      //~ ,url: ADMIN_URL + '/restful' + this.ls_url
      //~ ,restful: true 
      //~ ,listeners: {load:on_proxy_load} 
      //~ ,listeners: {write:on_proxy_write} 
    });
    //~ config.store = new Ext.data.JsonStore({ 
    //this.store = new Ext.data.ArrayStore({

    this.store = Ext.create((!this.use_paging)?'Lino.GridStore':'Lino.GridJsonStore',{
      grid_panel: this
      ,listeners: { exception: Lino.on_store_exception }
      ,remoteSort: true
      // ,totalProperty: "count"
      // ,root: "rows"
      //~ ,id: "id"
      ,proxy: proxy
      //~ autoLoad: this.containing_window ? true : false
      ,idIndex: this.pk_index
      //~ ,baseParams: bp
      ,fields: this.ls_store_fields
      ,idProperty: this.ls_id_property
        ,idParam : this.ls_id_property
      // 20120814
      //~ ,writer : new Ext.data.JsonWriter({
        //~ writeAllFields: false
        //~ ,listful: true
      //~ })
      //~ ,restful : true
    });
      
    //~ console.log('config.pk_index',config.pk_index,config.store),
    delete this.ls_store_fields;
      
    var this_ = this;
    //~ var grid = this;
    this.store.on('load', function(store, records, successful, operation, eOpts) {
        // console.log('20160701 GridStore.on(load)',
        //             this, records, successful, operation, eOpts);
        // this_.set_param_values(this_.store.reader.arrayData.param_values);
        // console.log(20151221, this_.store.getProxy().getReader());
        this_.set_param_values(this_.store.getProxy().getReader().rawData.param_values);
            //console.log(this_.store.getData());
         //this_.set_param_values(this_.store.first().data.rows);
        //~ this_.set_status(this_.store.reader.arrayData.status);
        //~ 20120918
        this.getView().getRowClass = Lino.getRowClass;

        if (this_.store.getProxy().getReader().rawData.no_data_text) {
            //~ this.viewConfig.emptyText = this_.store.reader.arrayData.no_data_text;
            this.getView().emptyText = this_.store.getProxy().getReader().rawData.no_data_text;
            this.getView().refresh();
        }
        if (this_.containing_window)
            this_.set_window_title(this_.store.getProxy().getReader().rawData.title);
            //~ this_.containing_window.setTitle(this_.store.reader.arrayData.title);
        if (!this.is_searching) { // disabled 20121025: quick_search_field may not lose focus
          this.is_searching = false;
          if (this_.selModel instanceof Ext.selection.CellModel){
              if (this_.getStore().getCount()) // there may be no data
                  // this_.selModel.select(0,0);
                  this_.selModel.selectByPosition(0,0);
          } else {
              // this_.selModel.selectFirstRow();
              this_.selModel.selectByPosition(0,0);
              this_.getView().focusEl.focus();
          }
        }
        //~ else console.log("is_searching -> no focussing");
        //~ var t = this.getTopToolbar();
        //~ var activePage = Math.ceil((t.cursor + t.pageSize) / t.pageSize);
        //~ this.quick_search_field.focus(); // 20121024
      }, this
    );

    var actions = Lino.build_buttons(this, this.ls_bbar_actions);
    //var actions;
    //~ Ext.apply(config,Lino.build_buttons(this,config.ls_bbar_actions));
    //~ config.bbar, this.cmenu = Lino.build_buttons(this,config.ls_bbar_actions);
    //~ this.cmenu = new Ext.menu.Menu({items: config.bbar});
    delete this.ls_bbar_actions;
    if (actions) {
        this.cmenu = actions.cmenu;
        this.keyhandlers = actions.keyhandlers;
    }
    
    if (!this.hide_top_toolbar) {  
      var tbar = [ 
        this.quick_search_field = Ext.create('Ext.form.TextField',{
          //~ fieldLabel: "Search"
          listeners: { 
            scope:this_
            //~ ,change:this_.search_change
            
            ,render: Lino.quicktip_renderer("Quick Search","Enter a text to use as quick search filter")
            
            //~ ,keypress: this.search_keypress 
            ,blur: function() { this.is_searching = false}
          }
          ,validator:function(value) { return this_.search_validate(value) }
          //~ ,tooltip: "Enter a quick search text, then press TAB"
          //~ value: text
          //~ scope:this, 
          //~ ,enableKeyEvents: true
          //~ listeners: { keypress: this.search_keypress }, 
          //~ id: "seachString" 
      })];

      tbar = this.add_params_panel(tbar);
      var menu = [];
      var set_gc = function(index) {
        return function() {
          //~ console.log('set_gc() 20100812');
          this.getColumnModel().setConfig(
              this.apply_grid_config(index,this.ls_grid_configs,this.ls_columns));
        }
      }
      for (var i = 0; i < this.ls_grid_configs.length;i++) {
        var gc = this.ls_grid_configs[i];
        menu.push({text:gc.label,handler:set_gc(i),scope:this})
      }
      if(menu.length > 1) {
        tbar = tbar.concat([
          { text:"View",
            menu: menu,
            tooltip:"Select another view of this report"
          }
        ]);
      }
      
      if (actions) {
        tbar = tbar.concat(actions.bbar);
          //~ this.bbar = actions.bbar;
      }

      tbar = tbar.concat(Ext.create('Ext.button.Button',{
                tooltip:"Reload current record",
                handler:function(){ this.do_when_clean(false,this.refresh.bind(this)) },
                scope:this,
                iconCls:'x-tbar-loading'}));
      
      this.tbar = Ext.create('Ext.toolbar.Toolbar',{items: tbar});

      if (this.store instanceof Lino.GridJsonStore){
       this.paging_toolbar = this.tbar = Ext.create('Ext.toolbar.Paging',{
         store: this.store,
         prependButtons: true,
         // pageSize: 1,
         displayInfo: true,
         beforePageText: "Page",
         afterPageText: "of {0}",
         displayMsg: "Displaying {0} - {1} of {2}",
         firstText: "First page",
         lastText: "Last page",
         prevText: "Previous page",
         nextText: "Next page",
         items: tbar
       });
      }
    }
      
    if (this.cell_edit) {
      //  Edited by HKC
      //this.selModel = new Ext.grid.CellSelectionModel();
      this.selModel = Ext.create('Ext.selection.CellModel', {allowDeselect:true});
      // this.selModel = 'cellmodel';
      this.get_selected = function() {
          //~ console.log(this.getSelectionModel().selection);
          if (this.selModel.selection)
              return [ this.selModel.selection.record ];
          return [this.store.getAt(0)];
      };
      this.get_current_record = function() { 
          if (this.getSelectionModel().selection) 
              return this.selModel.selection.record;
          return this.store.getAt(0);
      };
    } else { 
      //this.selModel = new Ext.grid.RowSelectionModel();
        this.selModel = Ext.create('Ext.selection.RowModel',{allowDeselect:true});
      this.get_selected = function() {
        var sels = this.selModel.getSelections();
        if (sels.length == 0) sels = [this.store.getAt(0)];
        return sels
      };
      this.get_current_record = function() { 
        var rec = this.selModel.getSelected();
        if (rec == undefined) rec = this.store.getAt(0);
        return rec
      };
    };
    this.columns  = this.apply_grid_config(this.gc_name,this.ls_grid_configs,this.ls_columns);
    

    this.on('resize', function(){
      //~ console.log("20120213 resize",arguments)
//      this.refresh();
      },this);
    this.on('viewready', function(){
      //~ console.log("20120213 resize",arguments);
      this.view_is_ready = true;
      this.refresh(); // removed 20130911
      },this);
    //    the 'afteredit' event doesn't exist any more. We use the 'edit' event instead.
    this.on('edit', this.on_afteredit); // 20120814
    this.on('beforeedit', this.on_beforeedit);
    this.on('beforeedit',function(e) { this.before_row_edit(e.grid.get_current_record())},this); //e is cell_editor
//    this.on('beforeedit',function(e) { this.before_row_edit(e.record)},this);
    if (this.cell_edit) {
        this.on('cellcontextmenu', Lino.cell_context_menu, this);
        //this.on({
        //    scope : this,
        //    cellcontextmenu : Lino.cell_context_menu,
        //});
    } else {
        this.on('rowcontextmenu', Lino.row_context_menu, this);
    }
      
    this.on('celldblclick' , this.on_celldblclick , this);
    this.on('cellkeydown' , this.on_cellkeydown , this);

    //~ this.on('contextmenu', Lino.grid_context_menu, this);
      // Lino.GridPanel.superclass.initComponent.call(this);
    this.callSuper();
    // this.callParent(); // 20160630
    
    delete this.cell_edit;


    
  },
  
  //~ onResize : function(){
      //~ console.log("20120206 GridPanel.onResize",arguments);
      //~ Lino.GridPanel.superclass.onResize.apply(this, arguments);
      //~ this.refresh();
  //~ },
  
  
  get_status : function(){
    var st = { base_params : this.get_base_params()};
    if (this.paging_toolbar) {
        st.current_page = this.paging_toolbar.current;
    }
    st.param_values = this.status_param_values;
    //~ console.log("20120213 GridPanel.get_status",st);
    return st;
  },
  
  /* 
  Lino.GridPanel.set_status() 
  */
  set_status : function(status, rp){
    this.requesting_panel = Ext.getCmp(rp);
    // console.log("20140527 GridPanel.set_status", status);
    this.clear_base_params();
    if (status == undefined) status = {base_params:{}};
    this.set_param_values(status.param_values);
    if (status.base_params) { 
      this.set_base_params(status.base_params);
    }
    if (status.show_params_panel != undefined) {
        if (this.toggle_params_panel_btn) {
            //~ this.toggle_params_panel_btn.toggle(status.show_params_panel=='true');
            this.toggle_params_panel_btn.toggle(status.show_params_panel);
        }
    }
    // this.store.loadPage(1);
    // 20160915 if (this.paging_toolbar) {
    //   //~ console.log("20120213 GridPanel.getTopToolbar().changePage",
    //       //~ status.current_page || 1);
    //   // this.paging_toolbar.changePage(status.current_page || 1);
    //   this.paging_toolbar.store.loadPage(status.current_page || 1);
    //   //  var toptoolbar = this.getDockedComponent('toptoolbar');
    //   //  toptoolbar.changePage(status.current_page || 1);
    // }
    //~ this.fireEvent('resize');
    //~ this.refresh.defer(100,this); 
    //~ this.onResize.defer(100,this); 
    //~ this.refresh(); 
    //~ this.doLayout(); 
    //~ this.onResize(); 
    //~ this.store.load();
  },
  
  refresh : function(unused) { 
    this.refresh_with_after();
  },
  /* GridPanel */
  refresh_with_after : function(after) { 
    // console.log('20140504 Lino.GridPanel.refresh '+ this.store.proxy.url);
    //~ var bp = { fmt:'json' }
    if (! this.view_is_ready) return;
    
    if (this.containing_panel) {
        //~ Ext.apply(p,this.master_panel.get_master_params());
        //~ Ext.apply(options.params,this.containing_panel.get_master_params());
        this.set_base_params(this.containing_panel.get_master_params());
        // 20130911
        if (!this.store.getProxy().extraParams.mk) {
            return;
        }
    }
    
    //~ console.log('20130911 Lino.GridPanel.refresh_with_after',this.containing_panel.get_master_params());
    
    var options = {};
    if (after) {
        options.callback = function(r,options,success) {if(success) after()}
    }
      
    //~ if (!this.rendered) {
        //~ console.log("20120206 GridPanel.refresh() must wait until rendered",options);
        //~ this.grid_panel.on('render',this.load.createDelegate(this,options))
        //~ return;
    //~ }
     // Ticket 802
    if (this.store.lastOptions != undefined){
        var params = {};
        params.limit = this.store.lastOptions.params.limit;
        params.start = this.store.lastOptions.params.start;
        options.params = params;
    }
    
    this.store.load(options);
  },
  
  /* The pageSize (number of grid rows to display) depends on the
   * height of the grid widget so that there is usually no vertical
   * scrollbar.

  Thanks to 
  - Christophe Badoit on http://www.sencha.com/forum/showthread.php?82647
  - http://www.sencha.com/forum/archive/index.php/t-37231.html

   20160628 In ExtJS 3 we had a trick to compute the exact height of a
   row, but that trick fails with ExtJS 6. We want to know the number
   of grid rows that will fit into the grid before actually requesting
   any data from the server.  The store is not yet loaded. We don't
   want the height of *every* data row. The trick is to create a
   volatile DOM element with the same CSS as a grid cell and with
   `<br/>` as content. And instead of displaying this element, we just
   note its height.

  */
  calculatePageSize : function(second_attempt) {
      //~ if (!this.rendered) { 
      if (!this.view_is_ready) { 
          //~ console.log('Cannot calculatePageSize() : not rendered');
          return false; }
      //~ if (!this.isVisible()) { 
      //~ console.log('calculatePageSize : not visible');
      //~ return false; }
      
      //~ console.log('getFrameHeight() is',this.getFrameHeight());
      //~ console.log('getView().scroller.getHeight() is',this.getView().scroller.getHeight());
      //~ console.log('mainBody.getHeight() is',this.getView().mainBody.getHeight());
      //~ console.log('getInnerHeight() is',this.getInnerHeight());
      //~ console.log('getHeight() is',this.getHeight());
      //~ console.log('el.getHeight() is',this.getEl().getHeight());
      //~ console.log('getGridEl().getHeight() is',this.getGridEl().getHeight());
      //~ console.log('getOuterSize().height is',this.getOuterSize().height);
      //~ console.log('getBox().height is',this.getBox().height);
      //~ console.log('getResizeEl.getHeight() is',this.getResizeEl().getHeight());
      //~ console.log('getLayoutTarget().getHeight() is',this.getLayoutTarget().getHeight());
      
      // var gb = this.body.query('.x-grid-body');
      // console.log("20160629a ", gb);  //.getHeight()


      //~ this.getView().syncScroll();
      //~ this.getView().initTemplates();


    // var height = this.getViewRegion().getSize().height;
    // var height = this.getHeight();
    // var height = this.getView().scroller.getHeight();  // 20160628
    //~ console.log('getView().scroller.getHeight() is',this.getView().scroller.getHeight());
    //~ console.log('getInnerHeight() - getFrameHeight() is',
      //~ this.getInnerHeight(), '-',
      //~ this.getFrameHeight(), '=',
      //~ this.getInnerHeight() - this.getFrameHeight());
    //~ var height = this.getView().mainBody.getHeight();
    //~ var height = this.getView().mainWrap.getHeight();
    //~ var height = this.getView().resizeMarker.getHeight();
    //~ this.syncSize();
    //~ var height = this.getInnerHeight() - this.getFrameHeight();
    //~ var height = this.getHeight() - this.getFrameHeight();
    // height -= Ext.getScrollBarWidth(); // leave room for a possible horizontal scrollbar...
    // height -= 10; // leave room for a possible horizontal scrollbar...
    //~ height -= this.getView().scrollOffset;

     var gb = this.body.selectNode('.x-grid-view', false);
     // console.log("20160629a ", gb.getHeight());
     var height = gb.getHeight();

     // var gb = this.body.selectNode('.x-column-header', false);
     // console.log("20160629b ", gb);

    //~ var rowHeight = 52; // experimental value
    // var rowHeight = this.row_height * 11;

     if (true) {
        // use hard-coded experimental value
        var rowHeight = 22 * this.row_height;  
        // TODO: change value in function of browser zoom level. Check
        // whether other themes have other values.
     } else {
         var row_content = 'X';
         for (var i = 0; i < this.row_height;i++) {
             row_content += '<br>';
         }
         if (false) {
             var Element = Ext.Element;
             var gv = this.view;
             var rowTemplate = gv.rowTpl;
             var cellTemplate = gv.cellTpl;
             // var tstyle  = 'width:' + gv.getGridInnerWidth() + 'px;';
             //   var tstyle  = 'width:' + gv.getWidth() + 'px;';
             var tstyle  = 'width: 20px;';
             
             // var fakeBody = new Element(document.createElement('div'));
             // fakeBody = fakeBody.child('tr.x-grid-row');
             // var fakeBody = new Element(Element.fly(gv.body).child('x-grid-item-container'));
             //   .child('div.x-grid-view')
             // var fakeBody = Ext.get(Element.fly(this.body));
             // console.log("20160615", this.fake_row_content);
             var cells = cellTemplate.apply({
                 value: row_content,
                 itemClasses: [],
                 column: { cellWidth: 'foo',
                           getItemId : function() {} }
             });
             var markup = rowTemplate.apply({
                 view: { id: 'bar' },
                 record: {internalId: 'baz'},
                 itemClasses: [],
                 tstyle: tstyle,
                 cols  : 1,
                 cells : cells,
                 alt   : ''
             });
             markup = gv.tpl.apply({rows: markup});
             console.log("20160629 ", 
                         gv.rowTpl.html, gv.cellTpl.html, markup);
             // fakeBody.dom.innerHTML = markup;
             // var row = fakeBody.dom.childNodes[0];
             var rowHeight = fakeBody.getHeight();
         }
         if (false) {
             var el = new Ext.Element(document.createElement('div'));
             el.dom.innerHTML = row_content;
             var rowHeight = el.getHeight();
             
             // var el = document.createElement('div')
             // var t = document.createTextNode(row_content);
             // el.appendChild(t);
             // var rowHeight = el.clientHeight;
             
             // var row = this.view.getNode(0);
             // var rowHeight = Ext.get(row).getHeight();
         }
     }
    
     //~ console.log('rowHeight is ',rowHeight,this,caller);
     if (height < rowHeight) return false;
      var ps = Math.floor(height / rowHeight);
      // console.log('20160628 calculatePageSize():',height,'/',rowHeight,'->',ps);
    ps -= 1; // leave room for a possible phantom row
    //~ return (ps > 1 ? ps : false);
    if (ps > 1) return ps;
    //~ console.log('calculatePageSize() found less than 1 row:',height,'/',rowHeight,'->',ps);
    //~ foo.bar = baz; // 20120213
    return 5; // preview_limit
    //~ if (second_attempt) {
        //~ console.log('calculatePageSize() abandons after second attempt:',
          //~ height,'/',rowHeight,'->',ps);
      //~ return 5;
    //~ }
    //~ return this.calculatePageSize.defer(500,this,[true]);
  },

    on_celldblclick : function(view, record, item, index, e, eOpts ){


      if (this.ls_detail_handler) {
          //~ Lino.notify('show detail');
          if (index.crudState != "C") {Lino.show_detail(this);}
          else if (this.ls_insert_handler) {Lino.show_insert(this);}
          else { this.editingPlugin.startEditByPosition({row: eOpts,
                                                         column: item})}
          return false;
      }
      else {
          if (index.crudState == "C"){ //end row
            if (this.ls_insert_handler){ Lino.show_insert(this);
                                         return false;}
            }
          this.editingPlugin.startEditByPosition({row: eOpts,
                                                         column: item})
          return false;

      }
    }

    ,on_cellkeydown : function ( view , td , cellIndex , record , tr , rowIndex , e , eOpts ) {
        this.handleKeyDown(e,cellIndex,rowIndex,view,record,tr,td);

    },
    handleKeyDown : function(e,c, r,g,record,tr,td){
        /* removed because F2 wouldn't pass
        if(!e.isNavKeyPress()){
            return;
        }
        */
//        console.log('handleKeyDown',e)
        var k = e.getKey(),
            // g = this.grid,
            s = this.selection,
            sm = this,
            walk = function(step){
                return g.walkCells(
                    e.position,
                    step
                );
            },
            cell, newCell, r, c, ae;
        // Are we editing a cell ?
        if (this.editingPlugin != undefined && this.editingPlugin.editing ){
            return;
        }

        switch(k){
            case e.ESC:
                this.get_containing_window().hide();
                e.stopEvent();
                break;
            case e.PAGE_UP:
            case e.INSERT:
                if (e.ctrlKey){
                    Lino.copyToClipboard(e.target.innerText);
                }
                break;
            case e.C:
                if (e.ctrlKey){
                    Lino.copyToClipboard(e.target.innerText);
                }
                break;
            case e.PAGE_DOWN:
                break;
            default:
                // e.stopEvent(); // removed because Browser keys like Alt-Home, Ctrl-R wouldn't work
                break;
        }

        if(!s){
            newCell = walk('up');
            // if(cell){
            //     this.select(cell[0], cell[1]);
            // }
            // return;
        }

        // cell = s.cell;
        // r = cell[0];
        // c = cell[1];

        switch(k){
            case e.TAB:
                if(e.shiftKey){
                    newCell = walk('left');
                }else{
                    newCell = walk('right');
                }
                break;
            case e.HOME:
                if (! (g.isEditor && g.editing)) {
                  if (!e.hasModifier()){
                      newCell = [r, 0];
                      //~ console.log('home',newCell);
                      break;
                  }else if(e.ctrlKey){
                      var t = g.getTopToolbar();
                      var activePage = Math.ceil((t.cursor + t.pageSize) / t.pageSize);
                      if (activePage > 1) {
                          e.stopEvent();
                          t.moveFirst();
                          return;
                      }
                      newCell = [0, c];
                      break;
                  }
                }
            case e.END:
                if (! (g.isEditor && g.editing)) {
                  c = g.colModel.getColumnCount()-1;
                  if (!e.hasModifier()) {
                      newCell = [r, c];
                      //~ console.log('end',newCell);
                      break;
                  }else if(e.ctrlKey){
                      var t = g.getTopToolbar();
                      var d = t.getPageData();
                      if (d.activePage < d.pages) {
                          e.stopEvent();
                          var self = this;
                          t.on('change',function(tb,pageData) {
                              var r = g.store.getCount()-2;
                              self.select(r, c);
                              //~ console.log('change',r,c);
                          },this,{single:true});
                          t.moveLast();
                          return;
                      } else {
                          newCell = [g.store.getCount()-1, c];
                          //~ console.log('ctrl-end',newCell);
                          break;
                      }
                  }
                }
            case e.DOWN:
                newCell = walk('down');
                break;
            case e.UP:
                newCell = walk('up');
                break;
            case e.RIGHT:
                newCell = walk('right');
                break;
            case e.LEFT:
                newCell = walk('left');
                break;
            case e.F2:
                if (!e.hasModifier()) {
                    // https://gist.github.com/zerkms/2572486 to add a key trigger.
                    if (!g.editingPlugin.editing) {
                        var columnId = g.getSelectionModel().getCurrentPosition().column,
                            // record = g.getSelectionModel().selection.record,
                            record = g.getSelectionModel().selected.items[0],
                            header = g.getHeaderAtIndex(columnId),
                            view = g,
                            cell = td,
                            cellIndex = c,
                            record = record,
                            row = tr,
                            recordIndex = r,
                            mousedownEvent = e;


                        g.getSelectionModel().navigationModel.onCellMouseDown(view, cell, cellIndex, record, row, recordIndex, mousedownEvent);

                        // me.startEdit(record, header);
                        // g.editingPlugin.startEditByPosition(g.getSelectionModel().getCurrentPosition());
                        // editor.startEdit(e.position.cellElement);
                        e.stopEvent();
                        return;
                    }
                    break;
                }
            case e.INSERT:
                if (!e.hasModifier()) {
                    if (g.ls_insert_handler && !g.editing) {
                        e.stopEvent();
                        Lino.show_insert(g);
                        return;
                    }
                    break;
                }
            // case e.DELETE:
            //     if (!e.hasModifier()) {
            //         if (!g.editing) {
            //             e.stopEvent();
            //             Lino.delete_selected(g);
            //             return;
            //         }
            //         break;
            //     }

            case e.ENTER:
                e.stopEvent();
                g.onCellDblClick(r,c);
                break;

            default:
                this.handle_key_event(e);

        }


        if(newCell){
          e.stopEvent();
          r = newCell.rowIdx;
          c = newCell.colIdx;
          // this.select(r, c);
            g.getSelectionModel().setPosition({
                          row: r,
                          column: c
                      }, true);
            g.getSelectionModel().select({
                          row: r,
                          column: c
                      });
            // g.getSelectionModel().refresh();
            e.stopEvent();
            // this.selModel.select(r,c);
          if(g.isEditor && g.editing){
            ae = g.activeEditor;
            if(ae && ae.field.triggerBlur){
                ae.field.triggerBlur();
            }
            g.startEditing(r, c);
          }
        //~ } else if (g.isEditor && !g.editing && e.charCode) {
        //~ // } else if (!e.isSpecialKey() && g.isEditor && !g.editing) {
            //~ g.set_start_value(String.fromCharCode(e.charCode));
            //~ // g.set_start_value(String.fromCharCode(k));
            //~ // g.set_start_value(e.charCode);
            //~ g.startEditing(r, c);
            //~ // e.stopEvent();
            //~ return;
        // } else {
          // console.log('20120513',e,g);
        }

    }
  ,get_base_params : function() {  /* Lino.GridPanel */
    // var p = Ext.apply({}, this.store.baseParams);
    var p = Ext.apply({}, this.store.getProxy().extraParams);
    Lino.insert_subst_user(p);
    return p;
  },
  set_base_params : function(p) {
    // console.log('20130911 GridPanel.set_base_params',p)
    // for (k in p) this.store.setBaseParam(k,p[k]);
    for (k in p) this.store.getProxy().setExtraParam(k,p[k]);
    //~ this.store.baseParams = p;
    if (this.quick_search_field)
      this.quick_search_field.setValue(p.query || "");
    //~ if (p.param_values) 
        //~ this.set_param_values(p.param_values);  
  },
  clear_base_params : function() {
      // this.store.baseParams = {};
      // Lino.insert_subst_user(this.store.baseParams);
      this.store.getProxy().extraParams = {};
      Lino.insert_subst_user(this.store.getProxy().extraParams);
  },
  set_base_param : function(k,v) {
      // HKC
      // this.store.setBaseParam(k,v);
      this.store.getProxy().setExtraParam(k, v);
      // var options = {};
      // this.store.load(options);
  },
  
  //~ get_permalink_params : function() {
    //~ var p = {};
    //~ return p;
  //~ },
  
  before_row_edit : function(record) {},
    
  //~ search_keypress : function(){
    //~ console.log("2012124 search_keypress",arguments);
  //~ },
  search_validate : function(value) {
    if (value == this.quick_search_text) return true;
    this.is_searching = true;
    //~ console.log('search_validate',value)
    this.quick_search_text = value;
    this.set_base_param('query',value); 
    //~ this.getTopToolbar().changePage(1);
    // 20160915 this.paging_toolbar.moveFirst();
    this.refresh();
    return true;
  },
  
  search_change : function(field,oldValue,newValue) {
    //~ console.log('search_change',field.getValue(),oldValue,newValue)
    this.set_base_param('query',field.getValue()); 
    // 20160915 this.paging_toolbar.moveFirst();
    this.refresh();
  },
  
  apply_grid_config : function(index,grid_configs,rpt_columns) {
    //~ var rpt_columns = this.ls_columns;
    var gc = grid_configs[index];    
    //~ console.log('apply_grid_config() 20100812',name,gc);
    this.gc_name = index;
    if (gc == undefined) {
      return rpt_columns;
      //~ config.columns = config.ls_columns;
      //~ return;
    } 
    //~ delete config.ls_filters
    
    //~ console.log(20100805,config.ls_columns);
    var columns = Array(gc.columns.length);
    for (var j = 0; j < rpt_columns.length;j++) {
      var col = rpt_columns[j];
      for (var i = 0; i < gc.columns.length; i++) {
        if (col.dataIndex == gc.ci[i]) {
          col.width = gc.cw[i];
          col.hidden = gc.ch[i];
          columns[i] = col;
          break;
        }
      }
    }
    
    //~ var columns = Array(rpt_columns.length);
    //~ for (var i = 0; i < rpt_columns.length; i++) {
      //~ columns[i] = rpt_columns[gc.columns[i]];
      //~ columns[i].width = gc.widths[i];
    //~ }
    
    //~ if (gc.hidden_cols) {
      //~ for (var i = 0; i < gc.hidden_cols.length; i++) {
        //~ var hc = gc.hidden_cols[i];
        //~ for (var j = 0; j < columns.length;j++) {
          //~ var col = columns[j];
          //~ if (col.dataIndex == hc) {
            //~ col.hidden = true;
            //~ break
          //~ }
        //~ }
      //~ }
    //~ }
    if (gc.filters) {
      //~ console.log(20100811,'config.ls_filters',config.ls_filters);
      //~ console.log(20100811,'config.ls_grid_config.filters',config.ls_grid_config.filters);
      for (var i = 0; i < gc.filters.length; i++) {
        var fv = gc.filters[i];
        for (var j = 0; j < columns.length;j++) {
          var col = columns[j];
          if (col.dataIndex == fv.field) {
            //~ console.log(20100811, f,' == ',fv);
            if (fv.type == 'string') {
              col.filter.value = fv.value;
              //~ if (fv.comparison !== undefined) f.comparison = fv.comparison;
            } else {
              //~ console.log(20100811, fv);
              col.filter.value = {};
              col.filter.value[fv.comparison] = fv.value;
            }
            break;
          }
        };
      }
    }
    
    return columns;
    //~ config.columns = cols;
    //~ delete config.ls_columns
  },
  
  get_current_grid_config : function () {
    var cm = this.getColumns();
    // var cm = this.getView().getHeaderCt().getGridColumns();
    var widths = Array(cm.length);
    var hiddens = Array(cm.length);
    //~ var hiddens = Array(cm.config.length);
    var columns = Array(cm.length);
    //~ var columns = Array(cm.config.length);
    //~ var hidden_cols = [];
    //~ var filters = this.filters.getFilterValues();
    // var p = this.filters.buildQuery(this.filters.getFilterData())
    //   var p = this.filters.store.filters.filterBy(this.filters.store.filters);
      var p = {};
      // var p = this.store.proxy.encodeFilters(this.store.getFilters().items);
    for (var i = 0; i < cm.length; i++) {

      var col = cm[i];
          columns[i] = col.dataIndex;
          //~ hiddens[i] = col.hidden;
          widths[i] = col.cellWidth;
          hiddens[i] = col.hidden;

      //~ if (col.hidden) hidden_cols.push(col.dataIndex);
    }
    //~ p['hidden_cols'] = hidden_cols;
    p.cw = widths;
    p.ch = hiddens;
    p.ci = columns;
    //~ p['widths'] = widths;
    //~ p['hiddens'] = hiddens;
    //~ p['columns'] = columns;
    p['name'] = this.gc_name;
    //~ var gc = this.ls_grid_configs[this.gc_name];
    //~ if (gc !== undefined) 
        //~ p['label'] = gc.label
    //~ console.log('20100810 save_grid_config',p);
    return p;
  },
  
  on_beforeedit : function(editor, context, eOpts) {
    // console.log('20130128 GridPanel.on_beforeedit()',e,e.record.data.disable_editing);
      var record = context.record;
    if(this.disable_editing | record.data.disable_editing) {
      context.cancel = true;
      Lino.notify("This record is disabled");
      return;
    }
    if(record.data.disabled_fields && record.data.disabled_fields[context.field]) {
      context.cancel = true;
      Lino.notify("This field is disabled");
      return;
    }
    //~ if (e.record.data.disabled_fields) {
      //~ for (i in e.record.data.disabled_fields) {
        //~ if(e.record.data.disabled_fields[i] == e.field) {
          //~ e.cancel = true;
          //~ Lino.notify(String.format('Field "{0}" is disabled for this record',e.field));
          //~ return
        //~ }
      //~ }
    //~ }
  },
  save_grid_data : function() {
      //~ console.log("20120814 save_grid_data");
      this.getStore().commitChanges();
  },
  on_afteredit : function(editor, context, eOpts) {
    /*
    e.grid - The grid that fired the event
    e.record - The record being edited
    e.field - The field name being edited
    e.value - The value being set
    e.originalValue - The original value for the field, before the edit.
    e.row - The grid row index
    e.column - The grid column index
    */
    e = context;
    var p = {};
    // console.log('20140403 afteredit: ',e.record);
    //~ console.log('20101130 value: ',e.value);
    //~ var p = e.record.getChanges();
    //~ console.log('20101130 getChanges: ',e.record.getChanges());
    //~ this.before_row_edit(e.record);
    if (e.value === e.originalValue){return;}
    for(k in e.record.getChanges()) {
        var v = e.record.get(k);
    //~ for(k in e.record.modified) {
        //~ console.log('20101130',k,'=',v);
        //~ var cm = e.grid.getColumnModel();
        //~ var di = cm.getDataIndex(k);
        // var f = e.record.fields.get(k);
        var f = null;
        for(_f in e.record.fields) {
            if (e.record.fields[_f].name == k){
                f = e.record.fields[_f];
            }
        }
            // var f = e.record.fields[k];
        //~ console.log('20101130 f = ',f);
        //~ var v = e.record.get(di);
        if (f.__proto__.$className == 'Ext.data.field.Field') {
        // if (f.type.type == 'date') {
        //     p[k] = Ext.util.Format.date(v, f.dateFormat);
            if (typeof v == "string"){
                p[k] = v;
            }
            else {
                p[k] = Ext.util.Format.date(v, 'H:i');
            }
        }else if (f.__proto__.$className == 'Ext.data.field.Date'){
            p[k] = Ext.util.Format.date(v, f.dateFormat);
        }else{
            p[k] = v;
            var v = e.record.get(k+'Hidden');
            if (v !== undefined) {
              p[k+'Hidden'] = v;
            }
        }
    }
    // add value used by ForeignKeyStoreField CHOICES_HIDDEN_SUFFIX
    // not sure whether this is still needed:
    p[e.field+'Hidden'] = e.value;
    //~ p.su = Lino.subst_user;
    Lino.insert_subst_user(p);
    // this one is needed so that this field can serve as choice context:
    e.record.data[e.field+'Hidden'] = e.value;
    // p[pk] = e.record.data[pk];
    // console.log("grid_afteredit:",e.field,'=',e.value);
    Ext.apply(p, this.get_base_params()); // needed for POST, ignored for PUT
    //~ Ext.apply(p,this.containing_window.config.base_params);
    //~ 20121109 p['$constants.URL_PARAM_ACTION_NAME'] = 'grid';
    var self = this;
    var req = {
        params:p,
        waitMsg: 'Saving your data...',
        success: Lino.action_handler( this, function(result) {
          // console.log("20140728 afteredit.success got ", result);
          //~ if (result.data_record) {
          if (result.refresh_all) {
              var cw = self.get_containing_window();
              if (cw) {
                  cw.main_item.refresh();
              }
              else console.log("20120123 cannot refresh_all",self);
          } else if (result.rows) {
              //~ self.getStore().loadData(result,true);
              // var r = self.getStore().reader.readRecords(result);
              var r = self.getStore().proxy.reader.readRecords(result);
              // if (e.record.phantom) {
                  // console.log("20140728 gonna call Store.insert()", self.getStore(), e.row, r.records);
                  // self.getStore().insert(e.row, r.records);
              // }else{
                  // console.log("20140728 afteredit.success doUpdate", r.records[0]);
                  // self.getStore().doUpdate(r.records[0]);
              // }
              // self.getStore().rejectChanges();
              /* 
              get rid of the red triangles without saving the record again
              */
              //~ self.getStore().commitChanges(); // get rid of the red triangles
              // self.getStore().commitChanges(); // get rid of the red triangles
//              self.getStore().reload();        // reload our datastore.
              // Thanks to http://vadimpopa.com/reload-a-single-record-and-refresh-its-extjs-grid-row/
              var store = self.getStore();
              var recToUpdate = store.getById(r.records[0].id);
//              var recToUpdate = store.getById(this.e.record.id);  // #2041 Editor might change before ajax return
              if (recToUpdate != null){
                  recToUpdate.set(r.records[0].getData());
                  recToUpdate.commit(false);
                  self.getView().refreshNode(store.indexOfId(e.record.id));
                  if (e.rowIdx == self.getSelectionModel().selection.rowIdx
                  &&  e.colIdx == self.getSelectionModel().selection.colIdx){  // If user closed editor via [Enter] rather then click away,
//                  self.getView.focusRow(row);
                    // Focus on that cell only if it's already selected, not if user has clicked away.
                    self.getView().getNavigationModel().setPosition(e.rowIdx, e.colIdx);
                    }
              }
              else{
              self.items.items[0].grid.refresh_with_after()
              }
//              store.reload();
//
//              // self.getStore().sync(); // get rid of the red triangles
//              // self.getStore().reload();        // reload our datastore.

//              e.record.set(r.records[0].getData());
//              self.getView().refreshNode(self.getStore().indexOfId(e.record.id));
//              e.record.commit();
          } else {
              self.getStore().sync(); // get rid of the red triangles
//              self.getStore().commitChanges(); // get rid of the red triangles
              self.getStore().reload();        // reload our datastore.
          }
          }),
        scope: this,
        failure: Lino.ajax_error_handler(this)
    };
    // The 'e.record.phantom' flag has already been removed because
    // for ExtJS is is no longer a phantom record.
    if (typeof(e.record.id) == "string" && e.record.id.starsWith("extModel")){
      req.params.an = 'grid_post'; // CreateRow.action_name
      Ext.apply(req,{
        method: 'POST',
        url: '/api' + this.ls_url
      });
    } else {
      req.params.an = 'grid_put'; // SaveRow.action_name
      Ext.apply(req,{
        method: 'PUT',
        url: '/api' + this.ls_url + '/' + e.record.id
      });
    }
    //~ console.log('20110406 on_afteredit',req);
    // this.loadMask.show(); // 20120211
      this.loadMask.show();
    Ext.Ajax.request(req);
      this.loadMask.hide();
  },

  unused_afterRender : function() {
    //Lino.GridPanel.superclass.afterRender.call(this);
      this.callSuper();
    // this.getView().mainBody.focus();
    // console.log(20100114,this.getView().getRows());
    // if (this.getView().getRows().length > 0) {
    //  this.getView().focusRow(1);
    // }
    //~ this.my_load_mask = new Ext.LoadMask(this.getEl(), {
        //~ msg:'$_("Please wait...")',
        //~ store:this.store});
    if (this.paging_toolbar) {
        var tbar = this.paging_toolbar;
        // //  Edited by HKC
        // var tbar = this.getDockedComponent('toptoolbar');

        // tbar.on('change',function() {this.getView().focusRow(1);},this);
        // tbar.on('change',function() {this.getSelectionModel().selectFirstRow();this.getView().mainBody.focus();},this);
        // tbar.on('change',function() {this.getView().mainBody.focus();},this);
        // tbar.on('change',function() {this.getView().focusRow(1);},this);
        this.nav = new Ext.KeyNav(this.getEl(),{
          pageUp: function() {tbar.movePrevious(); },
          pageDown: function() {tbar.moveNext(); },
          home: function() {tbar.moveFirst(); },
          end: function() {tbar.moveLast(); },
          scope: this
        });
    }

  },
  after_delete : function() {
    //~ console.log('Lino.GridPanel.after_delete');
    this.refresh();
  },
  add_row_listener : function(fn,scope) {
    this.getSelectionModel().addListener('rowselect',fn,scope);
  },
  postEditValue : function(value, originalValue, r, field){
    //value = Lino.GridPanel.superclass.postEditValue.call(this,value,originalValue,r,field);
      this.callSuper(value,originalValue, r, field);
    //~ console.log('GridPanel.postEdit()',value, originalValue, r, field);
    return value;
  },
  
  set_start_value : function(v) {
      this.start_value = v;
  },
  preEditValue : function(r, field){
      if (this.start_value) {
        var v = this.start_value;
        delete this.start_value;
        this.activeEditor.selectOnFocus = false;
        return v;
      }
      var value = r.data[field];
      return this.autoEncode && Ext.isString(value) ? Ext.util.Format.htmlDecode(value) : value;
  },
  
  on_master_changed : function() {
    //~ if (! this.enabled) return;
    //~ cmp = this;
    //~ console.log('20130911 Lino.GridPanel.on_master_changed()',this.title,this.rendered);
    if (! this.rendered) return; // 20120213
    var todo = function() {
      if (this.disabled) return;
      //~ if (this.disabled) return;
      //~ if (this.enabled) {
          //~ var src = caller.config.url_data + "/" + record.id + ".jpg"
          //~ console.log(20111125, this.containing_window);
          //~ for (k in p) this.getStore().setBaseParam(k,p[k]);
          //~ console.log('Lino.GridPanel.on_master_changed()',this.title,p);
          this.refresh();
          //~ this.set_base_params(this.master_panel.get_master_params());
          //~ this.getStore().load(); 
      //~ }
    };
    //  HKC
    //Lino.do_when_visible(this,todo.createDelegate(this));
      Lino.do_when_visible(this,todo.bind(this));
  },
  load_record_id : function(record_id,after) {
      Lino.run_detail_handler(this,record_id)
  }
  
});
  
Ext.define('Lino.selection.CellModel', {
    override : 'Ext.selection.CellModel',

    onSelectChange: function(record, isSelected, suppressEvent, commitFn) {
        var me = this,
            pos, eventName, view;

        if (isSelected) {
            pos = me.nextSelection;
            eventName = 'select';
        } else {
            // Ticket #1962 Seems that there is some half-finished deselection when opening a detail view. Causing this.selection to be nul, and thus has no pos.
            // I tested and it seems that this.view === pos.view when extjs is working correctly. This might have be changed on other selection models. if errors arise.
            // It seems that the events later in this function are fired, with pos.row
            pos = me.selection === null ? {view : this.view} : me.selection;
            eventName = 'deselect';

        }

        // CellModel may be shared between two sides of a Lockable.
        // The position must include a reference to the view in which the selection is current.
        // Ensure we use the view specified by the position.



        view = pos.view || me.primaryView;

        if ((suppressEvent || me.fireEvent('before' + eventName, me, record, pos.rowIdx, pos.colIdx)) !== false &&
                commitFn() !== false) {

            if (isSelected) {
                view.onCellSelect(pos);
            } else {
                view.onCellDeselect(pos);
                delete me.selection;
            }

            if (!suppressEvent) {
                me.fireEvent(eventName, me, record, pos.rowIdx, pos.colIdx);
            }
        }
    },
    })
//~ Lino.MainPanelMixin = {
  //~ tbar_items : function() {
      //~ return ;
  //~ }
//~ };

//~ Ext.override(Lino.GridPanel,Lino.MainPanelMixin);
//~ Ext.override(Lino.FormPanel,Lino.MainPanelMixin);

//~ Lino.grid_context_menu = function(e) {
  //~ console.log('contextmenu',arguments);
//~ }

Lino.row_context_menu = function(grid,row,col,e) {
  console.log('20130927 rowcontextmenu',grid,row,col,e,grid.store.getProxy().getReader().rawData.rows[row]);
}

//Lino.cell_context_menu = function(_this, _grid,row,col,_e,a, e) {
Lino.cell_context_menu = function(view, td, cellIndex, record, tr, rowIndex, e, eOpts){
  //~ console.log('20120531 cellcontextmenu',grid,row,col,e,grid.store.reader.arrayData.rows[row]);
  //  HKC
  //  e.stopPropagation();
    grid = this;
    e.stopEvent();
    //e.cancelBubble = true;
  //~ grid.getView().focusCell(row,col);
  //  HKC
  //grid.getSelectionModel().select(row,col);
  grid.getSelectionModel().select({
                row: rowIndex,
                column: cellIndex
            });
    //this.getSelectionModel().select(row,col);
  //~ console.log(grid.store.getAt(row));
  //~ grid.getView().focusRow(row);
  //~ return;
  //  HKC
  if(!grid.cmenu.el){
      //grid.cmenu.el.render();
      grid.cmenu.render();
      //grid.cmenu.showAt(e.getXY());
  }
  //~ if(e.record.data.disabled_fields) {
  
//  var da = this.store.getProxy().getReader().rawData.rows[rowIndex][grid.disabled_actions_index];
// seems that the proxy reader data can sometimes only include the last 10 records collected by infinite scroll
  var da = grid.getSelectionModel().getSelected().items[0].data.disabled_fields;
  if (da) {
      this.cmenu.cascade(function(item){ 
        //~ console.log(20120531, item.itemId, da[item.itemId]);
        if (da[item.itemId]) item.disable(); else item.enable();
      });
  };
  
  var xy = e.getXY();
  //xy[1] -= grid.cmenu.el.getHeight();
  grid.cmenu.showAt(xy);
};


Lino.chooser_handler = function(combo,name) {
  return function(cmp, newValue, oldValue) {
    //~ console.log('Lino.chooser_handler()',cmp,oldValue,newValue);
    combo.setContextValue(name, newValue);
  }
};


// Edited by HKC
//Lino.ComboBox = Ext.extend(Ext.form.ComboBox,{
Ext.define('Lino.ComboBox', {
    extend : 'Ext.form.ComboBox',
  forceSelection: "yes but select on tab",
  // forceSelection: true,
  triggerAction: 'all',
  minListWidth:280, // 20131022
//  width:235,

  autoSelect: false,
  selectOnFocus: false, // select any existing text in the field immediately on focus.
  submitValue: true,
  displayField: 'text', // 'text', 
  valueField: 'value', // 'value',
  changed : false,
  queryMode : 'remote',
  hiddenvalue_tosubmit: "",
  hiddenvalue_id: null,
  //~ initComponent : Ext.form.ComboBox.prototype.initComponent.createSequence(function() {
  initComponent : function(){
      this.contextParams = {};
      //~ Ext.form.ComboBox.initComponent(this);
      // Lino.ComboBox.superclass.initComponent.call(this);
      this.callSuper(arguments);
      // this.callParent();  // 20160630
  },

    findRecordByValue: function(value) {
        var result = this.store.byText.get(value),
            ret = false;
        // If there are duplicate keys, tested behaviour is to return the *first* match.
        if (result) {
            ret = result[0] || result;
        }
        return ret;
    },

    updateValue: function() {
        // modified copy of the original ComboBox.updateValue defined
        // in `ext-all-debug.js`. We additionally store the selected
        // value to `hiddenvalue_tosubmit` and set the `changed`
        // flag. Note that this hack breaks when multiple choices are
        // selected
        var me = this,
            selectedRecords = me.valueCollection.getRange(),
            len = selectedRecords.length,
            valueArray = [],
            displayTplData = me.displayTplData || (me.displayTplData = []),
            inputEl = me.inputEl,
            i, record;
        // Loop through values, matching each from the Store, and collecting matched records
//        console.log('20120203 updateValue', this.name,);
        displayTplData.length = 0;
        if (len == 0){
            me.hiddenvalue_tosubmit = "Mynull";
            me.changed = true;
        }
        for (i = 0; i < len; i++) {
            record = selectedRecords[i];
//            console.log('20120203', this.name,'.updateValue() this=', this, 'record=',record);
            displayTplData.push(me.getRecordDisplayData(record));
            // There might be the bogus "value not found" record if forceSelect was set. Do not include this in the value.
            if (record !== me.valueNotFoundRecord && !record.phantom) {
                // valueArray.push(record.get(me.valueField)); original code
                var selector = me.valueField;
                if (me instanceof Lino.RemoteComboFieldElement){
                    selector = 'value';
                }
                valueArray.push(record.get(selector));
                me.hiddenvalue_tosubmit = record.get(selector);
                me.hiddenvalue_id = record.get(selector);
                me.changed = true;
                // console.log("20160504 field :",me.name," -> val",record.get(selector));
            }
        }
        // Set the value of this field. If we are multiselecting, then that is an array.
        me.setHiddenValue(valueArray);
        me.value = me.multiSelect ? valueArray : valueArray[0];
        if (!Ext.isDefined(me.value)) {
            me.value = undefined;
        }
        me.displayTplData = displayTplData;
        //store for getDisplayValue method
        if (inputEl && me.emptyText && !Ext.isEmpty(me.value)) {
            inputEl.removeCls(me.emptyCls);
        }
        // Calculate raw value from the collection of Model data
        me.setRawValue(me.getDisplayValue());
        me.checkChange();
        // me.applyEmptyText();  Remove with Extjs 6.2.0
    },
    setValue : function(v,record_data){
      /*
      Based on feature request developed in http://extjs.net/forum/showthread.php?t=75751
      */
      /* `record_data` is used to get the text corresponding to this value */
      //~ if(this.name == 'city')
//      console.log('20120203', this.name,'.setValue(', v ,') this=', this,'record_data=',record_data);
      if (!(this.valueField && Ext.isDefined(record_data))){
//        console.log("Calling Parrent");
             return this.callSuper(arguments);
             //this.callParent(arguments);  // 20160701
        }
//      console.log("Calling our Thing");


        if (v !== null && v.crudState){
            var text = v.get(this.displayField);
        }
        else {
            var text = v;
        }
      if(this.valueField){
        if(v == null || v == '') {
            //~ if (this.name == 'birth_country')
                //~ console.log(this.name,'.setValue',v,'no lookup needed, value is empty');
            //~ v = undefined;
            v = '';
            //~ text = '';
        } else if (Ext.isDefined(record_data)) {
          text = record_data[this.name];
            this.hiddenvalue_id = record_data[this.hiddenName];
        } else {
          // if(this.mode == 'remote' && !Ext.isDefined(this.store.totalLength)){
          if(this.queryMode == 'remote' && ( this.lastQuery === null || (!this.store.data.length))){
              //~ if (this.name == 'birth_country') console.log(this.name,'.setValue',v,'store not yet loaded');
              // HKC
              //this.store.on('load', this.setValue.createDelegate(this, arguments), null, {single: true});
              this.store.on('load', this.setValue.bind(this,[arguments]), null, {single: true});
              if(this.store.lastOptions === null || this.lastQuery === null){
                  var params;
                  if(this.valueParam){
                      params = {};
                      params[this.valueParam] = v;
                  }else{
                      var q = this.allQuery;
                      this.lastQuery = q;
                      // this.store.setBaseParam(this.queryParam, q);
                      this.store.getProxy().setExtraParam(this.queryParam, q);
                      params = this.getParams(q);
                  }
                  //~ if (this.name == 'birth_country')
                    //~ console.log(this.name,'.setValue',v,' : call load() with params ',params);
                  this.store.load({params: params});
              //~ }else{
                  //~ if (this.name == 'birth_country')
                    //~ console.log(this.name,'.setValue',v,' : but store is loading',this.store.lastOptions);
              }
              return;
          //~ }else{
              //~ if (this.name == 'birth_country')
                //~ console.log(this.name,'.setValue',v,' : store is loaded, lastQuery is "',this.lastQuery,'"');
          }
          var r = this.findRecord(this.valueField, v);
//          console.log("FR- r=",r," this.valueField=",this.valueField," v=(",v,")" );

          if(r){
              text = r.data[this.displayField];
          }else if(this.valueNotFoundText !== undefined && this.valueNotFoundText !== null ){
              text = this.valueNotFoundText;
          }
        }
      }
      this.lastSelectionText = text;
      if(this.hiddenField){
          //~ this.hiddenField.originalValue = v;
          this.hiddenField.value = v;
      }
      this.value = v; // needed for grid.afteredit
      Ext.form.ComboBox.superclass.setValue.call(this, text);
      // this.callSuper(text);
      // this.callParent(arguments);  // 20160701
//      console.log("SetValue end this=",this);
  },
  
  getParams : function(q){
    // p = Ext.form.ComboBox.superclass.getParams.call(this, q);
    // causes "Ext.form.ComboBox.superclass.getParams is undefined"
    // var p = {};
    var p = {},
            param = this.queryParam;
    if (param) {
        p[param] = q;
    }
    if(this.pageSize){
        p['limit'] = this.pageSize;
        //p['start'] = 0;
        // This is being run on every query, causing start search value to always be 0, seems that it sets it correctly later if not set.
        // ticket #1879
        // p['start'] = (pageNum - 1) * this.pageSize;
}
    // now my code:
    if(this.contextParams) Ext.apply(p, this.contextParams);
    return p;
  },
  setContextValue : function(name,value) {
    //~ console.log('setContextValue',this,this.name,':',name,'=',value);
     if (this.contextParams === undefined) {
         this.contextParams = Array(); // this.contextParams.length);
     }
    if (this.contextParams[name] != value) {
      //~ console.log('setContextValue 1',this.contextParams);
      this.contextParams[name] = value;
      this.lastQuery = null;
      //~ console.log('setContextValue 2',this.contextParams);
    }
  }
});

Ext.define('Lino.ChoicesFieldElement',{
    extend : 'Lino.ComboBox',
    mode: 'local',
});
Ext.define('Lino.SimpleRemoteComboStore',{
  extend:'Ext.data.JsonStore',
//Lino.SimpleRemoteComboStore = Ext.extend(Ext.data.JsonStore,{
  // forceSelection: true,  20140206 why was this here?
  constructor: function(config){
      Lino.SimpleRemoteComboStore.superclass.constructor.call(this, Ext.apply(config, {
          totalProperty: 'count',
          root: 'rows',
          id: 'value', // 'value'
          fields: ['value' ],
          listeners: { exception: Lino.on_store_exception }
      }));
      //this.callSuper(Ext.apply(config, {
      //    totalProperty: 'count',
      //    root: 'rows',
      //    id: 'value', // 'value'
      //    fields: ['value' ],
      //    listeners: { exception: Lino.on_store_exception }
      //}));
  }
});

Ext.define('Lino.ComplexRemoteComboStore',{
  extend:'Ext.data.JsonStore',
//Lino.ComplexRemoteComboStore = Ext.extend(Ext.data.JsonStore,{
  constructor: function(config){
      Lino.ComplexRemoteComboStore.superclass.constructor.call(this, Ext.apply(config, {
          totalProperty: 'count',
          root: 'rows',
          id: 'value', // constants.CHOICES_VALUE_FIELD
          fields: ['value','text'], // constants.CHOICES_VALUE_FIELD, // constants.CHOICES_TEXT_FIELD
          listeners: { exception: Lino.on_store_exception }
      }));
      //this.callSuper(Ext.apply(config, {
      //    totalProperty: 'count',
      //    root: 'rows',
      //    id: 'value', // constants.CHOICES_VALUE_FIELD
      //    fields: ['value','text'], // constants.CHOICES_VALUE_FIELD, // constants.CHOICES_TEXT_FIELD
      //    listeners: { exception: Lino.on_store_exception }
      //}));
  }
});

Ext.define('Lino.RemoteComboFieldElement',{
  extend:'Lino.ComboBox',
  mode: 'remote',
  queryMode : 'remote',
  width:235,
  //~ forceSelection:false,
  minChars: 2, // default 4 is too much
  queryDelay: 300, // default 500 is maybe slow
  queryParam: 'query', 
  //~ typeAhead: true,
  //~ selectOnFocus: true, // select any existing text in the field immediately on focus.
  resizable: false
  ,initList : function() {
      //Lino.RemoteComboFieldElement.superclass.initList.call(this);
         this.callSuper();
      if (this.pageTb) {
          
          var me = this;
          this.pageTb.on("beforechange", function(toolbar, o){
              if(me.contextParams)
                  Ext.apply(o, me.contextParams);
          });
          
          //~ 
          //~ var btn = ls_buttons
          //~ this.pageTb.items = this.pageTb.items.concat([btn]);
          //~ console.log("20131022 pageTb.items is", this.pageTb.items)
      }
  }
});

/*
Thanks to Animal for posting the basic idea:
http://www.sencha.com/forum/showthread.php?15842-2.0-SOLVED-Combobox-twintrigger-clear&p=76130&viewfull=1#post76130

*/

Ext.define('Lino.TwinCombo',{
  extend:'Lino.RemoteComboFieldElement',
    forceSelection : false,
    trigger2Class : 'x-form-search-trigger',
    triggers: {
        search: {
            cls: Ext.baseCSSPrefix + 'form-search-trigger',
            handler: 'onTrigger2Click',
            scope: 'this'
        }
    }
  });
Lino.TwinCombo.prototype.getTrigger = Ext.form.field.Text.prototype.getTrigger;
Lino.TwinCombo.prototype.getOuterSize = Ext.form.field.Text.prototype.getOuterSize;
Lino.TwinCombo.prototype.initTrigger = Ext.form.field.Text.prototype.initTrigger;
Lino.TwinCombo.prototype.onTrigger1Click = Ext.form.ComboBox.prototype.onTriggerClick;


Ext.define('Lino.SimpleRemoteComboFieldElement',{
    extend : 'Lino.RemoteComboFieldElement',
  displayField: 'value',
  valueField: undefined,
  forceSelection: false
});


Ext.define('Lino.Window', {
    extend: 'Ext.Window',
    mixins: ['Ext.Component'],
  closeAction : 'hide',
  renderTo: 'main_area',
  constrain: true,
  maximized: true,
  draggable: false,
  width: 700,
  height: 500,
  listeners:
        {
        show: function()
        {
            this.removeCls("x-unselectable");
        }
        }  ,
  constructor : function (config) {
    if (config.main_item.params_panel) {
        config.layout = 'border';
        config.main_item.region = 'center';
        config.main_item.params_panel.region = 'north';
        //~ config.main_item.params_panel.autoHeight = false; // 20130924
        config.main_item.params_panel.hidden = config.main_item.params_panel_hidden;
        config.items = [config.main_item.params_panel, config.main_item];
        //~ 20130923b
    } else {
        config.layout = 'fit';
        config.items = config.main_item;
    }
    this.main_item = config.main_item;

    if (typeof config.width == "string" && config.width.slice(-1) == "%") {
        config.width = Lino.perc2width(parseInt(config.width.slice(0, -1)));
    }

    delete config.main_item;
    //~ delete config.params_item;
    
    //~ this.main_item = config.items.get(0);
    this.main_item.containing_window = this;
    
    //~ console.log('20120110 Lino.Window.constructor() 1');
    //~ if (Lino.current_window) { // all windows except the top are closable
    if (this.main_item.hide_window_title) {
      config.closable = false;
      config.frame = false;
      config.shadow = false;
      //~ config.border = true;
      //~ config.title = undefined;
      //~ config.tools = null;
      delete config.title;
      delete config.tools;
    } else {
      config.title = this.main_item.empty_title;
      config.closable = true;
      config.tools = [ 
        { qtip: 'permalink', handler: Lino.permalink_handler(this), type: "pin" }
      ];
      if (this.main_item.content_type && this.main_item.action_name != 'insert') {
        config.tools = [ {
          handler: Lino.help_text_editor,
          qtip: "Edit help texts for fields on this model.",
          scope: this.main_item,
          type: "gear"
        }].concat(config.tools);
      }
        
    //~ { qtip: '', handler: Lino.save_wc_handler(this), id: "save" }, 
    //~ { qtip: this.config.qtip, handler: Lino.save_wc_handler(this), id: "save" }, 
    //~ { qtip: 'Call doLayout() on main Container.', handler: Lino.refresh_handler(this), id: "refresh" },
    //~ if (this.main_item.params_panel) {
        //~ config.tools = config.tools.concat([
          //~ { qtip: 'Show/hide parameter panel', handler: this.toggle_params_panel, id: "gear", scope:this } 
        //~ ]);
    //~ }
    //~ if (config.closable !== false) {
      // if undefined, will take default behaviour
      //~ config.tools = config.tools.concat([ 
        //~ { qtip: 'close', handler: this.hide, id: "close", scope:this } 
      //~ ]);
    }
    
    this.main_item.config_containing_window(this.main_item, config);
    
    // console.log('20150514 Lino.Window.constructor() 2');
    Lino.Window.superclass.constructor.call(this,config);
    //  this.callSuper(config);

    
    // console.log('20120110 Lino.Window.constructor() 3');
    
  },
  initComponent : function() {
    this.main_item.init_containing_window(this);
    Lino.Window.superclass.initComponent.call(this);
    // this.callParent();  // 20160630
    // this.callSuper(arguments);
  
  },
  hide : function() { 
      this.main_item.do_when_clean(false,function() { 
        Lino.close_window(); });
  },
  hide_really : function() { 
    Lino.Window.superclass.hide.call(this);
    //this.callSuper(arguments);
  },
  onRender : function(ct, position){
    // console.log('20140829 Lino.Window.onRender() 1');
    // Lino.Window.superclass.onRender.call(this, ct, position);
    this.callSuper(arguments);
    var main_area = Ext.getCmp('main_area');
    // var main_area = Ext.getBody();
    //~ console.log('20120110 Lino.Window.onRender() 2');
  
    this.on('show', function(win) {
        // console.log('20140829 Lino.Window.on(show) : add resize handler');
        main_area.on('resize', win.onWindowResize, win);
    });
    this.on('hide', function(win) {
        // console.log('20140829 Lino.Window.on(hide) : remove resize handler');
        main_area.un('resize', win.onWindowResize, win);
    });
    // console.log('20140829 Lino.Window.onRender() 3');
  }
});



function initializeFooBarDropZone(cmp) {
    //~ console.log('initializeFooBarDropZone',cmp);
    cmp.dropTarget = new Ext.dd.DropTarget(cmp.bwrap, {
      //~ ddGroup     : 'gridDDGroup',
      notifyEnter : function(ddSource, e, data) {
        console.log('notifyEnter',ddSource,e,data);
        //Add some flare to invite drop.
        cmp.body.stopFx();
        cmp.body.highlight();
      },
      notifyDrop  : function(ddSource, e, data){
        console.log('notifyDrop',ddSource,e,data);
        // Reference the record (single selection) for readability
        //~ var selectedRecord = ddSource.dragData.selections[0];


        // Load the record into the form
        //~ formPanel.getForm().my_loadRecord(selectedRecord);


        // Delete record from the grid.  not really required.
        //~ ddSource.grid.store.remove(selectedRecord);

        return(true);
      }
    })
}



Lino.show_mti_child = function(fieldname,detail_handler) {
  //~ console.log('show_mti_child',this);
  //~ console.log('show_mti_child',panel.find("main_area"));
  rec = Lino.current_window.main_item.get_current_record();
  //~ rec = panel.get_current_record();
  if (rec) {
    //~ console.log('show_mti_child',Lino.current_window,rec);
    if (rec.phantom) {
      Lino.notify('Not allowed on phantom record.');
    }else if (rec.data[fieldname]) {
      //~ console.log('show_mti_child',rec.id);
      //~ detail_handler(Lino.current_window.main_item,{},{record_id:rec.id});
      detail_handler.run(null,{record_id:rec.id});
      //~ window.open(urlroot + '/' + rec.id);
      //~ document.location = urlroot + '/' + rec.id;
      //~ window.open(urlroot + '/' + rec.id,'_blank');
    } else {
      Lino.alert("Cannot show MTI child if checkbox is off.");
    }
  } else {
    Lino.notify('No current record.');
  }
};


/*
captureEvents utility by Aaron Conran
<http://www.sencha.com/learn/grid-faq/>

Ext.onReady(function(){
    var grid = new Ext.grid.GridPanel({
        ... 
    });
    captureEvents(grid);
});
*/
function captureEvents(observable) {
    Ext.util.Observable.capture(
        observable,
        function(eventName) {
            console.info(eventName);
        },
        this
    );		
}

// settings.SITE.get_plugin_snippets()



Lino.copyToClipboard = function (test) {
    // Using idea form http://stackoverflow.com/a/34050374
    document.getElementById("body").innerHTML =
   '<textarea id="mytmpcontent" cols="0" rows="0">'+ test +'</textarea>';
    var mytmpcontent = document.getElementById("mytmpcontent");
    mytmpcontent.select();
    document.execCommand('copy');
    document.getElementById("body").removeChild(mytmpcontent);
};

// from lino_xl.lib.beid (media_name=eidreader):beid/eidreader.js


Lino.beid_read_card_processor = function() {
    var card = document.applets.EIDReader.readCard();
    // if (!card) {
    //     Lino.alert("Could not find any card on your reader.");
    //     return null;
    // } 
    // console.log(20140301, card);
    return { card_data: card };
}


// from lino_xl.lib.sepa:iban/uppercasetextfield.js

Lino.UppercaseTextField = Ext.extend(Ext.form.TextField,{
  style: 'text-transform:uppercase;',
  listeners:{
    change: function(field, newValue, oldValue){
      // console.log("20140403 UppercaseTextField",newValue, newValue.toUpperCase());
      field.setRawValue(newValue.toUpperCase());
    }
  }
});


Lino.iban_renderer = function(
    value, metaData, record, rowIndex, colIndex, store) 
{
    var reg = new RegExp(".{4}", "g");
    if(value) {
        return value.replace(reg, function (a) { return a + ' '; });
    }
    return value;
}



Lino.main_menu = [ { "menu": { "items": [ { "handler": function() {Lino.about.About.show.run(null,{ "record_id": -99998 })}, "listeners": { "render": Lino.quicktip_renderer("Foo","Show information about this site.") }, "text": "About" } ] }, "text": "Site" }, { "handler": function() {Lino.handle_home_button()}, "text": "Home" } ];
Ext.namespace('Lino.users.Users')
Ext.namespace('Lino.users.AllUsers')
Ext.namespace('Lino.users.UsersOverview')
Ext.namespace('Lino.users.MySettings')
Ext.namespace('Lino.users.Authorities')
Ext.namespace('Lino.system.SiteConfigs')
Ext.namespace('Lino.gfks.ContentTypes')
Ext.namespace('Lino.gfks.HelpTexts')
Ext.namespace('Lino.countries.Countries')
Ext.namespace('Lino.countries.Places')
Ext.namespace('Lino.properties.PropGroups')
Ext.namespace('Lino.properties.PropTypes')
Ext.namespace('Lino.properties.Properties')
Ext.namespace('Lino.properties.PropChoices')
Ext.namespace('Lino.contacts.Partners')
Ext.namespace('Lino.contacts.Persons')
Ext.namespace('Lino.contacts.CompanyTypes')
Ext.namespace('Lino.contacts.Companies')
Ext.namespace('Lino.contacts.RoleTypes')
Ext.namespace('Lino.contacts.Roles')
Ext.namespace('Lino.households.Types')
Ext.namespace('Lino.households.Households')
Ext.namespace('Lino.households.Members')
Ext.namespace('Lino.humanlinks.Links')
Ext.namespace('Lino.ledger.Journals')
Ext.namespace('Lino.ledger.AccountingPeriods')
Ext.namespace('Lino.ledger.PaymentTerms')
Ext.namespace('Lino.ledger.Vouchers')
Ext.namespace('Lino.ledger.AllVouchers')
Ext.namespace('Lino.ledger.MatchRules')
Ext.namespace('Lino.ledger.PartnerVouchers')
Ext.namespace('Lino.ledger.GeneralAccountBalances')
Ext.namespace('Lino.ledger.PartnerBalancesByTradeType')
Ext.namespace('Lino.ledger.Movements')
Ext.namespace('Lino.ledger.AllMovements')
Ext.namespace('Lino.products.ProductCats')
Ext.namespace('Lino.products.Products')
Ext.namespace('Lino.cal.RemoteCalendars')
Ext.namespace('Lino.cal.Rooms')
Ext.namespace('Lino.cal.AllRooms')
Ext.namespace('Lino.cal.Priorities')
Ext.namespace('Lino.cal.Calendars')
Ext.namespace('Lino.cal.Subscriptions')
Ext.namespace('Lino.cal.Tasks')
Ext.namespace('Lino.cal.MyTasks')
Ext.namespace('Lino.cal.GuestRoles')
Ext.namespace('Lino.cal.Guests')
Ext.namespace('Lino.cal.AllGuests')
Ext.namespace('Lino.cal.MyPresences')
Ext.namespace('Lino.cal.MyPendingPresences')
Ext.namespace('Lino.cal.MyGuests')
Ext.namespace('Lino.cal.EventTypes')
Ext.namespace('Lino.cal.RecurrentEvents')
Ext.namespace('Lino.cal.Events')
Ext.namespace('Lino.cal.AllEntries')
Ext.namespace('Lino.cal.PublicEntries')
Ext.namespace('Lino.cal.EntriesByDay')
Ext.namespace('Lino.cal.OneEvent')
Ext.namespace('Lino.cal.MyEntries')
Ext.namespace('Lino.cal.MyEntriesToday')
Ext.namespace('Lino.cal.MyAssignedEvents')
Ext.namespace('Lino.cal.OverdueAppointments')
Ext.namespace('Lino.cal.MyOverdueAppointments')
Ext.namespace('Lino.cal.MyUnconfirmedAppointments')
Ext.namespace('Lino.cal.EventPolicies')
Ext.namespace('Lino.accounts.Groups')
Ext.namespace('Lino.accounts.Accounts')
Ext.namespace('Lino.sales.PaperTypes')
Ext.namespace('Lino.sales.SalesDocuments')
Ext.namespace('Lino.sales.Invoices')
Ext.namespace('Lino.sales.DueInvoices')
Ext.namespace('Lino.sales.InvoiceItems')
Ext.namespace('Lino.sales.DocumentsToSign')
Ext.namespace('Lino.invoicing.Plans')
Ext.namespace('Lino.invoicing.MyPlans')
Ext.namespace('Lino.invoicing.AllPlans')
Ext.namespace('Lino.invoicing.Items')
Ext.namespace('Lino.sepa.Accounts')
Ext.namespace('Lino.finan.FinancialVouchers')
Ext.namespace('Lino.finan.JournalEntries')
Ext.namespace('Lino.finan.PaymentOrders')
Ext.namespace('Lino.finan.BankStatements')
Ext.namespace('Lino.finan.AllBankStatements')
Ext.namespace('Lino.finan.AllJournalEntries')
Ext.namespace('Lino.finan.AllPaymentOrders')
Ext.namespace('Lino.ana.Groups')
Ext.namespace('Lino.ana.Accounts')
Ext.namespace('Lino.ana.Invoices')
Ext.namespace('Lino.topics.TopicGroups')
Ext.namespace('Lino.topics.Topics')
Ext.namespace('Lino.topics.AllTopics')
Ext.namespace('Lino.topics.Interests')
Ext.namespace('Lino.topics.AllInterests')
Ext.namespace('Lino.blogs.EntryTypes')
Ext.namespace('Lino.blogs.Entries')
Ext.namespace('Lino.blogs.MyEntries')
Ext.namespace('Lino.blogs.AllEntries')
Ext.namespace('Lino.blogs.LatestEntries')
Ext.namespace('Lino.notes.NoteTypes')
Ext.namespace('Lino.notes.EventTypes')
Ext.namespace('Lino.notes.Notes')
Ext.namespace('Lino.notes.AllNotes')
Ext.namespace('Lino.notes.MyNotes')
Ext.namespace('Lino.excerpts.ExcerptTypes')
Ext.namespace('Lino.excerpts.Excerpts')
Ext.namespace('Lino.excerpts.AllExcerpts')
Ext.namespace('Lino.excerpts.MyExcerpts')
Ext.namespace('Lino.plausibility.Problems')
Ext.namespace('Lino.plausibility.AllProblems')
Ext.namespace('Lino.plausibility.MyProblems')
Ext.namespace('Lino.tera.Clients')
Ext.namespace('Lino.tera.AllClients')
Ext.namespace('Lino.tera.MyClients')
Ext.namespace('Lino.teams.Teams')
Ext.namespace('Lino.coachings.CoachingTypes')
Ext.namespace('Lino.coachings.CoachingEndings')
Ext.namespace('Lino.coachings.Coachings')
Ext.namespace('Lino.coachings.ClientContactTypes')
Ext.namespace('Lino.coachings.ClientContacts')
Ext.namespace('Lino.vat.Invoices')
Ext.namespace('Lino.vat.IntracomInvoices')
Ext.namespace('Lino.vat.IntracomSales')
Ext.namespace('Lino.vat.IntracomPurchases')
Ext.namespace('Lino.courses.Slots')
Ext.namespace('Lino.courses.Topics')
Ext.namespace('Lino.courses.Lines')
Ext.namespace('Lino.courses.Activities')
Ext.namespace('Lino.courses.Courses')
Ext.namespace('Lino.courses.AllActivities')
Ext.namespace('Lino.courses.MyActivities')
Ext.namespace('Lino.courses.DraftCourses')
Ext.namespace('Lino.courses.ActiveCourses')
Ext.namespace('Lino.courses.InactiveCourses')
Ext.namespace('Lino.courses.ClosedCourses')
Ext.namespace('Lino.courses.Enrolments')
Ext.namespace('Lino.courses.AllEnrolments')
Ext.namespace('Lino.courses.PendingConfirmedEnrolments')
Ext.namespace('Lino.courses.CourseTypes')
Ext.namespace('Lino.courses.PendingRequestedEnrolments')
Ext.namespace('Lino.courses.LifeGroups')
Ext.namespace('Lino.courses.Therapies')
Ext.namespace('Lino.bevats.Declarations')
Ext.namespace('Lino.faculties.SkillTypes')
Ext.namespace('Lino.faculties.Skills')
Ext.namespace('Lino.faculties.AllSkills')
Ext.namespace('Lino.faculties.TopLevelSkills')
Ext.namespace('Lino.faculties.Offers')
Ext.namespace('Lino.faculties.MyOffers')
Ext.namespace('Lino.faculties.Demands')
Ext.namespace('Lino.vat.InvoiceItemTable')
Ext.namespace('Lino.finan.JournalEntryItemTable')
Ext.namespace('Lino.finan.BankStatementItemTable')
Ext.namespace('Lino.finan.PaymentOrderItemTable')
Ext.namespace('Lino.ana.InvoiceItemTable')
Ext.namespace('Lino.sessions.SessionTable')
Ext.namespace('Lino.users.AuthoritiesGiven')
Ext.namespace('Lino.users.AuthoritiesTaken')
Ext.namespace('Lino.countries.PlacesByPlace')
Ext.namespace('Lino.countries.PlacesByCountry')
Ext.namespace('Lino.properties.PropsByGroup')
Ext.namespace('Lino.properties.PropsByType')
Ext.namespace('Lino.properties.ChoicesByType')
Ext.namespace('Lino.contacts.PartnersByCity')
Ext.namespace('Lino.contacts.PartnersByCountry')
Ext.namespace('Lino.contacts.RolesByCompany')
Ext.namespace('Lino.contacts.RolesByPerson')
Ext.namespace('Lino.households.HouseholdsByType')
Ext.namespace('Lino.households.MembersByHousehold')
Ext.namespace('Lino.households.SiblingsByPerson')
Ext.namespace('Lino.households.MembersByPerson')
Ext.namespace('Lino.humanlinks.LinksByHuman')
Ext.namespace('Lino.ledger.MatchRulesByAccount')
Ext.namespace('Lino.ledger.MatchRulesByJournal')
Ext.namespace('Lino.ledger.MovementsByVoucher')
Ext.namespace('Lino.ledger.MovementsByPartner')
Ext.namespace('Lino.ledger.MovementsByAccount')
Ext.namespace('Lino.ledger.MovementsByMatch')
Ext.namespace('Lino.products.ProductsByCategory')
Ext.namespace('Lino.cal.SubscriptionsByUser')
Ext.namespace('Lino.cal.SubscriptionsByCalendar')
Ext.namespace('Lino.cal.TasksByUser')
Ext.namespace('Lino.cal.TasksByProject')
Ext.namespace('Lino.cal.GuestsByEvent')
Ext.namespace('Lino.cal.GuestsByRole')
Ext.namespace('Lino.cal.GuestsByPartner')
Ext.namespace('Lino.cal.EntriesByType')
Ext.namespace('Lino.cal.ConflictingEvents')
Ext.namespace('Lino.cal.EntriesByRoom')
Ext.namespace('Lino.cal.EntriesByProject')
Ext.namespace('Lino.accounts.AccountsByGroup')
Ext.namespace('Lino.sales.PartnersByInvoiceRecipient')
Ext.namespace('Lino.sales.InvoicesByJournal')
Ext.namespace('Lino.sales.PrintableInvoicesByJournal')
Ext.namespace('Lino.sales.ItemsByInvoice')
Ext.namespace('Lino.sales.ItemsByInvoicePrint')
Ext.namespace('Lino.sales.ItemsByInvoicePrintNoQtyColumn')
Ext.namespace('Lino.sales.InvoiceItemsByProduct')
Ext.namespace('Lino.sales.InvoicesByPartner')
Ext.namespace('Lino.invoicing.ItemsByPlan')
Ext.namespace('Lino.sepa.AccountsByPartner')
Ext.namespace('Lino.finan.PaymentOrdersByJournal')
Ext.namespace('Lino.finan.JournalEntriesByJournal')
Ext.namespace('Lino.finan.BankStatementsByJournal')
Ext.namespace('Lino.finan.ItemsByJournalEntry')
Ext.namespace('Lino.finan.ItemsByBankStatement')
Ext.namespace('Lino.finan.ItemsByPaymentOrder')
Ext.namespace('Lino.ana.AccountsByGroup')
Ext.namespace('Lino.ana.MovementsByAccount')
Ext.namespace('Lino.ana.InvoicesByJournal')
Ext.namespace('Lino.ana.PrintableInvoicesByJournal')
Ext.namespace('Lino.ana.ItemsByInvoice')
Ext.namespace('Lino.topics.TopicsByGroup')
Ext.namespace('Lino.topics.InterestsByPartner')
Ext.namespace('Lino.topics.InterestsByTopic')
Ext.namespace('Lino.blogs.EntriesByType')
Ext.namespace('Lino.notes.NotesByType')
Ext.namespace('Lino.notes.NotesByEventType')
Ext.namespace('Lino.notes.NotesByProject')
Ext.namespace('Lino.notes.NotesByCompany')
Ext.namespace('Lino.notes.NotesByPerson')
Ext.namespace('Lino.excerpts.ExcerptsByType')
Ext.namespace('Lino.excerpts.ExcerptsByProject')
Ext.namespace('Lino.plausibility.ProblemsByChecker')
Ext.namespace('Lino.tera.ClientsByNationality')
Ext.namespace('Lino.teams.UsersByTeam')
Ext.namespace('Lino.coachings.CoachingsByClient')
Ext.namespace('Lino.coachings.CoachingsByEnding')
Ext.namespace('Lino.coachings.CoachingsByUser')
Ext.namespace('Lino.coachings.MyCoachings')
Ext.namespace('Lino.coachings.ContactsByClient')
Ext.namespace('Lino.coachings.ClientContactsByType')
Ext.namespace('Lino.coachings.ClientContactsByCompany')
Ext.namespace('Lino.coachings.PartnersByClientContactType')
Ext.namespace('Lino.vat.InvoicesByJournal')
Ext.namespace('Lino.vat.PrintableInvoicesByJournal')
Ext.namespace('Lino.vat.ItemsByInvoice')
Ext.namespace('Lino.courses.LinesByTopic')
Ext.namespace('Lino.courses.EntriesByTeacher')
Ext.namespace('Lino.courses.CoursesByTeacher')
Ext.namespace('Lino.courses.MyCoursesGiven')
Ext.namespace('Lino.courses.CoursesBySlot')
Ext.namespace('Lino.courses.EnrolmentsByOption')
Ext.namespace('Lino.courses.EnrolmentsByPupil')
Ext.namespace('Lino.courses.EnrolmentsByCourse')
Ext.namespace('Lino.courses.EnrolmentsByFee')
Ext.namespace('Lino.courses.CoursesByTopic')
Ext.namespace('Lino.courses.CoursesByLine')
Ext.namespace('Lino.courses.LinesByType')
Ext.namespace('Lino.courses.EnrolmentsAndPaymentsByCourse')
Ext.namespace('Lino.courses.EnrolmentsByLifeGroup')
Ext.namespace('Lino.courses.EnrolmentsByTherapy')
Ext.namespace('Lino.courses.ActivitiesByPartner')
Ext.namespace('Lino.bevats.DeclarationsByJournal')
Ext.namespace('Lino.faculties.SkillsByParent')
Ext.namespace('Lino.faculties.SkillsByType')
Ext.namespace('Lino.faculties.OffersByEndUser')
Ext.namespace('Lino.faculties.OffersBySkill')
Ext.namespace('Lino.faculties.DemandsBySkill')
Ext.namespace('Lino.faculties.DemandsByDemander')
Ext.namespace('Lino.faculties.OffersByDemander')
Ext.namespace('Lino.faculties.AssignableWorkersByTicket')
Ext.namespace('Lino.invoicing.InvoicingsByInvoiceable')
Ext.namespace('Lino.notes.NotesByOwner')
Ext.namespace('Lino.cal.TasksByController')
Ext.namespace('Lino.gfks.HelpTextsByModel')
Ext.namespace('Lino.plausibility.ProblemsByOwner')
Ext.namespace('Lino.cal.EntriesByController')
Ext.namespace('Lino.topics.InterestsByController')
Ext.namespace('Lino.courses.EntriesByCourse')
Ext.namespace('Lino.excerpts.ExcerptsByOwner')
Ext.namespace('Lino.blogs.EntriesByController')
Ext.namespace('Lino.about.Models')
Ext.namespace('Lino.about.FieldsByModel')
Ext.namespace('Lino.about.Inspector')
Ext.namespace('Lino.about.SourceFiles')
Ext.namespace('Lino.gfks.BrokenGFKs')
Ext.namespace('Lino.gfks.BrokenGFKsByModel')
Ext.namespace('Lino.ledger.VouchersByPartnerBase')
Ext.namespace('Lino.ledger.ExpectedMovements')
Ext.namespace('Lino.ledger.DebtsByAccount')
Ext.namespace('Lino.ledger.DebtsByPartner')
Ext.namespace('Lino.ledger.Debtors')
Ext.namespace('Lino.ledger.Creditors')
Ext.namespace('Lino.finan.SuggestionsByVoucher')
Ext.namespace('Lino.finan.SuggestionsByJournalEntry')
Ext.namespace('Lino.finan.SuggestionsByPaymentOrder')
Ext.namespace('Lino.finan.SuggestionsByBankStatement')
Ext.namespace('Lino.finan.SuggestionsByVoucherItem')
Ext.namespace('Lino.finan.SuggestionsByBankStatementItem')
Ext.namespace('Lino.finan.SuggestionsByPaymentOrderItem')
Ext.namespace('Lino.vat.VouchersByPartner')
Ext.namespace('Lino.about.About')
Ext.namespace('Lino.ledger.Situation')
Ext.namespace('Lino.ledger.AccountingReport')
Ext.namespace('Lino.courses.StatusReport')
Ext.namespace('Lino.plausibility.Checkers')
Ext.namespace('Lino.notes.SpecialTypes')
Ext.namespace('Lino.vat.VatClasses')
Ext.namespace('Lino.beid.CivilStates')
Ext.namespace('Lino.ledger.TradeTypes')
Ext.namespace('Lino.cal.DurationUnits')
Ext.namespace('Lino.system.YesNo')
Ext.namespace('Lino.cal.Weekdays')
Ext.namespace('Lino.households.MemberDependencies')
Ext.namespace('Lino.ledger.FiscalYears')
Ext.namespace('Lino.beid.BeIdCardTypes')
Ext.namespace('Lino.excerpts.Shortcuts')
Ext.namespace('Lino.system.PeriodEvents')
Ext.namespace('Lino.tera.StartingReasons')
Ext.namespace('Lino.vat.VatAreas')
Ext.namespace('Lino.beid.ResidenceTypes')
Ext.namespace('Lino.accounts.AccountTypes')
Ext.namespace('Lino.coachings.ClientEvents')
Ext.namespace('Lino.vat.DeclarationFieldsBase')
Ext.namespace('Lino.ledger.JournalGroups')
Ext.namespace('Lino.system.Genders')
Ext.namespace('Lino.courses.EnrolmentStates')
Ext.namespace('Lino.cal.EntryStates')
Ext.namespace('Lino.properties.HowWell')
Ext.namespace('Lino.ledger.PeriodStates')
Ext.namespace('Lino.cal.EventEvents')
Ext.namespace('Lino.tera.ProfessionalStates')
Ext.namespace('Lino.households.MemberRoles')
Ext.namespace('Lino.cal.GuestStates')
Ext.namespace('Lino.properties.DoYouLike')
Ext.namespace('Lino.products.DeliveryUnit')
Ext.namespace('Lino.tera.EndingReasons')
Ext.namespace('Lino.vat.VatRegimes')
Ext.namespace('Lino.tera.TranslatorTypes')
Ext.namespace('Lino.ledger.VoucherTypes')
Ext.namespace('Lino.vat.VatRules')
Ext.namespace('Lino.printing.BuildMethods')
Ext.namespace('Lino.accounts.CommonAccounts')
Ext.namespace('Lino.cal.AccessClasses')
Ext.namespace('Lino.humanlinks.LinkTypes')
Ext.namespace('Lino.ledger.VoucherStates')
Ext.namespace('Lino.cal.TaskStates')
Ext.namespace('Lino.courses.CourseAreas')
Ext.namespace('Lino.users.UserTypes')
Ext.namespace('Lino.vat.VatColumns')
Ext.namespace('Lino.cal.Recurrencies')
Ext.namespace('Lino.contacts.PartnerEvents')
Ext.namespace('Lino.coachings.ClientStates')
Ext.namespace('Lino.courses.CourseStates')
Ext.namespace('Lino.bevats.DeclarationFields')
Ext.namespace('Lino.countries.PlaceTypes')
Ext.namespace('Lino.tera.PartnerTariffs')

// ChoiceLists: 
Lino.plausibility.Checkers = [ [ "printing.CachedPrintableChecker", "Check for missing target files" ], [ "countries.PlaceChecker", "Check plausibility of geographical places." ], [ "coachings.ClientCoachingsChecker", "Check coachings" ], [ "beid.BeIdCardHolderChecker", "Check for invalid SSINs" ], [ "ledger.VoucherChecker", "Check integrity of ledger movements" ], [ "sepa.BankAccountChecker", "Check for partner mismatches in bank accounts" ], [ "cal.EventGuestChecker", "Entries without participants" ], [ "cal.ConflictingEventsChecker", "Check for conflicting calendar entries" ], [ "cal.ObsoleteEventTypeChecker", "Obsolete event type of generated entries" ], [ "cal.LongEntryChecker", "Too long-lasting calendar entries" ] ];
Lino.notes.SpecialTypes = [  ];
Lino.vat.VatClasses = [ [ "0", "Exempt" ], [ "1", "Reduced" ], [ "2", "Normal" ] ];
Lino.beid.CivilStates = [ [ "10", "Single" ], [ "20", "Married" ], [ "30", "Widowed" ], [ "40", "Divorced" ], [ "50", "Separated" ], [ "51", "De facto separated" ], [ "60", "Cohabitating" ] ];
Lino.ledger.TradeTypes = [ [ "S", "Sales" ], [ "P", "Purchases" ], [ "W", "Wages" ], [ "T", "Taxes" ], [ "C", "Clearings" ], [ "B", "Bank payment orders" ] ];
Lino.cal.DurationUnits = [ [ "s", "seconds" ], [ "m", "minutes" ], [ "h", "hours" ], [ "D", "days" ], [ "W", "weeks" ], [ "M", "months" ], [ "Y", "years" ] ];
Lino.system.YesNo = [ [ "y", "Yes" ], [ "n", "No" ] ];
Lino.cal.Weekdays = [ [ "1", "Monday" ], [ "2", "Tuesday" ], [ "3", "Wednesday" ], [ "4", "Thursday" ], [ "5", "Friday" ], [ "6", "Saturday" ], [ "7", "Sunday" ] ];
Lino.households.MemberDependencies = [ [ "01", "At full charge" ], [ "02", "Not at charge" ], [ "03", "At shared charge" ] ];
Lino.ledger.FiscalYears = [ [ "15", "2015" ], [ "16", "2016" ], [ "17", "2017" ], [ "18", "2018" ], [ "19", "2019" ], [ "20", "2020" ] ];
Lino.beid.BeIdCardTypes = [ [ "1", "Belgian citizen" ], [ "6", "Kids card (< 12 year)" ], [ "11", "Foreigner card A" ], [ "12", "Foreigner card B" ], [ "13", "Foreigner card C" ], [ "14", "Foreigner card D" ], [ "15", "Foreigner card E" ], [ "16", "Foreigner card E+" ], [ "17", "Foreigner card F" ], [ "18", "Foreigner card F+" ], [ "99", "Registration certificate (Orange card)" ] ];
Lino.excerpts.Shortcuts = [  ];
Lino.system.PeriodEvents = [ [ "10", "Starts" ], [ "20", "Is active" ], [ "30", "Ends" ] ];
Lino.tera.StartingReasons = [ [ "100", "Voluntarily" ], [ "200", "Mandatory" ] ];
Lino.vat.VatAreas = [ [ "10", "National" ], [ "20", "EU" ], [ "30", "International" ] ];
Lino.beid.ResidenceTypes = [ [ "1", "Register of citizens" ], [ "2", "Register of foreigners" ], [ "3", "Waiting register" ] ];
Lino.accounts.AccountTypes = [ [ "A", "Assets" ], [ "L", "Liabilities" ], [ "C", "Capital" ], [ "I", "Incomes" ], [ "E", "Expenses" ] ];
Lino.coachings.ClientEvents = [ [ "active", "Coaching" ], [ "created", "Created" ], [ "modified", "Modified" ], [ "note", "Note" ] ];
Lino.vat.DeclarationFieldsBase = [  ];
Lino.ledger.JournalGroups = [ [ "10", "Sales" ], [ "20", "Purchases" ], [ "30", "Wages" ], [ "40", "Financial" ], [ "50", "VAT" ] ];
Lino.system.Genders = [ [ "M", "Male" ], [ "F", "Female" ] ];
Lino.courses.EnrolmentStates = [ [ "10", "Requested" ], [ "11", "Trying" ], [ "20", "Confirmed" ], [ "30", "Cancelled" ] ];
Lino.cal.EntryStates = [ [ "10", "Suggested" ], [ "20", "Draft" ], [ "50", "Took place" ], [ "70", "Cancelled" ] ];
Lino.properties.HowWell = [ [ "0", "not at all" ], [ "1", "a bit" ], [ "2", "moderate" ], [ "3", "quite well" ], [ "4", "very well" ] ];
Lino.ledger.PeriodStates = [ [ "10", "Open" ], [ "20", "Closed" ] ];
Lino.cal.EventEvents = [ [ "10", "Stable" ], [ "20", "Unstable" ] ];
Lino.tera.ProfessionalStates = [ [ "100", "Student" ], [ "200", "Workless" ], [ "300", "Seeking" ], [ "400", "Employed" ], [ "500", "Independent" ] ];
Lino.households.MemberRoles = [ [ "01", "Head of household" ], [ "02", "Spouse" ], [ "03", "Partner" ], [ "04", "Cohabitant" ], [ "05", "Child" ], [ "06", "Relative" ], [ "07", "Adopted child" ], [ "10", "Other" ] ];
Lino.cal.GuestStates = [ [ "10", "Invited" ], [ "40", "Present" ], [ "50", "Absent" ], [ "60", "Excused" ] ];
Lino.properties.DoYouLike = [ [ "0", "certainly not" ], [ "1", "rather not" ], [ "2", "normally" ], [ "3", "quite much" ], [ "4", "very much" ] ];
Lino.products.DeliveryUnit = [ [ "10", "Hour" ], [ "20", "Piece" ], [ "30", "Kg" ] ];
Lino.tera.EndingReasons = [ [ "100", "Successfully ended" ], [ "200", "Health problems" ], [ "300", "Familiar reasons" ], [ "400", "Missing motivation" ], [ "500", "Return to home country" ], [ "900", "Other" ] ];
Lino.vat.VatRegimes = [ [ "10", "Not subject to VAT" ], [ "20", "Subject to VAT" ], [ "30", "Intracom services" ], [ "35", "Intracom supplies" ] ];
Lino.tera.TranslatorTypes = [ [ "10", "SETIS" ], [ "20", "Other" ], [ "30", "Private" ] ];
Lino.ledger.VoucherTypes = [ [ "sales.InvoicesByJournal", "Product invoice (sales.InvoicesByJournal)" ], [ "finan.JournalEntriesByJournal", "Journal Entry (finan.JournalEntriesByJournal)" ], [ "finan.PaymentOrdersByJournal", "Payment Order (finan.PaymentOrdersByJournal)" ], [ "finan.BankStatementsByJournal", "Bank Statement (finan.BankStatementsByJournal)" ], [ "ana.InvoicesByJournal", "Analytic invoice (ana.InvoicesByJournal)" ], [ "vat.InvoicesByJournal", "Invoice (vat.InvoicesByJournal)" ], [ "bevats.DeclarationsByJournal", "Special Belgian VAT declaration (bevats.DeclarationsByJournal)" ] ];
Lino.vat.VatRules = [ [ "010", "010" ], [ "020", "020" ], [ "900", "900" ] ];
Lino.printing.BuildMethods = [ [ "latex", "LatexBuildMethod" ], [ "pisa", "PisaBuildMethod" ], [ "rtf", "RtfBuildMethod" ], [ "xml", "XmlBuildMethod" ], [ "weasy2html", "WeasyHtmlBuildMethod" ], [ "weasy2pdf", "WeasyPdfBuildMethod" ], [ "appyodt", "AppyOdtBuildMethod" ], [ "appydoc", "AppyDocBuildMethod" ], [ "appypdf", "AppyPdfBuildMethod" ], [ "appyrtf", "AppyRtfBuildMethod" ] ];
Lino.accounts.CommonAccounts = [ [ "4000", "Customers" ], [ "4300", "Pending Payment Orders" ], [ "4400", "Suppliers" ], [ "4500", "Employees" ], [ "4600", "Tax Offices" ], [ "4510", "VAT due" ], [ "4511", "VAT returnable" ], [ "4512", "VAT deductible" ], [ "4513", "VAT declared" ], [ "5500", "BestBank" ], [ "5700", "Cash" ], [ "6040", "Purchase of goods" ], [ "6010", "Purchase of services" ], [ "6020", "Purchase of investments" ], [ "6300", "Wages" ], [ "7000", "Sales" ] ];
Lino.cal.AccessClasses = [ [ "10", "Private" ], [ "20", "Show busy" ], [ "30", "Public" ] ];
Lino.humanlinks.LinkTypes = [ [ "01", "Father (Mother)" ], [ "02", "Adoptive father (Adoptive mother)" ], [ "03", "Grandfather (Grandmother)" ], [ "05", "Husband (Wife)" ], [ "06", "Friend (Friend)" ], [ "07", "Partner (Partner)" ], [ "08", "Stepfather (Stepmother)" ], [ "09", "Foster father (Foster mother)" ], [ "10", "Brother (Sister)" ], [ "11", "Cousin (Cousin)" ], [ "12", "Uncle (Aunt)" ], [ "80", "Relative (Relative)" ], [ "90", "Other (Other)" ] ];
Lino.ledger.VoucherStates = [ [ "10", "Draft" ], [ "20", "Registered" ], [ "30", "Signed" ], [ "40", "Cancelled" ] ];
Lino.cal.TaskStates = [ [ "10", "To do" ], [ "15", "Important" ], [ "20", "Started" ], [ "30", "Done" ], [ "50", "Cancelled" ] ];
Lino.courses.CourseAreas = [ [ "10", "Individual therapies" ], [ "20", "Life groups" ], [ "30", "Other groups" ] ];
Lino.users.UserTypes = [ [ "000", "000 (Anonymous)" ], [ "100", "100 (Secretary)" ], [ "200", "200 (Therapist)" ], [ "900", "900 (Administrator)" ] ];
Lino.vat.VatColumns = [ [ "54", "54 (VAT due)" ], [ "71", "71 (Purchase of ware)" ], [ "72", "72 (Purchase of new vehicles)" ], [ "73", "73 (Purchase of excised products)" ], [ "75", "75 (Purchase of services)" ], [ "76", "76 (Other purchase)" ] ];
Lino.cal.Recurrencies = [ [ "O", "once" ], [ "D", "daily" ], [ "W", "weekly" ], [ "M", "monthly" ], [ "Y", "yearly" ], [ "P", "per weekday" ], [ "E", "Relative to Easter" ] ];
Lino.contacts.PartnerEvents = [  ];
Lino.coachings.ClientStates = [ [ "10", "Newcomer" ], [ "20", "Refused" ], [ "30", "Coached" ], [ "50", "Former" ] ];
Lino.courses.CourseStates = [ [ "10", "Draft" ], [ "20", "Started" ], [ "30", "Inactive" ], [ "40", "Closed" ] ];
Lino.bevats.DeclarationFields = [ [ "71", "[71]" ], [ "72", "[72]" ], [ "73", "[73]" ], [ "75", "[75]" ], [ "76", "[76]" ], [ "77", "[77]" ], [ "78", "[78]" ], [ "80", "[80]" ], [ "81", "[81]" ], [ "82", "[82]" ], [ "83", "[83]" ] ];
Lino.countries.PlaceTypes = [ [ "10", "Member State" ], [ "11", "Division" ], [ "12", "Region" ], [ "13", "Community" ], [ "14", "Territory" ], [ "20", "County" ], [ "21", "Province" ], [ "22", "Shire" ], [ "23", "Subregion" ], [ "24", "Department" ], [ "25", "Arrondissement" ], [ "26", "Prefecture" ], [ "27", "District" ], [ "28", "Sector" ], [ "50", "City" ], [ "51", "Town" ], [ "52", "Municipality" ], [ "54", "Parish" ], [ "55", "Township" ], [ "56", "Quarter" ], [ "61", "Borough" ], [ "62", "Small borough" ], [ "70", "Village" ] ];
Lino.tera.PartnerTariffs = [ [ "10", "Plain" ], [ "20", "Reduced" ] ];

Lino.sales.InvoicesByJournal.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 198,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var partner88 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 36, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(sales.InvoicesByJournal.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/InvoicesByJournal/partner" }) }) });
    var year89 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Fiscal Year", "flex": 12, "forceSelection": true, "hidden": false, "hiddenName": "yearHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(sales.InvoicesByJournal.year) ") }, "name": "year", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.FiscalYears) });
    var state90 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 23, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(sales.InvoicesByJournal.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    var cleared91 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Show cleared vouchers", "flex": 27, "forceSelection": true, "hidden": false, "hiddenName": "clearedHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show cleared vouchers","(sales.InvoicesByJournal.cleared) ") }, "name": "cleared", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    this.items = [ partner88, year89, state90, cleared91 ];
    this.fields = [ partner88, year89, state90, cleared91 ];
this.callSuper();
  }
});


Lino.users.Authorities.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  labelWidth: 63,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var user93 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Author</span>", "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(users.Authorities.user) The user who gives the right of representation. author of this\nauthority") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/users/Authorities/user" }) }), "value": null });
    this.items = [ user93 ];
    this.fields = [ user93 ];
this.callSuper();
  }
});


Lino.about.Inspector.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 153,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var inspected95 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Inspected object", "flex": 67, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Inspected object","(about.Inspector.inspected) ") }, "maxLength": 100, "name": "inspected", "selectOnFocus": true });
    var show_callables96 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "show callables", "checked": false, "flex": 32, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("show callables","(about.Inspector.show_callables) ") }, "name": "show_callables", "selectOnFocus": true });
    this.items = [ inspected95, show_callables96 ];
    this.fields = [ inspected95, show_callables96 ];
this.callSuper();
  }
});


Lino.ana.MovementsByAccount.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var start_period98 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 50, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(ana.MovementsByAccount.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/MovementsByAccount/start_period" }) }) });
    var end_period99 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 50, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(ana.MovementsByAccount.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/MovementsByAccount/end_period" }) }) });
    this.items = [ start_period98, end_period99 ];
    this.fields = [ start_period98, end_period99 ];
this.callSuper();
  }
});


Lino.vat.Invoices.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 198,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var partner101 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 18, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(vat.Invoices.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/Invoices/partner" }) }) });
    var state102 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 12, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(vat.Invoices.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    var journal103 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 18, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(vat.Invoices.journal) ") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/Invoices/journal" }) }) });
    var start_period104 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 18, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(vat.Invoices.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/Invoices/start_period" }) }) });
    var end_period105 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 18, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(vat.Invoices.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/Invoices/end_period" }) }) });
    var cleared106 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Show cleared vouchers", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "clearedHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show cleared vouchers","(vat.Invoices.cleared) ") }, "name": "cleared", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    this.items = [ partner101, state102, journal103, start_period104, end_period105, cleared106 ];
    this.fields = [ partner101, state102, journal103, start_period104, end_period105, cleared106 ];
this.callSuper();
  }
});


Lino.cal.Guests.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var start_date108 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "flex": 18, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(cal.Guests.start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date109 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 18, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(cal.Guests.end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var user110 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Responsible user</span>", "flex": 28, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Responsible user","(cal.Guests.user) Only rows managed by this user.") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Guests/user" }) }) });
    var event_state111 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Event state</span>", "flex": 18, "forceSelection": true, "hidden": false, "hiddenName": "event_stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Event state","(cal.Guests.event_state) Only rows having this event state.") }, "name": "event_state", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.EntryStates) });
    var guest_state112 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Guest state</span>", "flex": 14, "forceSelection": true, "hidden": false, "hiddenName": "guest_stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Guest state","(cal.Guests.guest_state) Only rows having this guest state.") }, "name": "guest_state", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.GuestStates) });
    var main_1_panel113 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date108, end_date109, user110, event_state111, guest_state112 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var project114 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 50, "hidden": false, "hiddenName": "projectHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(cal.Guests.project) ") }, "name": "project", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Guests/project" }) }) });
    var partner115 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "Person", "flex": 50, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Person","(cal.Guests.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Guests/partner" }) }) });
    var main_2_panel116 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ project114, partner115 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel113, main_2_panel116 ];
    this.fields = [ start_date108, end_date109, user110, event_state111, guest_state112, project114, partner115 ];
this.callSuper();
  }
});


Lino.courses.Enrolments.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 162,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var start_date118 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(courses.Enrolments.start_date) Start date of observed period") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date119 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(courses.Enrolments.end_date) End date of observed period") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var author120 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "User", "flex": 25, "hidden": false, "hiddenName": "authorHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("User","(courses.Enrolments.author) ") }, "name": "author", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Enrolments/author" }) }) });
    var state121 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 15, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(courses.Enrolments.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.courses.EnrolmentStates) });
    var course_state122 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Course state", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "course_stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Course state","(courses.Enrolments.course_state) ") }, "name": "course_state", "selectOnFocus": true, "store": [['','']].concat(Lino.courses.CourseStates) });
    var participants_only123 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Participants only", "checked": true, "flex": 12, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Participants only","(courses.Enrolments.participants_only) Hide cancelled enrolments. Ignored if you specify an explicit enrolment state.") }, "name": "participants_only", "selectOnFocus": true });
    this.items = [ start_date118, end_date119, author120, state121, course_state122, participants_only123 ];
    this.fields = [ start_date118, end_date119, author120, state121, course_state122, participants_only123 ];
this.callSuper();
  }
});


Lino.contacts.Partners.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 135,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var enrolment_state125 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 10, "forceSelection": true, "hidden": false, "hiddenName": "enrolment_stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(contacts.Partners.enrolment_state) ") }, "name": "enrolment_state", "selectOnFocus": true, "store": [['','']].concat(Lino.courses.EnrolmentStates) });
    var aged_to126 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Aged to</span>", "flex": 4, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Aged to","(contacts.Partners.aged_to) Select only persons aged at most the given number of years.") }, "name": "aged_to", "selectOnFocus": true });
    var end_date127 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(contacts.Partners.end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var course128 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 16, "hidden": false, "hiddenName": "courseHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(contacts.Partners.course) ") }, "name": "course", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Partners/course" }) }) });
    var gender129 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Gender</span>", "flex": 7, "forceSelection": true, "hidden": false, "hiddenName": "genderHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Gender","(contacts.Partners.gender) The sex of this person (male or female).") }, "name": "gender", "selectOnFocus": true, "store": [['','']].concat(Lino.system.Genders), "value": null });
    var observed_event130 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Observed event</span>", "flex": 17, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Observed event","(contacts.Partners.observed_event) Extended filter criteria") }, "maxLength": 50, "name": "observed_event", "selectOnFocus": true });
    var start_date131 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(contacts.Partners.start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var feasable_by132 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "Feasable by", "flex": 16, "hidden": false, "hiddenName": "feasable_byHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Feasable by","(contacts.Partners.feasable_by) ") }, "name": "feasable_by", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Partners/feasable_by" }) }) });
    var aged_from133 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Aged from</span>", "flex": 4, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Aged from","(contacts.Partners.aged_from) Select only persons aged at least the given number of years.") }, "name": "aged_from", "selectOnFocus": true });
    this.items = [ enrolment_state125, aged_to126, end_date127, course128, gender129, observed_event130, start_date131, feasable_by132, aged_from133 ];
    this.fields = [ enrolment_state125, aged_to126, end_date127, course128, gender129, observed_event130, start_date131, feasable_by132, aged_from133 ];
this.callSuper();
  }
});


Lino.households.Members.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 108,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var end_date135 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(households.Members.end_date) End date of observed period") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var gender136 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Gender</span>", "flex": 20, "forceSelection": true, "hidden": false, "hiddenName": "genderHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Gender","(households.Members.gender) The sex of this person (male or female).") }, "name": "gender", "selectOnFocus": true, "store": [['','']].concat(Lino.system.Genders), "value": null });
    var start_date137 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(households.Members.start_date) Start date of observed period") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var aged_to138 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Aged to</span>", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Aged to","(households.Members.aged_to) Select only persons aged at most the given number of years.") }, "name": "aged_to", "selectOnFocus": true });
    var aged_from139 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Aged from</span>", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Aged from","(households.Members.aged_from) Select only persons aged at least the given number of years.") }, "name": "aged_from", "selectOnFocus": true });
    this.items = [ end_date135, gender136, start_date137, aged_to138, aged_from139 ];
    this.fields = [ end_date135, gender136, start_date137, aged_to138, aged_from139 ];
this.callSuper();
  }
});


Lino.ledger.PartnerVouchers.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 198,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var partner141 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 18, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(ledger.PartnerVouchers.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/PartnerVouchers/partner" }) }) });
    var state142 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 12, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(ledger.PartnerVouchers.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    var journal143 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 18, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(ledger.PartnerVouchers.journal) ") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/PartnerVouchers/journal" }) }) });
    var start_period144 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 18, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(ledger.PartnerVouchers.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/PartnerVouchers/start_period" }) }) });
    var end_period145 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 18, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(ledger.PartnerVouchers.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/PartnerVouchers/end_period" }) }) });
    var cleared146 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Show cleared vouchers", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "clearedHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show cleared vouchers","(ledger.PartnerVouchers.cleared) ") }, "name": "cleared", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    this.items = [ partner141, state142, journal143, start_period144, end_period145, cleared146 ];
    this.fields = [ partner141, state142, journal143, start_period144, end_period145, cleared146 ];
this.callSuper();
  }
});


Lino.ledger.ExpectedMovements.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var trade_type148 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Trade type", "flex": 16, "forceSelection": true, "hidden": false, "hiddenName": "trade_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Trade type","(ledger.ExpectedMovements.trade_type) ") }, "name": "trade_type", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.TradeTypes) });
    var date_until149 = Ext.create('Lino.DateField',{ "fieldLabel": "Date until", "flex": 10, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date until","(ledger.ExpectedMovements.date_until) ") }, "name": "date_until", "selectOnFocus": true });
    var from_journal150 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 15, "hidden": false, "hiddenName": "from_journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(ledger.ExpectedMovements.from_journal) ") }, "name": "from_journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/ExpectedMovements/from_journal" }) }) });
    var for_journal151 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Clearable by", "flex": 15, "hidden": false, "hiddenName": "for_journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Clearable by","(ledger.ExpectedMovements.for_journal) ") }, "name": "for_journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/ExpectedMovements/for_journal" }) }) });
    var partner152 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 15, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(ledger.ExpectedMovements.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/ExpectedMovements/partner" }) }) });
    var account153 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Account...", "fieldLabel": "Account", "flex": 15, "hidden": false, "hiddenName": "accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Account","(ledger.ExpectedMovements.account) ") }, "name": "account", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/ExpectedMovements/account" }) }) });
    var show_sepa154 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "show sepa", "flex": 11, "forceSelection": true, "hidden": false, "hiddenName": "show_sepaHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("show sepa","(ledger.ExpectedMovements.show_sepa) ") }, "name": "show_sepa", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    this.items = [ trade_type148, date_until149, from_journal150, for_journal151, partner152, account153, show_sepa154 ];
    this.fields = [ trade_type148, date_until149, from_journal150, for_journal151, partner152, account153, show_sepa154 ];
this.callSuper();
  }
});


Lino.plausibility.Problems.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 108,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var user156 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Responsible</span>", "flex": 50, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Responsible","(plausibility.Problems.user) The user reponsible\nfor fixing this problem.") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/plausibility/Problems/user" }) }), "value": null });
    var checker157 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Checker</span>", "flex": 50, "forceSelection": true, "hidden": false, "hiddenName": "checkerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Checker","(plausibility.Problems.checker) The Checker which reported\nthis problem.") }, "name": "checker", "selectOnFocus": true, "store": [['','']].concat(Lino.plausibility.Checkers), "value": null });
    this.items = [ user156, checker157 ];
    this.fields = [ user156, checker157 ];
this.callSuper();
  }
});


Lino.notes.Notes.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 108,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var user159 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 50, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(notes.Notes.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/Notes/user" }) }), "value": null });
    var feasable_by160 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "Feasable by", "flex": 50, "hidden": false, "hiddenName": "feasable_byHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Feasable by","(notes.Notes.feasable_by) ") }, "name": "feasable_by", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/Notes/feasable_by" }) }) });
    this.items = [ user159, feasable_by160 ];
    this.fields = [ user159, feasable_by160 ];
this.callSuper();
  }
});


Lino.finan.PaymentOrdersByJournal.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var start_period162 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 27, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(finan.PaymentOrdersByJournal.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/PaymentOrdersByJournal/start_period" }) }) });
    var end_period163 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 27, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(finan.PaymentOrdersByJournal.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/PaymentOrdersByJournal/end_period" }) }) });
    var state164 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 17, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(finan.PaymentOrdersByJournal.state) The workflow state of this voucher. Choices are defined in\nVoucherStates") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates), "value": null });
    var user165 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 27, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.PaymentOrdersByJournal.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/PaymentOrdersByJournal/user" }) }), "value": null });
    this.items = [ start_period162, end_period163, state164, user165 ];
    this.fields = [ start_period162, end_period163, state164, user165 ];
this.callSuper();
  }
});


Lino.excerpts.Excerpts.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var start_date167 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(excerpts.Excerpts.start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date168 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(excerpts.Excerpts.end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var pcertifying169 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Certifying excerpts", "flex": 36, "forceSelection": true, "hidden": false, "hiddenName": "pcertifyingHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Certifying excerpts","(excerpts.Excerpts.pcertifying) ") }, "name": "pcertifying", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    var main_1_panel170 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date167, end_date168, pcertifying169 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var user171 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 50, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(excerpts.Excerpts.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/user" }) }), "value": null });
    var excerpt_type172 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Excerpt Type...", "fieldLabel": "Excerpt Type", "flex": 50, "forceSelection": true, "hidden": false, "hiddenName": "excerpt_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Excerpt Type","(excerpts.Excerpts.excerpt_type) ") }, "name": "excerpt_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.excerpts.ExcerptTypes.detail,Lino.excerpts.ExcerptTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/excerpt_type" }) }) });
    var main_2_panel173 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ user171, excerpt_type172 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel170, main_2_panel173 ];
    this.fields = [ start_date167, end_date168, pcertifying169, user171, excerpt_type172 ];
this.callSuper();
  }
});


Lino.cal.Subscriptions.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  labelWidth: 63,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var user175 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(cal.Subscriptions.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Subscriptions/user" }) }), "value": null });
    this.items = [ user175 ];
    this.fields = [ user175 ];
this.callSuper();
  }
});


Lino.users.Users.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  labelWidth: 90,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var user_type177 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "User type", "forceSelection": true, "hidden": false, "hiddenName": "user_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("User type","(users.Users.user_type) ") }, "name": "user_type", "selectOnFocus": true, "store": [['','']].concat(Lino.users.UserTypes) });
    this.items = [ user_type177 ];
    this.fields = [ user_type177 ];
this.callSuper();
  }
});


Lino.blogs.Entries.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  labelWidth: 63,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var user179 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(blogs.Entries.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/blogs/Entries/user" }) }), "value": null });
    this.items = [ user179 ];
    this.fields = [ user179 ];
this.callSuper();
  }
});


Lino.ledger.PartnerBalancesByTradeType.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 108,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var start_period181 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 50, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(ledger.PartnerBalancesByTradeType.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/PartnerBalancesByTradeType/start_period" }) }) });
    var end_period182 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 50, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(ledger.PartnerBalancesByTradeType.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/PartnerBalancesByTradeType/end_period" }) }) });
    this.items = [ start_period181, end_period182 ];
    this.fields = [ start_period181, end_period182 ];
this.callSuper();
  }
});


Lino.cal.RecurrentEvents.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  labelWidth: 63,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var user184 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(cal.RecurrentEvents.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/RecurrentEvents/user" }) }), "value": null });
    this.items = [ user184 ];
    this.fields = [ user184 ];
this.callSuper();
  }
});


Lino.ana.PrintableInvoicesByJournal.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var journal186 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 27, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(ana.PrintableInvoicesByJournal.journal) ") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/PrintableInvoicesByJournal/journal" }) }) });
    var start_period187 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 27, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(ana.PrintableInvoicesByJournal.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/PrintableInvoicesByJournal/start_period" }) }) });
    var end_period188 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 27, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(ana.PrintableInvoicesByJournal.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/PrintableInvoicesByJournal/end_period" }) }) });
    var state189 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 17, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(ana.PrintableInvoicesByJournal.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    this.items = [ journal186, start_period187, end_period188, state189 ];
    this.fields = [ journal186, start_period187, end_period188, state189 ];
this.callSuper();
  }
});


Lino.tera.Clients.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var nationality191 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Country...", "fieldLabel": "Nationality", "flex": 64, "hidden": false, "hiddenName": "nationalityHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Nationality","(tera.Clients.nationality) ") }, "name": "nationality", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/tera/Clients/nationality" }) }) });
    var client_state192 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 35, "forceSelection": true, "hidden": false, "hiddenName": "client_stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(tera.Clients.client_state) ") }, "name": "client_state", "selectOnFocus": true, "store": [['','']].concat(Lino.coachings.ClientStates), "value": "" });
    var main_1_panel193 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ nationality191, client_state192 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var start_date194 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "flex": 27, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(tera.Clients.start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date195 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 27, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(tera.Clients.end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var observed_event196 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Observed event</span>", "flex": 44, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Observed event","(tera.Clients.observed_event) Extended filter criteria") }, "maxLength": 50, "name": "observed_event", "selectOnFocus": true });
    var main_2_panel197 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date194, end_date195, observed_event196 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel193, main_2_panel197 ];
    this.fields = [ nationality191, client_state192, start_date194, end_date195, observed_event196 ];
this.callSuper();
  }
});


Lino.courses.CoursesByTopic.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 126,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var line199 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity line...", "fieldLabel": "Activity line", "flex": 24, "hidden": false, "hiddenName": "lineHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity line","(courses.CoursesByTopic.line) ") }, "name": "line", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Lines.detail,Lino.courses.Lines.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/CoursesByTopic/line" }) }) });
    var teacher200 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Instructor", "flex": 24, "hidden": false, "hiddenName": "teacherHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Instructor","(courses.CoursesByTopic.teacher) ") }, "name": "teacher", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/CoursesByTopic/teacher" }) }) });
    var user201 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 24, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(courses.CoursesByTopic.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/CoursesByTopic/user" }) }), "value": null });
    var state202 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(courses.CoursesByTopic.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.courses.CourseStates) });
    var can_enroll203 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "can enroll", "flex": 12, "forceSelection": true, "hidden": false, "hiddenName": "can_enrollHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("can enroll","(courses.CoursesByTopic.can_enroll) ") }, "name": "can_enroll", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    this.items = [ line199, teacher200, user201, state202, can_enroll203 ];
    this.fields = [ line199, teacher200, user201, state202, can_enroll203 ];
this.callSuper();
  }
});


Lino.finan.BankStatementsByJournal.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var start_period205 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 27, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(finan.BankStatementsByJournal.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/BankStatementsByJournal/start_period" }) }) });
    var end_period206 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 27, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(finan.BankStatementsByJournal.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/BankStatementsByJournal/end_period" }) }) });
    var state207 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 17, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(finan.BankStatementsByJournal.state) The workflow state of this voucher. Choices are defined in\nVoucherStates") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates), "value": null });
    var user208 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 27, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.BankStatementsByJournal.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/BankStatementsByJournal/user" }) }), "value": null });
    this.items = [ start_period205, end_period206, state207, user208 ];
    this.fields = [ start_period205, end_period206, state207, user208 ];
this.callSuper();
  }
});


Lino.bevats.DeclarationsByJournal.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var start_period210 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 27, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(bevats.DeclarationsByJournal.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/DeclarationsByJournal/start_period" }) }) });
    var end_period211 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 27, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(bevats.DeclarationsByJournal.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/DeclarationsByJournal/end_period" }) }) });
    var state212 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 17, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(bevats.DeclarationsByJournal.state) The workflow state of this voucher. Choices are defined in\nVoucherStates") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates), "value": null });
    var user213 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 27, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(bevats.DeclarationsByJournal.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/DeclarationsByJournal/user" }) }), "value": null });
    this.items = [ start_period210, end_period211, state212, user213 ];
    this.fields = [ start_period210, end_period211, state212, user213 ];
this.callSuper();
  }
});


Lino.ledger.AccountingPeriods.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 108,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var start_date215 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(ledger.AccountingPeriods.start_date) Start date of observed period") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date216 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(ledger.AccountingPeriods.end_date) End date of observed period") }, "name": "end_date", "selectOnFocus": true, "value": null });
    this.items = [ start_date215, end_date216 ];
    this.fields = [ start_date215, end_date216 ];
this.callSuper();
  }
});


Lino.cal.Events.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var start_date218 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "flex": 26, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(cal.Events.start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date219 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 26, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(cal.Events.end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var observed_event220 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Observed event", "flex": 22, "forceSelection": true, "hidden": false, "hiddenName": "observed_eventHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Observed event","(cal.Events.observed_event) ") }, "name": "observed_event", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.EventEvents) });
    var state221 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 26, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(cal.Events.state) Only rows having this state.") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.EntryStates) });
    var main_1_panel222 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date218, end_date219, observed_event220, state221 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var user223 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Managed by</span>", "flex": 17, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Managed by","(cal.Events.user) Only rows managed by this user.") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Events/user" }) }) });
    var assigned_to224 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Assigned to</span>", "flex": 17, "hidden": false, "hiddenName": "assigned_toHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Assigned to","(cal.Events.assigned_to) Only events assigned to this user.") }, "name": "assigned_to", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Events/assigned_to" }) }) });
    var project225 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 17, "hidden": false, "hiddenName": "projectHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(cal.Events.project) ") }, "name": "project", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Events/project" }) }) });
    var event_type226 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Calendar entry type...", "fieldLabel": "Calendar entry type", "flex": 17, "hidden": false, "hiddenName": "event_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Calendar entry type","(cal.Events.event_type) ") }, "name": "event_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.EventTypes.detail,Lino.cal.EventTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Events/event_type" }) }) });
    var room227 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Room...", "fieldLabel": "Room", "flex": 17, "hidden": false, "hiddenName": "roomHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Room","(cal.Events.room) ") }, "name": "room", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.Rooms.detail,Lino.cal.Rooms.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Events/room" }) }) });
    var show_appointments228 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Appointments</span>", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "show_appointmentsHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Appointments","(cal.Events.show_appointments) Whether only appointments should be\nshown.  \"Yes\" means only appointments, \"No\"\nmeans no appointments and leaving it to blank shows both types\nof events.") }, "name": "show_appointments", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    var main_2_panel229 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ user223, assigned_to224, project225, event_type226, room227, show_appointments228 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel222, main_2_panel229 ];
    this.fields = [ start_date218, end_date219, observed_event220, state221, user223, assigned_to224, project225, event_type226, room227, show_appointments228 ];
this.callSuper();
  }
});


Lino.sales.PrintableInvoicesByJournal.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var journal231 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 27, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(sales.PrintableInvoicesByJournal.journal) ") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/PrintableInvoicesByJournal/journal" }) }) });
    var start_period232 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 27, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(sales.PrintableInvoicesByJournal.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/PrintableInvoicesByJournal/start_period" }) }) });
    var end_period233 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 27, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(sales.PrintableInvoicesByJournal.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/PrintableInvoicesByJournal/end_period" }) }) });
    var state234 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 17, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(sales.PrintableInvoicesByJournal.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    this.items = [ journal231, start_period232, end_period233, state234 ];
    this.fields = [ journal231, start_period232, end_period233, state234 ];
this.callSuper();
  }
});


Lino.finan.JournalEntriesByJournal.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var start_period236 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 27, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(finan.JournalEntriesByJournal.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/JournalEntriesByJournal/start_period" }) }) });
    var end_period237 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 27, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(finan.JournalEntriesByJournal.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/JournalEntriesByJournal/end_period" }) }) });
    var state238 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 17, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(finan.JournalEntriesByJournal.state) The workflow state of this voucher. Choices are defined in\nVoucherStates") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates), "value": null });
    var user239 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 27, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.JournalEntriesByJournal.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/JournalEntriesByJournal/user" }) }), "value": null });
    this.items = [ start_period236, end_period237, state238, user239 ];
    this.fields = [ start_period236, end_period237, state238, user239 ];
this.callSuper();
  }
});


Lino.ledger.Movements.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var start_period241 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 24, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(ledger.Movements.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Movements/start_period" }) }) });
    var end_period242 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 24, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(ledger.Movements.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Movements/end_period" }) }) });
    var start_date243 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(ledger.Movements.start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date244 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(ledger.Movements.end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var cleared245 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Show cleared movements", "flex": 18, "forceSelection": true, "hidden": false, "hiddenName": "clearedHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show cleared movements","(ledger.Movements.cleared) ") }, "name": "cleared", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    var main_1_panel246 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_period241, end_period242, start_date243, end_date244, cleared245 ], "labelWidth": 207, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var journal_group247 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Journal group", "flex": 15, "forceSelection": true, "hidden": false, "hiddenName": "journal_groupHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal group","(ledger.Movements.journal_group) ") }, "name": "journal_group", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.JournalGroups) });
    var journal248 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 25, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(ledger.Movements.journal) ") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Movements/journal" }) }) });
    var year249 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Fiscal Year", "flex": 8, "forceSelection": true, "hidden": false, "hiddenName": "yearHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(ledger.Movements.year) ") }, "name": "year", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.FiscalYears) });
    var partner250 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 25, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(ledger.Movements.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Movements/partner" }) }) });
    var account251 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Account...", "fieldLabel": "Account", "flex": 25, "hidden": false, "hiddenName": "accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Account","(ledger.Movements.account) ") }, "name": "account", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Movements/account" }) }) });
    var main_2_panel252 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ journal_group247, journal248, year249, partner250, account251 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel246, main_2_panel252 ];
    this.fields = [ start_period241, end_period242, start_date243, end_date244, cleared245, journal_group247, journal248, year249, partner250, account251 ];
this.callSuper();
  }
});


Lino.vat.IntracomInvoices.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 198,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var partner254 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 18, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(vat.IntracomInvoices.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/IntracomInvoices/partner" }) }) });
    var state255 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 12, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(vat.IntracomInvoices.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    var journal256 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 18, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(vat.IntracomInvoices.journal) ") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/IntracomInvoices/journal" }) }) });
    var start_period257 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 18, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(vat.IntracomInvoices.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/IntracomInvoices/start_period" }) }) });
    var end_period258 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 18, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(vat.IntracomInvoices.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/IntracomInvoices/end_period" }) }) });
    var cleared259 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Show cleared vouchers", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "clearedHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show cleared vouchers","(vat.IntracomInvoices.cleared) ") }, "name": "cleared", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    this.items = [ partner254, state255, journal256, start_period257, end_period258, cleared259 ];
    this.fields = [ partner254, start_period257, end_period258, cleared259 ];
this.callSuper();
  }
});


Lino.ledger.Vouchers.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var journal261 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 21, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(ledger.Vouchers.journal) ") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Vouchers/journal" }) }) });
    var start_period262 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 21, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(ledger.Vouchers.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Vouchers/start_period" }) }) });
    var end_period263 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 21, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(ledger.Vouchers.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Vouchers/end_period" }) }) });
    var state264 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(ledger.Vouchers.state) The workflow state of this voucher. Choices are defined in\nVoucherStates") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates), "value": null });
    var user265 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 21, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(ledger.Vouchers.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Vouchers/user" }) }), "value": null });
    this.items = [ journal261, start_period262, end_period263, state264, user265 ];
    this.fields = [ journal261, start_period262, end_period263, state264, user265 ];
this.callSuper();
  }
});


Lino.sales.Invoices.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 198,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var partner267 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 18, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(sales.Invoices.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/partner" }) }) });
    var state268 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 12, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(sales.Invoices.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    var journal269 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 18, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(sales.Invoices.journal) ") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/journal" }) }) });
    var start_period270 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 18, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(sales.Invoices.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/start_period" }) }) });
    var end_period271 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 18, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(sales.Invoices.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/end_period" }) }) });
    var cleared272 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Show cleared vouchers", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "clearedHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show cleared vouchers","(sales.Invoices.cleared) ") }, "name": "cleared", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    this.items = [ partner267, state268, journal269, start_period270, end_period271, cleared272 ];
    this.fields = [ partner267, state268, journal269, start_period270, end_period271, cleared272 ];
this.callSuper();
  }
});


Lino.ledger.Debtors.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var today274 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Situation on</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Situation on","(ledger.Debtors.today) Date of observation") }, "name": "today", "selectOnFocus": true });
    this.items = [ today274 ];
    this.fields = [ today274 ];
this.callSuper();
  }
});


Lino.faculties.Offers.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  labelWidth: 45,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var user276 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "User", "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("User","(faculties.Offers.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/Offers/user" }) }), "value": null });
    this.items = [ user276 ];
    this.fields = [ user276 ];
this.callSuper();
  }
});


Lino.ledger.GeneralAccountBalances.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 108,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var start_period278 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 50, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(ledger.GeneralAccountBalances.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/GeneralAccountBalances/start_period" }) }) });
    var end_period279 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 50, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(ledger.GeneralAccountBalances.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/GeneralAccountBalances/end_period" }) }) });
    this.items = [ start_period278, end_period279 ];
    this.fields = [ start_period278, end_period279 ];
this.callSuper();
  }
});


Lino.courses.Activities.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var topic281 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Topic...", "fieldLabel": "Topic", "flex": 21, "hidden": false, "hiddenName": "topicHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Topic","(courses.Activities.topic) ") }, "name": "topic", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Topics.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/topic" }) }) });
    var line282 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity line...", "fieldLabel": "Activity line", "flex": 21, "hidden": false, "hiddenName": "lineHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity line","(courses.Activities.line) ") }, "name": "line", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Lines.detail,Lino.courses.Lines.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/line" }) }) });
    var user283 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 21, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(courses.Activities.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/user" }) }), "value": null });
    var teacher284 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Instructor", "flex": 21, "hidden": false, "hiddenName": "teacherHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Instructor","(courses.Activities.teacher) ") }, "name": "teacher", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/teacher" }) }) });
    var state285 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 12, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(courses.Activities.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.courses.CourseStates) });
    var main_1_panel286 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ topic281, line282, user283, teacher284, state285 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var room287 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Room...", "fieldLabel": "Room", "flex": 28, "hidden": false, "hiddenName": "roomHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Room","(courses.Activities.room) ") }, "name": "room", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.Rooms.detail,Lino.cal.Rooms.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/room" }) }), "value": null });
    var can_enroll288 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "can enroll", "flex": 14, "forceSelection": true, "hidden": false, "hiddenName": "can_enrollHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("can enroll","(courses.Activities.can_enroll) ") }, "name": "can_enroll", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    var start_date289 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "flex": 18, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(courses.Activities.start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date290 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 18, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(courses.Activities.end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var show_active291 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Active</span>", "flex": 21, "forceSelection": true, "hidden": false, "hiddenName": "show_activeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Active","(courses.Activities.show_active) Whether to show rows in some active state") }, "name": "show_active", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    var main_2_panel292 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ room287, can_enroll288, start_date289, end_date290, show_active291 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel286, main_2_panel292 ];
    this.fields = [ topic281, line282, user283, teacher284, state285, room287, can_enroll288, start_date289, end_date290, show_active291 ];
this.callSuper();
  }
});


Lino.ledger.AccountingReport.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var start_period294 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 33, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(ledger.AccountingReport.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/AccountingReport/start_period" }) }) });
    var end_period295 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 33, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(ledger.AccountingReport.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/AccountingReport/end_period" }) }) });
    var with_balances296 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Balances", "checked": true, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Balances","(ledger.AccountingReport.with_balances) ") }, "name": "with_balances", "selectOnFocus": true });
    var with_activity297 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Activity", "checked": true, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(ledger.AccountingReport.with_activity) ") }, "name": "with_activity", "selectOnFocus": true });
    var main_1_panel298 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_period294, end_period295, with_balances296, with_activity297 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var with_general299 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "General", "checked": true, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("General","(ledger.AccountingReport.with_general) ") }, "name": "with_general", "selectOnFocus": true });
    var with_sales300 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Sales", "checked": true, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Sales","(ledger.AccountingReport.with_sales) ") }, "name": "with_sales", "selectOnFocus": true });
    var with_purchases301 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Purchases", "checked": true, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Purchases","(ledger.AccountingReport.with_purchases) ") }, "name": "with_purchases", "selectOnFocus": true });
    var with_wages302 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Wages", "checked": true, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Wages","(ledger.AccountingReport.with_wages) ") }, "name": "with_wages", "selectOnFocus": true });
    var with_taxes303 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Taxes", "checked": true, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Taxes","(ledger.AccountingReport.with_taxes) ") }, "name": "with_taxes", "selectOnFocus": true });
    var with_clearings304 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Clearings", "checked": true, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Clearings","(ledger.AccountingReport.with_clearings) ") }, "name": "with_clearings", "selectOnFocus": true });
    var with_bank_po305 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Bank payment orders", "checked": true, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Bank payment orders","(ledger.AccountingReport.with_bank_po) ") }, "name": "with_bank_po", "selectOnFocus": true });
    var main_2_panel306 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ with_general299, with_sales300, with_purchases301, with_wages302, with_taxes303, with_clearings304, with_bank_po305 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel298, main_2_panel306 ];
    this.fields = [ start_period294, end_period295, with_balances296, with_activity297, with_general299, with_sales300, with_purchases301, with_wages302, with_taxes303, with_clearings304, with_bank_po305 ];
this.callSuper();
  }
});


Lino.bevats.Declarations.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var state308 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 17, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(bevats.Declarations.state) The workflow state of this voucher. Choices are defined in\nVoucherStates") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates), "value": null });
    var start_period309 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 27, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(bevats.Declarations.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/Declarations/start_period" }) }) });
    var user310 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 27, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(bevats.Declarations.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/Declarations/user" }) }), "value": null });
    var end_period311 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 27, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(bevats.Declarations.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/Declarations/end_period" }) }) });
    this.items = [ state308, start_period309, user310, end_period311 ];
    this.fields = [ state308, start_period309, user310, end_period311 ];
this.callSuper();
  }
});


Lino.ledger.Creditors.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var today313 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Situation on</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Situation on","(ledger.Creditors.today) Date of observation") }, "name": "today", "selectOnFocus": true });
    this.items = [ today313 ];
    this.fields = [ today313 ];
this.callSuper();
  }
});


Lino.coachings.Coachings.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var start_date315 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(coachings.Coachings.start_date) Start date of observed period") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date316 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(coachings.Coachings.end_date) End date of observed period") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var observed_event317 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Observed event", "flex": 15, "forceSelection": true, "hidden": false, "hiddenName": "observed_eventHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Observed event","(coachings.Coachings.observed_event) ") }, "name": "observed_event", "selectOnFocus": true, "store": [['','']].concat(Lino.system.PeriodEvents) });
    var coached_by318 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Coached by</span>", "flex": 25, "hidden": false, "hiddenName": "coached_byHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Coached by","(coachings.Coachings.coached_by) Nur Begleitungen dieses Benutzers.") }, "name": "coached_by", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/coachings/Coachings/coached_by" }) }) });
    var and_coached_by319 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">and by</span>", "flex": 25, "hidden": false, "hiddenName": "and_coached_byHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("and by","(coachings.Coachings.and_coached_by) ... und auch Begleitungen dieses Benutzers.") }, "name": "and_coached_by", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/coachings/Coachings/and_coached_by" }) }) });
    var main_1_panel320 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date315, end_date316, observed_event317, coached_by318, and_coached_by319 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var primary_coachings321 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Primary coachings</span>", "flex": 27, "forceSelection": true, "hidden": false, "hiddenName": "primary_coachingsHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Primary coachings","(coachings.Coachings.primary_coachings) Accompagnements primaires.") }, "name": "primary_coachings", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    var coaching_type322 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Coaching type...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Coaching type</span>", "flex": 36, "hidden": false, "hiddenName": "coaching_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Coaching type","(coachings.Coachings.coaching_type) Nur Begleitungen dieses Dienstes.") }, "name": "coaching_type", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/coachings/Coachings/coaching_type" }) }) });
    var ending323 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Reason of termination...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reason of termination</span>", "flex": 36, "forceSelection": true, "hidden": false, "hiddenName": "endingHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reason of termination","(coachings.Coachings.ending) Nur Begleitungen mit diesem Beendigungsgrund.") }, "name": "ending", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.coachings.CoachingEndings.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/coachings/Coachings/ending" }) }) });
    var main_2_panel324 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ primary_coachings321, coaching_type322, ending323 ], "labelWidth": 198, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel320, main_2_panel324 ];
    this.fields = [ start_date315, end_date316, observed_event317, coached_by318, and_coached_by319, primary_coachings321, coaching_type322, ending323 ];
this.callSuper();
  }
});


Lino.invoicing.Plans.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  labelWidth: 63,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var user326 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(invoicing.Plans.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/invoicing/Plans/user" }) }), "value": null });
    this.items = [ user326 ];
    this.fields = [ user326 ];
this.callSuper();
  }
});


Lino.ledger.Situation.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var today328 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Situation on</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Situation on","(ledger.Situation.today) Date of observation") }, "name": "today", "selectOnFocus": true });
    this.items = [ today328 ];
    this.fields = [ today328 ];
this.callSuper();
  }
});


Lino.cal.Tasks.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var start_date330 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(cal.Tasks.start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date331 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(cal.Tasks.end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var user332 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Managed by</span>", "flex": 25, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Managed by","(cal.Tasks.user) Only rows managed by this user.") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Tasks/user" }) }) });
    var state333 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 15, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(cal.Tasks.state) Only rows having this state.") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.TaskStates) });
    var project334 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 25, "hidden": false, "hiddenName": "projectHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(cal.Tasks.project) ") }, "name": "project", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Tasks/project" }) }) });
    var main_1_panel335 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date330, end_date331, user332, state333, project334 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel335 ];
    this.fields = [ start_date330, end_date331, user332, state333, project334 ];
this.callSuper();
  }
});


Lino.vat.PrintableInvoicesByJournal.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var journal337 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 27, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(vat.PrintableInvoicesByJournal.journal) ") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/PrintableInvoicesByJournal/journal" }) }) });
    var start_period338 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 27, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(vat.PrintableInvoicesByJournal.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/PrintableInvoicesByJournal/start_period" }) }) });
    var end_period339 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 27, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(vat.PrintableInvoicesByJournal.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/PrintableInvoicesByJournal/end_period" }) }) });
    var state340 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 17, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(vat.PrintableInvoicesByJournal.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    this.items = [ journal337, start_period338, end_period339, state340 ];
    this.fields = [ journal337, start_period338, end_period339, state340 ];
this.callSuper();
  }
});


Lino.ana.Invoices.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 198,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var partner342 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 18, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(ana.Invoices.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/partner" }) }) });
    var state343 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 12, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(ana.Invoices.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    var journal344 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 18, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(ana.Invoices.journal) ") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/journal" }) }) });
    var start_period345 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 18, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(ana.Invoices.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/start_period" }) }) });
    var end_period346 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 18, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(ana.Invoices.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/end_period" }) }) });
    var cleared347 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Show cleared vouchers", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "clearedHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show cleared vouchers","(ana.Invoices.cleared) ") }, "name": "cleared", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    this.items = [ partner342, state343, journal344, start_period345, end_period346, cleared347 ];
    this.fields = [ partner342, state343, journal344, start_period345, end_period346, cleared347 ];
this.callSuper();
  }
});


Lino.cal.OneEvent.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  border: false,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'form',
  autoHeight: true,
  initComponent : function() {
    var start_date349 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "flex": 26, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(cal.OneEvent.start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true, "value": null });
    var end_date350 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "flex": 26, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(cal.OneEvent.end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true, "value": null });
    var observed_event351 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Observed event", "flex": 22, "forceSelection": true, "hidden": false, "hiddenName": "observed_eventHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Observed event","(cal.OneEvent.observed_event) ") }, "name": "observed_event", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.EventEvents) });
    var state352 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 26, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(cal.OneEvent.state) Only rows having this state.") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.EntryStates) });
    var main_1_panel353 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date349, end_date350, observed_event351, state352 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var user354 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Managed by</span>", "flex": 17, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Managed by","(cal.OneEvent.user) Only rows managed by this user.") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/OneEvent/user" }) }) });
    var assigned_to355 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Assigned to</span>", "flex": 17, "hidden": false, "hiddenName": "assigned_toHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Assigned to","(cal.OneEvent.assigned_to) Only events assigned to this user.") }, "name": "assigned_to", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/OneEvent/assigned_to" }) }) });
    var project356 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 17, "hidden": false, "hiddenName": "projectHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(cal.OneEvent.project) ") }, "name": "project", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/OneEvent/project" }) }) });
    var event_type357 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Calendar entry type...", "fieldLabel": "Calendar entry type", "flex": 17, "hidden": false, "hiddenName": "event_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Calendar entry type","(cal.OneEvent.event_type) ") }, "name": "event_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.EventTypes.detail,Lino.cal.EventTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/OneEvent/event_type" }) }) });
    var room358 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Room...", "fieldLabel": "Room", "flex": 17, "hidden": false, "hiddenName": "roomHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Room","(cal.OneEvent.room) ") }, "name": "room", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.Rooms.detail,Lino.cal.Rooms.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/OneEvent/room" }) }) });
    var show_appointments359 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Appointments</span>", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "show_appointmentsHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Appointments","(cal.OneEvent.show_appointments) Whether only appointments should be\nshown.  \"Yes\" means only appointments, \"No\"\nmeans no appointments and leaving it to blank shows both types\nof events.") }, "name": "show_appointments", "selectOnFocus": true, "store": [['','']].concat(Lino.system.YesNo) });
    var main_2_panel360 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ user354, assigned_to355, project356, event_type357, room358, show_appointments359 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel353, main_2_panel360 ];
    this.fields = [ start_date349, end_date350, observed_event351, state352, user354, assigned_to355, project356, event_type357, room358, show_appointments359 ];
this.callSuper();
  }
});


Lino.finan.FinancialVouchers.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 108,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var pjournal362 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "Journal", "flex": 74, "hidden": false, "hiddenName": "pjournalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(finan.FinancialVouchers.pjournal) ") }, "name": "pjournal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/FinancialVouchers/pjournal" }) }) });
    var pyear363 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Fiscal Year", "flex": 25, "forceSelection": true, "hidden": false, "hiddenName": "pyearHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(finan.FinancialVouchers.pyear) ") }, "name": "pyear", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.FiscalYears) });
    this.items = [ pjournal362, pyear363 ];
    this.fields = [ pjournal362, pyear363 ];
this.callSuper();
  }
});


Lino.ana.InvoicesByJournal.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 108,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var partner365 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 50, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(ana.InvoicesByJournal.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/InvoicesByJournal/partner" }) }) });
    var state366 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 32, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(ana.InvoicesByJournal.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    var year367 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Fiscal Year", "flex": 17, "forceSelection": true, "hidden": false, "hiddenName": "yearHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Fiscal Year","(ana.InvoicesByJournal.year) ") }, "name": "year", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.FiscalYears) });
    this.items = [ partner365, state366, year367 ];
    this.fields = [ partner365, state366, year367 ];
this.callSuper();
  }
});


Lino.vat.InvoicesByJournal.ParamsPanel = Ext.extend(Ext.form.FormPanel, {
  scrollable: false,
  autoHeight: true,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: 'hbox',
  autoHeight: true,
  initComponent : function() {
    var partner369 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 21, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(vat.InvoicesByJournal.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/InvoicesByJournal/partner" }) }) });
    var state370 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "State", "flex": 13, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(vat.InvoicesByJournal.state) ") }, "name": "state", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.VoucherStates) });
    var start_period371 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period from</span>", "flex": 21, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period from","(vat.InvoicesByJournal.start_period) Start of observed period range") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/InvoicesByJournal/start_period" }) }) });
    var end_period372 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Period until</span>", "flex": 21, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Period until","(vat.InvoicesByJournal.end_period) Optional end of observed period range. Leave empty to consider only the Start period.") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/InvoicesByJournal/end_period" }) }) });
    var user373 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 21, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(vat.InvoicesByJournal.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/InvoicesByJournal/user" }) }), "value": null });
    this.items = [ partner369, state370, start_period371, end_period372, user373 ];
    this.fields = [ partner369, state370, start_period371, end_period372, user373 ];
this.callSuper();
  }
});


Ext.define('Lino.ana.Invoices.make_copy_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 81,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'make_copy',
  ls_url: "/ana/Invoices",
  window_title: "Make copy",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.entry_date56 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "Entry date", "flex": 39, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(Make copy.entry_date) ") }, "name": "entry_date", "selectOnFocus": true });
    this.partner57 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 60, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(Make copy.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/ana/Invoices/make_copy/partner" }) }) });
    var main_1_panel58 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.entry_date56, this.partner57 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.your_ref59 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Your ref", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Your ref","(Make copy.your_ref) ") }, "maxLength": 200, "name": "your_ref", "selectOnFocus": true });
    this.subject60 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Subject", "flex": 63, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Subject","(Make copy.subject) ") }, "maxLength": 200, "name": "subject", "selectOnFocus": true });
    this.total_incl61 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total incl VAT", "flex": 36, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total incl VAT","(Make copy.total_incl) ") }, "name": "total_incl", "selectOnFocus": true });
    var main_3_panel62 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.subject60, this.total_incl61 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.account63 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Account...", "fieldLabel": "Account", "flex": 50, "hidden": false, "hiddenName": "accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Account","(Make copy.account) ") }, "name": "account", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/ana/Invoices/make_copy/account" }) }) });
    this.ana_account64 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Analytical account...", "fieldLabel": "Analytical account", "flex": 50, "hidden": false, "hiddenName": "ana_accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Analytical account","(Make copy.ana_account) ") }, "name": "ana_account", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ana.Accounts.detail,Lino.ana.Accounts.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/ana/Invoices/make_copy/ana_account" }) }) });
    var main_4_panel65 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.account63, this.ana_account64 ], "labelWidth": 171, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel58, this.your_ref59, main_3_panel62, main_4_panel65 ];
    this.fields = [ this.entry_date56, this.partner57, this.your_ref59, this.subject60, this.total_incl61, this.account63, this.ana_account64 ];
this.callSuper();
  }
});


Ext.define('Lino.tera.Clients.merge_row_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 72,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'merge_row',
  ls_url: "/tera/Clients",
  window_title: "Merge",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.merge_to67 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Client...", "fieldLabel": "into...", "hidden": false, "hiddenName": "merge_toHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("into...","(Merge.merge_to) ") }, "name": "merge_to", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.tera.Clients.detail,Lino.tera.Clients.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/tera/Clients/merge_row/merge_to" }) }) });
    this.faculties_Competence68 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Skill offers", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Skill offers","(Merge.faculties_Competence) ") }, "name": "faculties_Competence", "selectOnFocus": true });
    this.faculties_Demand69 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Skill demands", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Skill demands","(Merge.faculties_Demand) ") }, "name": "faculties_Demand", "selectOnFocus": true });
    var keep_volatiles_1_panel70 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.faculties_Competence68, this.faculties_Demand69 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.coachings_Coaching71 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Coachings", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Coachings","(Merge.coachings_Coaching) ") }, "name": "coachings_Coaching", "selectOnFocus": true });
    this.courses_Course72 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Activities", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activities","(Merge.courses_Course) ") }, "name": "courses_Course", "selectOnFocus": true });
    var keep_volatiles_2_panel73 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.coachings_Coaching71, this.courses_Course72 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.sepa_Account74 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Bank accounts", "checked": false, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Bank accounts","(Merge.sepa_Account) ") }, "name": "sepa_Account", "selectOnFocus": true });
    var keep_volatiles_panel75 = Ext.create('Ext.form.FieldSet',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ keep_volatiles_1_panel70, keep_volatiles_2_panel73, this.sepa_Account74 ], "labelWidth": 126, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "title": "Also reassign volatile related objects" });
    this.reason76 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Reason", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reason","(Merge.reason) ") }, "maxLength": 100, "name": "reason", "selectOnFocus": true });
    this.items = [ this.merge_to67, keep_volatiles_panel75, this.reason76 ];
    this.fields = [ this.merge_to67, this.faculties_Competence68, this.faculties_Demand69, this.coachings_Coaching71, this.courses_Course72, this.sepa_Account74, this.reason76 ];
this.callSuper();
  }
});


Ext.define('Lino.households.Households.merge_row_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 72,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'merge_row',
  ls_url: "/households/Households",
  window_title: "Merge",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.merge_to37 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Household...", "fieldLabel": "into...", "hidden": false, "hiddenName": "merge_toHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("into...","(Merge.merge_to) ") }, "name": "merge_to", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.households.Households.detail,Lino.households.Households.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/households/Households/merge_row/merge_to" }) }) });
    this.households_Member38 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Household Members", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Household Members","(Merge.households_Member) ") }, "name": "households_Member", "selectOnFocus": true });
    this.coachings_Coaching39 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Coachings", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Coachings","(Merge.coachings_Coaching) ") }, "name": "coachings_Coaching", "selectOnFocus": true });
    var keep_volatiles_1_panel40 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.households_Member38, this.coachings_Coaching39 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.courses_Course41 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Activities", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activities","(Merge.courses_Course) ") }, "name": "courses_Course", "selectOnFocus": true });
    this.sepa_Account42 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Bank accounts", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Bank accounts","(Merge.sepa_Account) ") }, "name": "sepa_Account", "selectOnFocus": true });
    var keep_volatiles_2_panel43 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.courses_Course41, this.sepa_Account42 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var keep_volatiles_panel44 = Ext.create('Ext.form.FieldSet',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ keep_volatiles_1_panel40, keep_volatiles_2_panel43 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "title": "Also reassign volatile related objects" });
    this.reason45 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Reason", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reason","(Merge.reason) ") }, "maxLength": 100, "name": "reason", "selectOnFocus": true });
    this.items = [ this.merge_to37, keep_volatiles_panel44, this.reason45 ];
    this.fields = [ this.merge_to37, this.households_Member38, this.coachings_Coaching39, this.courses_Course41, this.sepa_Account42, this.reason45 ];
this.callSuper();
  }
});


Ext.define('Lino.contacts.Persons.create_household_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 162,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'create_household',
  ls_url: "/contacts/Persons",
  window_title: "Create Household",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.partner25 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "Partner", "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(Create Household.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/contacts/Persons/create_household/partner" }) }) });
    this.type26 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Household Type...", "fieldLabel": "Household Type", "hidden": false, "hiddenName": "typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Household Type","(Create Household.type) ") }, "name": "type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.households.Types.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/contacts/Persons/create_household/type" }) }) });
    this.head27 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Person...", "fieldLabel": "Head of household", "hidden": false, "hiddenName": "headHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Head of household","(Create Household.head) ") }, "name": "head", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/contacts/Persons/create_household/head" }) }) });
    this.items = [ this.partner25, this.type26, this.head27 ];
    this.fields = [ this.partner25, this.type26, this.head27 ];
this.callSuper();
  }
});


Ext.define('Lino.courses.Activities.print_presence_sheet_html_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'print_presence_sheet_html',
  ls_url: "/courses/Activities",
  window_title: "Presence sheet (HTML)",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.start_date78 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(Presence sheet (HTML).start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true });
    this.end_date79 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(Presence sheet (HTML).end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true });
    this.show_remarks80 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Show remarks", "checked": false, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show remarks","(Presence sheet (HTML).show_remarks) ") }, "name": "show_remarks", "selectOnFocus": true });
    this.show_states81 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Show states", "checked": true, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show states","(Presence sheet (HTML).show_states) ") }, "name": "show_states", "selectOnFocus": true });
    this.items = [ this.start_date78, this.end_date79, this.show_remarks80, this.show_states81 ];
    this.fields = [ this.start_date78, this.end_date79, this.show_remarks80, this.show_states81 ];
this.callSuper();
  }
});


Ext.define('Lino.sales.Invoices.make_copy_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 81,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'make_copy',
  ls_url: "/sales/Invoices",
  window_title: "Make copy",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.entry_date47 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "Entry date", "flex": 39, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(Make copy.entry_date) ") }, "name": "entry_date", "selectOnFocus": true });
    this.partner48 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 60, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(Make copy.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/sales/Invoices/make_copy/partner" }) }) });
    var main_1_panel49 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.entry_date47, this.partner48 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.your_ref50 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Your ref", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Your ref","(Make copy.your_ref) ") }, "maxLength": 200, "name": "your_ref", "selectOnFocus": true });
    this.subject51 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Subject", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Subject","(Make copy.subject) ") }, "maxLength": 200, "name": "subject", "selectOnFocus": true });
    this.product52 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff...", "fieldLabel": "Tariff", "flex": 62, "hidden": false, "hiddenName": "productHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Tariff","(Make copy.product) ") }, "name": "product", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.Products.detail,Lino.products.Products.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/sales/Invoices/make_copy/product" }) }) });
    this.total_incl53 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total incl VAT", "flex": 37, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total incl VAT","(Make copy.total_incl) ") }, "name": "total_incl", "selectOnFocus": true });
    var main_4_panel54 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.product52, this.total_incl53 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.items = [ main_1_panel49, this.your_ref50, this.subject51, main_4_panel54 ];
    this.fields = [ this.entry_date47, this.partner48, this.your_ref50, this.subject51, this.product52, this.total_incl53 ];
this.callSuper();
  }
});


Ext.define('Lino.users.Users.change_password_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 171,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'change_password',
  ls_url: "/users/Users",
  window_title: "Change password",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.current1 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Current password", "hidden": false, "inputType": "password", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Current password","(Change password.current) ") }, "maxLength": null, "name": "current", "selectOnFocus": true });
    this.new12 = Ext.create('Ext.form.TextField',{ "fieldLabel": "New password", "hidden": false, "inputType": "password", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("New password","(Change password.new1) ") }, "maxLength": null, "name": "new1", "selectOnFocus": true });
    this.new23 = Ext.create('Ext.form.TextField',{ "fieldLabel": "New password again", "hidden": false, "inputType": "password", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("New password again","(Change password.new2) ") }, "maxLength": null, "name": "new2", "selectOnFocus": true });
    this.items = [ this.current1, this.new12, this.new23 ];
    this.fields = [ this.current1, this.new12, this.new23 ];
this.callSuper();
  }
});


Ext.define('Lino.countries.Places.merge_row_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 72,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'merge_row',
  ls_url: "/countries/Places",
  window_title: "Merge",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.merge_to11 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Place...", "fieldLabel": "into...", "hidden": false, "hiddenName": "merge_toHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("into...","(Merge.merge_to) ") }, "name": "merge_to", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/countries/Places/merge_row/merge_to" }) }) });
    this.reason12 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Reason", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reason","(Merge.reason) ") }, "maxLength": 100, "name": "reason", "selectOnFocus": true });
    this.items = [ this.merge_to11, this.reason12 ];
    this.fields = [ this.merge_to11, this.reason12 ];
this.callSuper();
  }
});


Ext.define('Lino.users.AllUsers.send_welcome_email_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 135,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'send_welcome_email',
  ls_url: "/users/AllUsers",
  window_title: "Welcome mail",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.email5 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "e-mail address", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(Welcome mail.email) ") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    this.subject6 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Subject", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Subject","(Welcome mail.subject) ") }, "maxLength": 250, "name": "subject", "selectOnFocus": true });
    this.items = [ this.email5, this.subject6 ];
    this.fields = [ this.email5, this.subject6 ];
this.callSuper();
  }
});


Ext.define('Lino.contacts.Persons.merge_row_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 72,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'merge_row',
  ls_url: "/contacts/Persons",
  window_title: "Merge",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.merge_to14 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Person...", "fieldLabel": "into...", "hidden": false, "hiddenName": "merge_toHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("into...","(Merge.merge_to) ") }, "name": "merge_to", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/contacts/Persons/merge_row/merge_to" }) }) });
    this.faculties_Competence15 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Skill offers", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Skill offers","(Merge.faculties_Competence) ") }, "name": "faculties_Competence", "selectOnFocus": true });
    this.faculties_Demand16 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Skill demands", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Skill demands","(Merge.faculties_Demand) ") }, "name": "faculties_Demand", "selectOnFocus": true });
    var keep_volatiles_1_panel17 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.faculties_Competence15, this.faculties_Demand16 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.coachings_Coaching18 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Coachings", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Coachings","(Merge.coachings_Coaching) ") }, "name": "coachings_Coaching", "selectOnFocus": true });
    this.courses_Course19 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Activities", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activities","(Merge.courses_Course) ") }, "name": "courses_Course", "selectOnFocus": true });
    var keep_volatiles_2_panel20 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.coachings_Coaching18, this.courses_Course19 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.sepa_Account21 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Bank accounts", "checked": false, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Bank accounts","(Merge.sepa_Account) ") }, "name": "sepa_Account", "selectOnFocus": true });
    var keep_volatiles_panel22 = Ext.create('Ext.form.FieldSet',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ keep_volatiles_1_panel17, keep_volatiles_2_panel20, this.sepa_Account21 ], "labelWidth": 126, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "title": "Also reassign volatile related objects" });
    this.reason23 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Reason", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reason","(Merge.reason) ") }, "maxLength": 100, "name": "reason", "selectOnFocus": true });
    this.items = [ this.merge_to14, keep_volatiles_panel22, this.reason23 ];
    this.fields = [ this.merge_to14, this.faculties_Competence15, this.faculties_Demand16, this.coachings_Coaching18, this.courses_Course19, this.sepa_Account21, this.reason23 ];
this.callSuper();
  }
});


Ext.define('Lino.courses.Activities.print_presence_sheet_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 117,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'print_presence_sheet',
  ls_url: "/courses/Activities",
  window_title: "Presence sheet",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.start_date83 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Date from</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date from","(Presence sheet.start_date) Start of observed date range") }, "name": "start_date", "selectOnFocus": true });
    this.end_date84 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">until</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(Presence sheet.end_date) End of observed date range") }, "name": "end_date", "selectOnFocus": true });
    this.show_remarks85 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Show remarks", "checked": false, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show remarks","(Presence sheet.show_remarks) ") }, "name": "show_remarks", "selectOnFocus": true });
    this.show_states86 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Show states", "checked": true, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Show states","(Presence sheet.show_states) ") }, "name": "show_states", "selectOnFocus": true });
    this.items = [ this.start_date83, this.end_date84, this.show_remarks85, this.show_states86 ];
    this.fields = [ this.start_date83, this.end_date84, this.show_remarks85, this.show_states86 ];
this.callSuper();
  }
});


Ext.define('Lino.users.UsersOverview.sign_in_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 81,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'sign_in',
  ls_url: "/users/UsersOverview",
  window_title: "Sign in",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.username8 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Username", "hidden": false, "labelAlign": "left", "listeners": { "render": Lino.quicktip_renderer("Username","(Sign in.username) ") }, "maxLength": null, "name": "username", "selectOnFocus": true });
    this.password9 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Password", "hidden": false, "inputType": "password", "labelAlign": "left", "listeners": { "render": Lino.quicktip_renderer("Password","(Sign in.password) ") }, "maxLength": null, "name": "password", "selectOnFocus": true });
    this.items = [ this.username8, this.password9 ];
    this.fields = [ this.username8, this.password9 ];
this.callSuper();
  }
});


Ext.define('Lino.contacts.Companies.merge_row_ActionFormPanel' , { extend : 'Lino.ActionFormPanel',
  scrollable: false,
  border: false,
  labelWidth: 72,
  hideCheckBoxLabels: true,
  frame: true,
  bodyBorder: false,
  layout: { "align": "stretch", "type": "vbox" },
  action_name: 'merge_row',
  ls_url: "/contacts/Companies",
  window_title: "Merge",
  before_row_edit : function(record) {
  },
  autoHeight: true,
  initComponent : function() {
    this.merge_to29 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Organization...", "fieldLabel": "into...", "hidden": false, "hiddenName": "merge_toHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("into...","(Merge.merge_to) ") }, "name": "merge_to", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/apchoices/contacts/Companies/merge_row/merge_to" }) }) });
    this.coachings_Coaching30 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Coachings", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Coachings","(Merge.coachings_Coaching) ") }, "name": "coachings_Coaching", "selectOnFocus": true });
    this.courses_Course31 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Activities", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activities","(Merge.courses_Course) ") }, "name": "courses_Course", "selectOnFocus": true });
    var keep_volatiles_1_panel32 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ this.coachings_Coaching30, this.courses_Course31 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    this.sepa_Account33 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Bank accounts", "checked": false, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Bank accounts","(Merge.sepa_Account) ") }, "name": "sepa_Account", "selectOnFocus": true });
    var keep_volatiles_panel34 = Ext.create('Ext.form.FieldSet',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ keep_volatiles_1_panel32, this.sepa_Account33 ], "labelWidth": 126, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "title": "Also reassign volatile related objects" });
    this.reason35 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Reason", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reason","(Merge.reason) ") }, "maxLength": 100, "name": "reason", "selectOnFocus": true });
    this.items = [ this.merge_to29, keep_volatiles_panel34, this.reason35 ];
    this.fields = [ this.merge_to29, this.coachings_Coaching30, this.courses_Course31, this.sepa_Account33, this.reason35 ];
this.callSuper();
  }
});


Ext.define('Lino.ana.InvoicesByJournal.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 70,
  default_record_id: -99999,
  initComponent : function() {
    var partner375 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(ana.InvoicesByJournal.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/InvoicesByJournal/partner" }) }) });
    var entry_date376 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 52, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(ana.InvoicesByJournal.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var total_incl377 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total incl. VAT", "flex": 48, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(ana.InvoicesByJournal.total_incl) ") }, "name": "total_incl", "selectOnFocus": true });
    var main_2_panel378 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ entry_date376, total_incl377 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel379 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ partner375, main_2_panel378 ], "labelWidth": 72, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel379;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.EnrolmentsByCourse.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 58,
  default_record_id: -99999,
  initComponent : function() {
    var pupil380 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Person...", "fieldLabel": "Person", "forceSelection": false, "hidden": false, "hiddenName": "pupilHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Person","(courses.EnrolmentsByCourse.pupil) ") }, "name": "pupil", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/EnrolmentsByCourse/pupil" }) }) });
    var remark381 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Remark", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(courses.EnrolmentsByCourse.remark) ") }, "maxLength": 200, "name": "remark", "selectOnFocus": true });
    var request_date382 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "Date of request", "flex": 39, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date of request","(courses.EnrolmentsByCourse.request_date) ") }, "name": "request_date", "selectOnFocus": true });
    var user383 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 60, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(courses.EnrolmentsByCourse.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/EnrolmentsByCourse/user" }) }) });
    var main_3_panel384 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ request_date382, user383 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel385 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ pupil380, remark381, main_3_panel384 ], "labelWidth": 63, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel385;
    this.before_row_edit = function(record) {
      var bp = this.get_base_params();
      pupil380.setContextValue('mk',bp['mk']);
      pupil380.setContextValue('mt',bp['mt']);
    }
  this.callSuper();
  }
});


Ext.define('Lino.finan.PaymentOrders.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 68,
  initComponent : function() {
    var entry_date386 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 17, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(finan.PaymentOrders.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var number387 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "flex": 8, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(finan.PaymentOrders.number) The sequence number of this voucher in the journal.") }, "name": "number", "selectOnFocus": true });
    var total388 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Total</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total","(finan.PaymentOrders.total) The total amount. This is automatically computed when you register\nde voucher.") }, "name": "total", "selectOnFocus": true });
    var execution_date389 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Execution date</span>", "flex": 17, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Execution date","(finan.PaymentOrders.execution_date) The execution date of payment order. If this is empty, Lino\nassumes the entry_date when writing the\npain_001.xml file.") }, "name": "execution_date", "selectOnFocus": true });
    var workflow_buttons_disp390 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 40, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(finan.PaymentOrders.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var general_1_panel391 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ entry_date386, number387, total388, execution_date389, workflow_buttons_disp390 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var narration392 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Narration</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Narration","(finan.PaymentOrders.narration) A short explanation which ascertains the subject matter of\nthis journal entry.") }, "maxLength": 200, "name": "narration", "selectOnFocus": true });
    var general_panel394 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel391, narration392 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var journal395 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Journal...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal</span>", "flex": 30, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(finan.PaymentOrders.journal) The journal into which this voucher has been booked. This is a\nmandatory pointer to a Journal instance.") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/PaymentOrders/journal" }) }) });
    var accounting_period396 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Accounting period</span>", "flex": 30, "hidden": false, "hiddenName": "accounting_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Accounting period","(finan.PaymentOrders.accounting_period) The accounting period and fiscal year to which this entry is\nto be assigned to. The default value is determined from\nentry_date.") }, "name": "accounting_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/PaymentOrders/accounting_period" }) }) });
    var user397 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 30, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.PaymentOrders.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/PaymentOrders/user" }) }) });
    var id398 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(finan.PaymentOrders.id) ") }, "name": "id", "readOnly": true });
    var more_1_panel399 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ journal395, accounting_period396, user397, id398 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var item_account400 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Account...", "fieldLabel": "Default account", "flex": 48, "hidden": false, "hiddenName": "item_accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Default account","(finan.PaymentOrders.item_account) ") }, "name": "item_account", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/PaymentOrders/item_account" }) }) });
    var item_remark401 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Your reference", "flex": 51, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Your reference","(finan.PaymentOrders.item_remark) ") }, "maxLength": 200, "name": "item_remark", "selectOnFocus": true });
    var more_2_panel402 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ item_account400, item_remark401 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var more_panel404 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ more_1_panel399, more_2_panel402 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "More" });
    var main_panel405 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel394, more_panel404 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel405;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.finan.BankStatements.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 65,
  initComponent : function() {
    var entry_date406 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 17, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(finan.BankStatements.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var number407 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "flex": 8, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(finan.BankStatements.number) The sequence number of this voucher in the journal.") }, "name": "number", "selectOnFocus": true });
    var balance1408 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Old balance</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Old balance","(finan.BankStatements.balance1) The old (or start) balance.") }, "name": "balance1", "selectOnFocus": true, "value": 0 });
    var balance2409 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">New balance</span>", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("New balance","(finan.BankStatements.balance2) The new (or end) balance.") }, "name": "balance2", "selectOnFocus": true, "value": 0 });
    var workflow_buttons_disp410 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 41, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(finan.BankStatements.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var general_1_panel411 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ entry_date406, number407, balance1408, balance2409, workflow_buttons_disp410 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var general_panel413 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel411 ], "labelWidth": 72, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var journal414 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Journal...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal</span>", "flex": 30, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(finan.BankStatements.journal) The journal into which this voucher has been booked. This is a\nmandatory pointer to a Journal instance.") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/BankStatements/journal" }) }) });
    var accounting_period415 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Accounting period</span>", "flex": 30, "hidden": false, "hiddenName": "accounting_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Accounting period","(finan.BankStatements.accounting_period) The accounting period and fiscal year to which this entry is\nto be assigned to. The default value is determined from\nentry_date.") }, "name": "accounting_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/BankStatements/accounting_period" }) }) });
    var user416 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 30, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.BankStatements.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/BankStatements/user" }) }) });
    var id417 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(finan.BankStatements.id) ") }, "name": "id", "readOnly": true });
    var more_1_panel418 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ journal414, accounting_period415, user416, id417 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var item_account419 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Account...", "fieldLabel": "Default account", "flex": 48, "hidden": false, "hiddenName": "item_accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Default account","(finan.BankStatements.item_account) ") }, "name": "item_account", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/BankStatements/item_account" }) }) });
    var item_remark420 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Your reference", "flex": 51, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Your reference","(finan.BankStatements.item_remark) ") }, "maxLength": 200, "name": "item_remark", "selectOnFocus": true });
    var more_2_panel421 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ item_account419, item_remark420 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var more_panel423 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ more_1_panel418, more_2_panel421 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "More" });
    var main_panel424 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel413, more_panel423 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel424;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.topics.TopicGroups.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 74,
  initComponent : function() {
    var id425 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(topics.TopicGroups.id) ") }, "name": "id", "readOnly": true });
    var name426 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(topics.TopicGroups.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr427 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(topics.TopicGroups.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de428 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(topics.TopicGroups.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel429 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id425, name426, name_fr427, name_de428 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var description430 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description", "flex": 5, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description","(topics.TopicGroups.description) ") }, "name": "description", "region": "center", "selectOnFocus": true, "split": true });
    var main_panel475 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel429, description430 ], "labelWidth": 108, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel475;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.ana.Invoices.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 70,
  default_record_id: -99999,
  initComponent : function() {
    var journal476 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Journal...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal</span>", "flex": 50, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(ana.Invoices.journal) The journal into which this voucher has been booked. This is a\nmandatory pointer to a Journal instance.") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/journal" }) }) });
    var partner477 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 50, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(ana.Invoices.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/partner" }) }) });
    var main_1_panel478 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ journal476, partner477 ], "labelWidth": 72, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var entry_date479 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 52, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(ana.Invoices.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var total_incl480 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total incl. VAT", "flex": 48, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(ana.Invoices.total_incl) ") }, "name": "total_incl", "selectOnFocus": true });
    var main_2_panel481 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ entry_date479, total_incl480 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel482 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel478, main_2_panel481 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel482;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.products.Products.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 28,
  default_record_id: -99999,
  initComponent : function() {
    var cat483 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff Category...", "fieldLabel": "Category", "hidden": false, "hiddenName": "catHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Category","(products.Products.cat) ") }, "name": "cat", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.ProductCats.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/products/Products/cat" }) }) });
    var name484 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(products.Products.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr485 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(products.Products.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de486 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(products.Products.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_2_panel487 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name484, name_fr485, name_de486 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel488 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ cat483, main_2_panel487 ], "labelWidth": 81, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel488;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.ana.Groups.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 72,
  initComponent : function() {
    var ref489 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(ana.Groups.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var designation490 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(ana.Groups.designation) ") }, "maxLength": 200, "name": "designation", "selectOnFocus": true });
    var designation_fr491 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(ana.Groups.designation_fr) ") }, "maxLength": 200, "name": "designation_fr", "selectOnFocus": true });
    var designation_de492 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(ana.Groups.designation_de) ") }, "maxLength": 200, "name": "designation_de", "selectOnFocus": true });
    var id493 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 5, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(ana.Groups.id) ") }, "name": "id", "readOnly": true });
    var main_1_panel494 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref489, designation490, designation_fr491, designation_de492, id493 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel548 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel494 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel548;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.faculties.Offers.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 83,
  initComponent : function() {
    var user549 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "User", "flex": 50, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("User","(faculties.Offers.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/Offers/user" }) }) });
    var end_user550 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "End user", "flex": 50, "hidden": false, "hiddenName": "end_userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End user","(faculties.Offers.end_user) ") }, "name": "end_user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/Offers/end_user" }) }) });
    var main_1_panel551 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ user549, end_user550 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var faculty552 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Skill...", "fieldLabel": "Skill", "flex": 80, "hidden": false, "hiddenName": "facultyHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Skill","(faculties.Offers.faculty) ") }, "name": "faculty", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.faculties.Skills.detail,Lino.faculties.Skills.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/Offers/faculty" }) }) });
    var affinity553 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Affinity</span>", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Affinity","(faculties.Offers.affinity) How much this user likes to get a new ticket in this faculty.A number between -100 and +100.") }, "name": "affinity", "selectOnFocus": true, "value": 100 });
    var main_2_panel554 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ faculty552, affinity553 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var description555 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description", "flex": 71, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description","(faculties.Offers.description) ") }, "name": "description", "selectOnFocus": true });
    var main_panel556 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel551, main_2_panel554, description555 ], "labelWidth": 108, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel556;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.excerpts.ExcerptTypes.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 86,
  default_record_id: -99999,
  initComponent : function() {
    var name557 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Designation</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(excerpts.ExcerptTypes.name) The designation of this excerpt type.\nOne field for every language.") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr558 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(excerpts.ExcerptTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de559 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(excerpts.ExcerptTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel560 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name557, name_fr558, name_de559 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var content_type561 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a content type...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Model</span>", "flex": 50, "hidden": false, "hiddenName": "content_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Model","(excerpts.ExcerptTypes.content_type) The model that can issue printouts of this type.") }, "name": "content_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.gfks.ContentTypes.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/ExcerptTypes/content_type" }) }) });
    var primary562 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Primary", "checked": false, "flex": 25, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Primary","(excerpts.ExcerptTypes.primary) Whether this is the default type to use for this model. There's at most one primary type per model. Enabling this field will automatically make the other types non-primary.") }, "name": "primary", "selectOnFocus": true });
    var certifying563 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Certifying", "checked": false, "flex": 25, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Certifying","(excerpts.ExcerptTypes.certifying) Whether an excerpt of this type is a unique printout.") }, "name": "certifying", "selectOnFocus": true });
    var main_2_panel564 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ content_type561, primary562, certifying563 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var build_method565 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Build method</span>", "flex": 53, "forceSelection": true, "hidden": false, "hiddenName": "build_methodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Build method","(excerpts.ExcerptTypes.build_method) See lino.modlib.printing.mixins.PrintableType.build_method.") }, "name": "build_method", "selectOnFocus": true, "store": [['','']].concat(Lino.printing.BuildMethods) });
    var template566 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Template</span>", "flex": 23, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Template","(excerpts.ExcerptTypes.template) The main template to be used when printing an excerpt of this type.") }, "name": "template", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/ExcerptTypes/template" }) }) });
    var body_template567 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Body template</span>", "flex": 23, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Body template","(excerpts.ExcerptTypes.body_template) The body template to be used when         rendering a printable of this type. This is a list of files         with extension `.body.html`.") }, "name": "body_template", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/ExcerptTypes/body_template" }) }) });
    var main_3_panel568 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ build_method565, template566, body_template567 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel569 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel560, main_2_panel564, main_3_panel568 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel569;
    this.before_row_edit = function(record) {
      template566.setContextValue('build_method', record ? record.data['build_methodHidden'] : undefined);
      template566.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
      body_template567.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      build_method565.on('change',Lino.chooser_handler(template566,'build_method'));
      content_type561.on('change',Lino.chooser_handler(template566,'content_type'));
      content_type561.on('change',Lino.chooser_handler(body_template567,'content_type'));
      Lino.excerpts.ExcerptTypes.InsertFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Topics.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 59,
  initComponent : function() {
    var id570 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(courses.Topics.id) ") }, "name": "id", "readOnly": true });
    var name571 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(courses.Topics.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr572 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(courses.Topics.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de573 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(courses.Topics.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel574 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id570, name571, name_fr572, name_de573 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var main_panel924 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel574 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel924;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Lines.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 61,
  initComponent : function() {
    var id604 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 5, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(courses.Lines.id) ") }, "name": "id", "readOnly": true });
    var name605 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Designation</span>", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(courses.Lines.name) The designation of this activity line as seen by the user\ne.g. when selecting the line.") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr606 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(courses.Lines.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de607 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(courses.Lines.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var ref608 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(courses.Lines.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var main_1_panel609 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id604, name605, name_fr606, name_de607, ref608 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var course_area610 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Layout</span>", "flex": 12, "forceSelection": true, "hidden": false, "hiddenName": "course_areaHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Layout","(courses.Lines.course_area) Pointer to CourseAreas.  This is used only when an\napplication defines several variants of\nEnrolmentsByPupil.") }, "name": "course_area", "selectOnFocus": true, "store": Lino.courses.CourseAreas });
    var topic611 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Topic...", "fieldLabel": "Topic", "flex": 19, "hidden": false, "hiddenName": "topicHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Topic","(courses.Lines.topic) ") }, "name": "topic", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Topics.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Lines/topic" }) }) });
    var fees_cat612 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff Category...", "fieldLabel": "Fees category", "flex": 19, "hidden": false, "hiddenName": "fees_catHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Fees category","(courses.Lines.fees_cat) ") }, "name": "fees_cat", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.ProductCats.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Lines/fees_cat" }) }) });
    var fee613 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff...", "fieldLabel": "Participation fee", "flex": 19, "forceSelection": true, "hidden": false, "hiddenName": "feeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Participation fee","(courses.Lines.fee) ") }, "name": "fee", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.Products.detail,Lino.products.Products.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Lines/fee" }) }) });
    var options_cat614 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff Category...", "fieldLabel": "Options category", "flex": 19, "hidden": false, "hiddenName": "options_catHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Options category","(courses.Lines.options_cat) ") }, "name": "options_cat", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.ProductCats.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Lines/options_cat" }) }) });
    var body_template615 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Body template</span>", "flex": 9, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Body template","(courses.Lines.body_template) The body template to use when printing a course of this series. Leave empty to use the site's default.") }, "name": "body_template", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Lines/body_template" }) }) });
    var main_2_panel616 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ course_area610, topic611, fees_cat612, fee613, options_cat614, body_template615 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var course_type617 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity type...", "fieldLabel": "Activity type", "flex": 23, "hidden": false, "hiddenName": "course_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity type","(courses.Lines.course_type) ") }, "name": "course_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.CourseTypes.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Lines/course_type" }) }) });
    var event_type618 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Calendar entry type...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Calendar entry type</span>", "flex": 23, "hidden": false, "hiddenName": "event_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Calendar entry type","(courses.Lines.event_type) The type of calendar entries to be generated. If this is empty, no calendar entries will be generated.") }, "name": "event_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.EventTypes.detail,Lino.cal.EventTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Lines/event_type" }) }) });
    var guest_role619 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Guest Role...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Manage presences as</span>", "flex": 23, "hidden": false, "hiddenName": "guest_roleHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Manage presences as","(courses.Lines.guest_role) The default guest role for particpants of calendar entries for activities in this series. Leave empty if you don't want any presences management.") }, "name": "guest_role", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.GuestRoles.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Lines/guest_role" }) }) });
    var every_unit620 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Recurrency", "flex": 24, "forceSelection": true, "hidden": false, "hiddenName": "every_unitHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recurrency","(courses.Lines.every_unit) ") }, "name": "every_unit", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.Recurrencies) });
    var every621 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "Repeat every", "flex": 5, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Repeat every","(courses.Lines.every) ") }, "name": "every", "selectOnFocus": true, "value": 1 });
    var main_3_panel622 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ course_type617, event_type618, guest_role619, every_unit620, every621 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var description623 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description","(courses.Lines.description) ") }, "name": "description", "selectOnFocus": true });
    var description_fr624 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description (fr)","(courses.Lines.description_fr) ") }, "name": "description_fr", "selectOnFocus": true });
    var description_de625 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description (de)","(courses.Lines.description_de) ") }, "name": "description_de", "selectOnFocus": true });
    var main_4_panel626 = Ext.create('Ext.Panel',{ "border": false, "flex": 35, "frame": false, "hideCheckBoxLabels": true, "items": [ description623, description_fr624, description_de625 ], "labelWidth": 153, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var excerpt_title627 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Excerpt title</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Excerpt title","(courses.Lines.excerpt_title) The title to be used when printing an excerpt.") }, "maxLength": 200, "name": "excerpt_title", "selectOnFocus": true });
    var excerpt_title_fr628 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Excerpt title (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Excerpt title (fr)","(courses.Lines.excerpt_title_fr) ") }, "maxLength": 200, "name": "excerpt_title_fr", "selectOnFocus": true });
    var excerpt_title_de629 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Excerpt title (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Excerpt title (de)","(courses.Lines.excerpt_title_de) ") }, "maxLength": 200, "name": "excerpt_title_de", "selectOnFocus": true });
    var main_5_panel630 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ excerpt_title627, excerpt_title_fr628, excerpt_title_de629 ], "labelWidth": 171, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel854 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel609, main_2_panel616, main_3_panel622, main_4_panel626, main_5_panel630 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel854;
    this.before_row_edit = function(record) {
      fee613.setContextValue('fees_cat', record ? record.data['fees_catHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      fees_cat612.on('change',Lino.chooser_handler(fee613,'fees_cat'));
      Lino.courses.Lines.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Activities.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 60,
  default_record_id: -99999,
  initComponent : function() {
    var line846 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Activity line...", "fieldLabel": "Activity line", "flex": 50, "hidden": false, "hiddenName": "lineHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity line","(courses.Activities.line) ") }, "name": "line", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Lines.detail,Lino.courses.Lines.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/line" }) }) });
    var teacher847 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Instructor", "flex": 50, "hidden": false, "hiddenName": "teacherHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Instructor","(courses.Activities.teacher) ") }, "name": "teacher", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/teacher" }) }) });
    var main_1_panel848 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ line846, teacher847 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var name849 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation", "flex": 61, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(courses.Activities.name) ") }, "maxLength": 100, "name": "name", "selectOnFocus": true });
    var start_date850 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 38, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(courses.Activities.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var main_2_panel851 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name849, start_date850 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel852 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel848, main_2_panel851 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel852;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.ledger.AccountingReport.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  disable_editing: true,
  auto_apply_params: false,
  initComponent : function() {
    var body_htmlbox925 = Ext.create('Lino.HtmlBoxPanel',{ "always_enabled": true, "bodyStyle": "overflow-x:hidden;", "containing_panel": this, "items": Ext.create('Ext.Component',{scrollable:true}), "layout": "fit", "listeners": { "render": Lino.quicktip_renderer(null,"(ledger.AccountingReport.body) ") }, "name": "body", "value": "" });
    var main_panel926 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ body_htmlbox925 ], "labelWidth": 0, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel926;
    this.before_row_edit = function(record) {
      body_htmlbox925.refresh();
    }
  this.callSuper();
  }
});


Ext.define('Lino.sales.InvoiceItems.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 51,
  initComponent : function() {
    var seqno927 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "flex": 15, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(sales.InvoiceItems.seqno) The sequence number of this item with its parent.") }, "name": "seqno", "selectOnFocus": true });
    var product928 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff...", "fieldLabel": "Tariff", "flex": 62, "hidden": false, "hiddenName": "productHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Tariff","(sales.InvoiceItems.product) ") }, "name": "product", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.Products.detail,Lino.products.Products.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/InvoiceItems/product" }) }) });
    var discount929 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Discount", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Discount","(sales.InvoiceItems.discount) ") }, "name": "discount", "selectOnFocus": true });
    var main_1_panel930 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ seqno927, product928, discount929 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var unit_price931 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Unit price", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Unit price","(sales.InvoiceItems.unit_price) ") }, "name": "unit_price", "selectOnFocus": true });
    var qty932 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(6), "fieldLabel": "Quantity", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Quantity","(sales.InvoiceItems.qty) ") }, "maxLength": 6, "name": "qty", "selectOnFocus": true });
    var total_base933 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total excl. VAT", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total excl. VAT","(sales.InvoiceItems.total_base) ") }, "name": "total_base", "selectOnFocus": true });
    var total_vat934 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "VAT", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT","(sales.InvoiceItems.total_vat) ") }, "name": "total_vat", "selectOnFocus": true });
    var total_incl935 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total incl. VAT", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(sales.InvoiceItems.total_incl) ") }, "name": "total_incl", "selectOnFocus": true });
    var main_2_panel936 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ unit_price931, qty932, total_base933, total_vat934, total_incl935 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var title937 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Heading", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Heading","(sales.InvoiceItems.title) ") }, "maxLength": 200, "name": "title", "selectOnFocus": true });
    var description938 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Description</span>", "flex": 62, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description","(sales.InvoiceItems.description) A multi-line rich text to be printed in the resulting printable\ndocument.") }, "name": "description", "selectOnFocus": true });
    var main_panel939 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel930, main_2_panel936, title937, description938 ], "labelWidth": 108, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel939;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.about.Models.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  disable_editing: true,
  initComponent : function() {
    var app_disp940 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "app_label", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("app_label","(about.Models.app) ") }, "name": "app", "readOnly": true, "value": "" });
    var name_disp941 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "name", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("name","(about.Models.name) ") }, "name": "name", "readOnly": true, "value": "" });
    var docstring_disp942 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "docstring", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("docstring","(about.Models.docstring) ") }, "name": "docstring", "readOnly": true, "value": "" });
    var rows943 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Rows", "flex": 5, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Rows","(about.Models.rows) ") }, "name": "rows", "readOnly": true });
    var main_1_panel944 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ app_disp940, name_disp941, docstring_disp942, rows943 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel950 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel944 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel950;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.system.SiteConfigs.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 1,
  initComponent : function() {
    var site_company951 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Organization...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Site owner</span>", "flex": 66, "hidden": false, "hiddenName": "site_companyHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Site owner","(system.SiteConfigs.site_company) The organisation who runs this site.  This is used e.g. when\nprinting your address in certain documents or reports.  Or\nnewly created partners inherit the country of the site owner.") }, "name": "site_company", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/system/SiteConfigs/site_company" }) }) });
    var next_partner_id952 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Next partner id</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Next partner id","(system.SiteConfigs.next_partner_id) The next automatic id for any new partner.") }, "name": "next_partner_id", "selectOnFocus": true, "value": 100 });
    var main_1_panel953 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ site_company951, next_partner_id952 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var default_build_method954 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Default build method</span>", "flex": 63, "forceSelection": true, "hidden": false, "hiddenName": "default_build_methodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Default build method","(system.SiteConfigs.default_build_method) The default build method to use when rendering printable documents.") }, "name": "default_build_method", "selectOnFocus": true, "store": [['','']].concat(Lino.printing.BuildMethods) });
    var simulate_today955 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Simulated date</span>", "flex": 36, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Simulated date","(system.SiteConfigs.simulate_today) A constant user-defined date to be substituted as current\nsystem date.") }, "name": "simulate_today", "selectOnFocus": true });
    var main_2_panel956 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ default_build_method954, simulate_today955 ], "labelWidth": 189, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var site_calendar957 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Calendar...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Site Calendar</span>", "flex": 50, "hidden": false, "hiddenName": "site_calendarHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Site Calendar","(system.SiteConfigs.site_calendar) The default calendar of this site.") }, "name": "site_calendar", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.Calendars.detail,Lino.cal.Calendars.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/system/SiteConfigs/site_calendar" }) }) });
    var default_event_type958 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Calendar entry type...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Default Event Type</span>", "flex": 50, "hidden": false, "hiddenName": "default_event_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Default Event Type","(system.SiteConfigs.default_event_type) The default type of events on this site.") }, "name": "default_event_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.EventTypes.detail,Lino.cal.EventTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/system/SiteConfigs/default_event_type" }) }) });
    var main_3_panel959 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ site_calendar957, default_event_type958 ], "labelWidth": 171, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var max_auto_events960 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Max automatic events</span>", "flex": 27, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Max automatic events","(system.SiteConfigs.max_auto_events) Maximum number of automatic events to be generated.") }, "name": "max_auto_events", "selectOnFocus": true, "value": 72 });
    var hide_events_before961 = Ext.create('Lino.DateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Hide events before</span>", "flex": 72, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Hide events before","(system.SiteConfigs.hide_events_before) If this is specified, certain tables show only \nevents after the given date.") }, "name": "hide_events_before", "selectOnFocus": true });
    var main_4_panel962 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ max_auto_events960, hide_events_before961 ], "labelWidth": 189, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel963 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel953, main_2_panel956, main_3_panel959, main_4_panel962 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel963;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.ana.Groups.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 72,
  default_record_id: -99999,
  initComponent : function() {
    var designation964 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(ana.Groups.designation) ") }, "maxLength": 200, "name": "designation", "selectOnFocus": true });
    var designation_fr965 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(ana.Groups.designation_fr) ") }, "maxLength": 200, "name": "designation_fr", "selectOnFocus": true });
    var designation_de966 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(ana.Groups.designation_de) ") }, "maxLength": 200, "name": "designation_de", "selectOnFocus": true });
    var main_1_panel967 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ designation964, designation_fr965, designation_de966 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ref968 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(ana.Groups.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var main_panel969 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel967, ref968 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel969;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.ana.Accounts.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 71,
  default_record_id: -99999,
  initComponent : function() {
    var designation539 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(ana.Accounts.designation) ") }, "maxLength": 200, "name": "designation", "selectOnFocus": true });
    var designation_fr540 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(ana.Accounts.designation_fr) ") }, "maxLength": 200, "name": "designation_fr", "selectOnFocus": true });
    var designation_de541 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(ana.Accounts.designation_de) ") }, "maxLength": 200, "name": "designation_de", "selectOnFocus": true });
    var main_1_panel542 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ designation539, designation_fr540, designation_de541 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ref543 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 51, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(ana.Accounts.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var group544 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Analytical account group...", "fieldLabel": "Group", "flex": 48, "hidden": false, "hiddenName": "groupHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Group","(ana.Accounts.group) ") }, "name": "group", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ana.Groups.detail,Lino.ana.Groups.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Accounts/group" }) }) });
    var main_2_panel545 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref543, group544 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel546 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel542, main_2_panel545 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel546;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.faculties.Skills.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 85,
  initComponent : function() {
    var id970 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(faculties.Skills.id) ") }, "name": "id", "readOnly": true });
    var name971 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(faculties.Skills.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr972 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(faculties.Skills.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de973 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(faculties.Skills.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel974 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id970, name971, name_fr972, name_de973 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var parent975 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Skill...", "fieldLabel": "Parent skill", "flex": 44, "hidden": false, "hiddenName": "parentHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Parent skill","(faculties.Skills.parent) ") }, "name": "parent", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.faculties.Skills.detail,Lino.faculties.Skills.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/Skills/parent" }) }) });
    var skill_type976 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Skill type...", "fieldLabel": "Skill type", "flex": 44, "hidden": false, "hiddenName": "skill_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Skill type","(faculties.Skills.skill_type) ") }, "name": "skill_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.faculties.SkillTypes.detail,Lino.faculties.SkillTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/Skills/skill_type" }) }) });
    var affinity977 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Affinity</span>", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Affinity","(faculties.Skills.affinity) How much workers enjoy to get a new ticket requiring this skill.A number between -100 and +100.") }, "name": "affinity", "selectOnFocus": true, "value": 100 });
    var main_2_panel978 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ parent975, skill_type976, affinity977 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remarks1043 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remarks", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remarks","(faculties.Skills.remarks) ") }, "name": "remarks", "selectOnFocus": true });
    var main_3_panel1044 = Ext.create('Ext.Panel',{ "border": false, "flex": 41, "frame": false, "hideCheckBoxLabels": true, "items": [ remarks1043 ], "labelWidth": 72, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var main_panel1048 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel974, main_2_panel978, main_3_panel1044 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1048;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Activities.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 60,
  initComponent : function() {
    var ref681 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Legacy file number</span>", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Legacy file number","(courses.Activities.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "preferred_with": 6, "selectOnFocus": true });
    var line682 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Activity line...", "fieldLabel": "Activity line", "flex": 21, "hidden": false, "hiddenName": "lineHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity line","(courses.Activities.line) ") }, "name": "line", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Lines.detail,Lino.courses.Lines.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/line" }) }) });
    var teacher683 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Instructor", "flex": 21, "hidden": false, "hiddenName": "teacherHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Instructor","(courses.Activities.teacher) ") }, "name": "teacher", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/teacher" }) }) });
    var workflow_buttons_disp684 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 32, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(courses.Activities.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var general_1_panel685 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref681, line682, teacher683, workflow_buttons_disp684 ], "labelWidth": 171, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var room686 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Room...", "fieldLabel": "Room", "flex": 32, "hidden": false, "hiddenName": "roomHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Room","(courses.Activities.room) ") }, "name": "room", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.Rooms.detail,Lino.cal.Rooms.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/room" }) }) });
    var start_date687 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(courses.Activities.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var end_date688 = Ext.create('Lino.DateField',{ "fieldLabel": "End Date", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Date","(courses.Activities.end_date) ") }, "name": "end_date", "selectOnFocus": true });
    var start_time689 = Ext.create('Lino.TimeField',{ "fieldLabel": "Start time", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start time","(courses.Activities.start_time) ") }, "name": "start_time", "selectOnFocus": true });
    var end_time690 = Ext.create('Lino.TimeField',{ "fieldLabel": "End Time", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Time","(courses.Activities.end_time) ") }, "name": "end_time", "selectOnFocus": true });
    var general_2_panel691 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ room686, start_date687, end_date688, start_time689, end_time690 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var partner692 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 48, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(courses.Activities.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/partner" }) }) });
    var name693 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation", "flex": 51, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(courses.Activities.name) ") }, "maxLength": 100, "name": "name", "selectOnFocus": true });
    var general_3_panel694 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ partner692, name693 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remark695 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remark", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(courses.Activities.remark) ") }, "name": "remark", "selectOnFocus": true });
    var general_panel696 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel685, general_2_panel691, general_3_panel694, remark695 ], "labelWidth": 63, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var enrolments_until697 = Ext.create('Lino.DateField',{ "fieldLabel": "Enrolments until", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Enrolments until","(courses.Activities.enrolments_until) ") }, "name": "enrolments_until", "selectOnFocus": true });
    var fee698 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff...", "fieldLabel": "Default participation fee", "flex": 22, "forceSelection": true, "hidden": false, "hiddenName": "feeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Default participation fee","(courses.Activities.fee) ") }, "name": "fee", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.Products.detail,Lino.products.Products.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/fee" }) }) });
    var max_places699 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Available places</span>", "flex": 14, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Available places","(courses.Activities.max_places) Maximum number of participants") }, "name": "max_places", "selectOnFocus": true });
    var confirmed700 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Confirmed", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Confirmed","(courses.Activities.confirmed) ") }, "name": "confirmed", "readOnly": true });
    var free_places701 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Free places", "flex": 14, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Free places","(courses.Activities.free_places) ") }, "name": "free_places", "readOnly": true });
    var print_actions_disp702 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Print", "flex": 22, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Print","(courses.Activities.print_actions) ") }, "name": "print_actions", "readOnly": true, "value": "" });
    var enrolments_top_panel703 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ enrolments_until697, fee698, max_places699, confirmed700, free_places701, print_actions_disp702 ], "labelWidth": 234, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var enrolments_panel705 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ enrolments_top_panel703 ], "labelWidth": 99, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Enrolments" });
    var every_unit706 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Recurrency", "flex": 47, "forceSelection": true, "hidden": false, "hiddenName": "every_unitHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recurrency","(courses.Activities.every_unit) ") }, "name": "every_unit", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.Recurrencies) });
    var every707 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "Repeat every", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Repeat every","(courses.Activities.every) ") }, "name": "every", "selectOnFocus": true });
    var max_date708 = Ext.create('Lino.DateField',{ "fieldLabel": "Generate events until", "flex": 29, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Generate events until","(courses.Activities.max_date) ") }, "name": "max_date", "selectOnFocus": true });
    var max_events709 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Number of events", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Number of events","(courses.Activities.max_events) ") }, "name": "max_events", "selectOnFocus": true });
    var events_1_panel710 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ every_unit706, every707, max_date708, max_events709 ], "labelWidth": 198, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var monday711 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Monday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Monday","(courses.Activities.monday) ") }, "name": "monday", "selectOnFocus": true });
    var tuesday712 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Tuesday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Tuesday","(courses.Activities.tuesday) ") }, "name": "tuesday", "selectOnFocus": true });
    var wednesday713 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Wednesday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Wednesday","(courses.Activities.wednesday) ") }, "name": "wednesday", "selectOnFocus": true });
    var thursday714 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Thursday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Thursday","(courses.Activities.thursday) ") }, "name": "thursday", "selectOnFocus": true });
    var friday715 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Friday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Friday","(courses.Activities.friday) ") }, "name": "friday", "selectOnFocus": true });
    var saturday716 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Saturday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Saturday","(courses.Activities.saturday) ") }, "name": "saturday", "selectOnFocus": true });
    var sunday717 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Sunday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Sunday","(courses.Activities.sunday) ") }, "name": "sunday", "selectOnFocus": true });
    var events_2_panel718 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ monday711, tuesday712, wednesday713, thursday714, friday715, saturday716, sunday717 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var events_panel720 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ events_1_panel710, events_2_panel718 ], "labelWidth": 153, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Events" });
    var state811 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 14, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(courses.Activities.state) The ChoiceList of the state field must have at least two items\nnamed \"draft\" and \"registered\".\nThere may be additional states.\nEvery state must have an extra attribute \"editable\".") }, "name": "state", "selectOnFocus": true, "store": Lino.courses.CourseStates });
    var user812 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 26, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(courses.Activities.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/user" }) }) });
    var payment_term813 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Payment Term...", "fieldLabel": "Payment Term", "flex": 26, "hidden": false, "hiddenName": "payment_termHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Payment Term","(courses.Activities.payment_term) ") }, "name": "payment_term", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.PaymentTerms.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/payment_term" }) }) });
    var paper_type814 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Paper type...", "fieldLabel": "Paper type", "flex": 26, "hidden": false, "hiddenName": "paper_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Paper type","(courses.Activities.paper_type) ") }, "name": "paper_type", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Activities/paper_type" }) }) });
    var id815 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(courses.Activities.id) ") }, "name": "id", "readOnly": true });
    var more_1_panel816 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ state811, user812, payment_term813, paper_type814, id815 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var more_panel844 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ more_1_panel816 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "More" });
    var main_panel845 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel696, enrolments_panel705, events_panel720, more_panel844 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel845;
    this.before_row_edit = function(record) {
      fee698.setContextValue('line', record ? record.data['lineHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      line682.on('change',Lino.chooser_handler(fee698,'line'));
      Lino.courses.Activities.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Slots.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 56,
  default_record_id: -99999,
  initComponent : function() {
    var start_time1049 = Ext.create('Lino.TimeField',{ "fieldLabel": "Start Time", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start Time","(courses.Slots.start_time) ") }, "name": "start_time", "selectOnFocus": true });
    var end_time1050 = Ext.create('Lino.TimeField',{ "fieldLabel": "End Time", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Time","(courses.Slots.end_time) ") }, "name": "end_time", "selectOnFocus": true });
    var main_1_panel1051 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_time1049, end_time1050 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var name1052 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Name", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Name","(courses.Slots.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var main_panel1053 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1051, name1052 ], "labelWidth": 45, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1053;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.CourseTypes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 57,
  initComponent : function() {
    var id1054 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(courses.CourseTypes.id) ") }, "name": "id", "readOnly": true });
    var name1055 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(courses.CourseTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1056 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(courses.CourseTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1057 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(courses.CourseTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1058 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1054, name1055, name_fr1056, name_de1057 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1089 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1058 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1089;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.gfks.ContentTypes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 2,
  initComponent : function() {
    var id1090 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(gfks.ContentTypes.id) ") }, "name": "id", "readOnly": true });
    var app_label1091 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "app label", "flex": 27, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("app label","(gfks.ContentTypes.app_label) ") }, "maxLength": 100, "name": "app_label", "selectOnFocus": true });
    var model1092 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "python model class name", "flex": 27, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("python model class name","(gfks.ContentTypes.model) ") }, "maxLength": 100, "name": "model", "selectOnFocus": true });
    var base_classes_disp1093 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Base classes", "flex": 38, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Base classes","(gfks.ContentTypes.base_classes) ") }, "name": "base_classes", "readOnly": true, "value": "" });
    var main_1_panel1094 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1090, app_label1091, model1092, base_classes_disp1093 ], "labelWidth": 216, "layout": { "align": "stretchmax", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var main_panel1107 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1094 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1107;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.bevats.Declarations.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 69,
  initComponent : function() {
    var start_period1108 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "Start period", "flex": 21, "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start period","(bevats.Declarations.start_period) ") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/Declarations/start_period" }) }) });
    var end_period1109 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "End period", "flex": 21, "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End period","(bevats.Declarations.end_period) ") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/Declarations/end_period" }) }) });
    var entry_date1110 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 13, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(bevats.Declarations.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var accounting_period1111 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Accounting period</span>", "flex": 21, "hidden": false, "hiddenName": "accounting_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Accounting period","(bevats.Declarations.accounting_period) The accounting period and fiscal year to which this entry is\nto be assigned to. The default value is determined from\nentry_date.") }, "name": "accounting_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/Declarations/accounting_period" }) }) });
    var user1112 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 21, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(bevats.Declarations.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/Declarations/user" }) }) });
    var main_1_panel1113 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_period1108, end_period1109, entry_date1110, accounting_period1111, user1112 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var partner1114 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 28, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(bevats.Declarations.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/Declarations/partner" }) }) });
    var narration1115 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Narration</span>", "flex": 29, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Narration","(bevats.Declarations.narration) A short explanation which ascertains the subject matter of\nthis journal entry.") }, "maxLength": 200, "name": "narration", "selectOnFocus": true });
    var workflow_buttons_disp1116 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 42, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(bevats.Declarations.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var main_2_panel1117 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ partner1114, narration1115, workflow_buttons_disp1116 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var F711118 = Ext.create('Ext.form.NumberField',{ "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[71]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[71]","(bevats.Declarations.F71) Intracom supplies") }, "name": "F71", "readOnly": true });
    var F721119 = Ext.create('Ext.form.NumberField',{ "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[72]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[72]","(bevats.Declarations.F72) New vehicles") }, "name": "F72", "readOnly": true });
    var F731120 = Ext.create('Ext.form.NumberField',{ "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[73]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[73]","(bevats.Declarations.F73) Excised products") }, "name": "F73", "readOnly": true });
    var c1_panel1121 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 20, "frame": true, "hideCheckBoxLabels": true, "items": [ F711118, F721119, F731120 ], "labelWidth": 45, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var F751122 = Ext.create('Ext.form.NumberField',{ "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[75]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[75]","(bevats.Declarations.F75) Intracom services") }, "name": "F75", "readOnly": true });
    var F761123 = Ext.create('Ext.form.NumberField',{ "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[76]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[76]","(bevats.Declarations.F76) Other operations") }, "name": "F76", "readOnly": true });
    var c2_panel1124 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 20, "frame": true, "hideCheckBoxLabels": true, "items": [ F751122, F761123 ], "labelWidth": 45, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var F771125 = Ext.create('Ext.form.NumberField',{ "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[77]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[77]","(bevats.Declarations.F77) Credit notes on 71, 72, 73 and 75") }, "name": "F77", "readOnly": true });
    var F781126 = Ext.create('Ext.form.NumberField',{ "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[78]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[78]","(bevats.Declarations.F78) Credit notes on 76") }, "name": "F78", "readOnly": true });
    var c2b_panel1127 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 20, "frame": true, "hideCheckBoxLabels": true, "items": [ F771125, F781126 ], "labelWidth": 45, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var F801128 = Ext.create('Ext.form.NumberField',{ "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[80]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[80]","(bevats.Declarations.F80) Due VAT for 71...76") }, "name": "F80", "readOnly": true });
    var F811129 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[81]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[81]","(bevats.Declarations.F81) Miscellaneous corrections due") }, "name": "F81", "selectOnFocus": true });
    var F821130 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[82]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[82]","(bevats.Declarations.F82) Miscellaneous corrections returnable") }, "name": "F82", "selectOnFocus": true });
    var c3_panel1131 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 20, "frame": true, "hideCheckBoxLabels": true, "items": [ F801128, F811129, F821130 ], "labelWidth": 45, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var F831132 = Ext.create('Ext.form.NumberField',{ "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">[83]</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("[83]","(bevats.Declarations.F83) Total to pay") }, "name": "F83", "readOnly": true });
    var printed_disp1133 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Printed", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Printed","(bevats.Declarations.printed) ") }, "name": "printed", "readOnly": true, "value": "" });
    var c4_panel1134 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 20, "frame": true, "hideCheckBoxLabels": true, "items": [ F831132, printed_disp1133 ], "labelWidth": 72, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var main_3_panel1135 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ c1_panel1121, c2_panel1124, c2b_panel1127, c3_panel1131, c4_panel1134 ], "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1137 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1113, main_2_panel1117, main_3_panel1135 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1137;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.StatusReport.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  disable_editing: true,
  initComponent : function() {
    var body_htmlbox1138 = Ext.create('Lino.HtmlBoxPanel',{ "always_enabled": true, "bodyStyle": "overflow-x:hidden;", "containing_panel": this, "items": Ext.create('Ext.Component',{scrollable:true}), "layout": "fit", "listeners": { "render": Lino.quicktip_renderer(null,"(courses.StatusReport.body) ") }, "name": "body", "value": "" });
    var main_panel1139 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ body_htmlbox1138 ], "labelWidth": 0, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1139;
    this.before_row_edit = function(record) {
      body_htmlbox1138.refresh();
    }
  this.callSuper();
  }
});


Ext.define('Lino.sales.Invoices.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 52,
  initComponent : function() {
    var entry_date1140 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 24, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(sales.Invoices.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var partner1141 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 37, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(sales.Invoices.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/partner" }) }) });
    var vat_regime1142 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "VAT regime", "flex": 38, "forceSelection": true, "hidden": false, "hiddenName": "vat_regimeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT regime","(sales.Invoices.vat_regime) ") }, "name": "vat_regime", "selectOnFocus": true, "store": Lino.vat.VatRegimes });
    var invoice_header_1_panel1143 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ entry_date1140, partner1141, vat_regime1142 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var subject1144 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Subject line", "flex": 40, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Subject line","(sales.Invoices.subject) ") }, "maxLength": 200, "name": "subject", "selectOnFocus": true });
    var your_ref1145 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Your reference", "flex": 40, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Your reference","(sales.Invoices.your_ref) ") }, "maxLength": 200, "name": "your_ref", "selectOnFocus": true });
    var match1146 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Match</span>", "flex": 19, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Match","(sales.Invoices.match) The movement to be matched.") }, "name": "match", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/match" }) }) });
    var invoice_header_2_panel1147 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ subject1144, your_ref1145, match1146 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var payment_term1148 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Payment Term...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Payment Term</span>", "flex": 22, "hidden": false, "hiddenName": "payment_termHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Payment Term","(sales.Invoices.payment_term) See lino_xl.lib.ledger.mixins.PartnerRelated.payment_term") }, "name": "payment_term", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.PaymentTerms.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/payment_term" }) }) });
    var due_date1149 = Ext.create('Lino.DateField',{ "fieldLabel": "Due date", "flex": 22, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Due date","(sales.Invoices.due_date) ") }, "name": "due_date", "selectOnFocus": true });
    var paper_type1150 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Paper type...", "fieldLabel": "Paper type", "flex": 22, "hidden": false, "hiddenName": "paper_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Paper type","(sales.Invoices.paper_type) ") }, "name": "paper_type", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/paper_type" }) }) });
    var printed_disp1151 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Printed", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Printed","(sales.Invoices.printed) ") }, "name": "printed", "readOnly": true, "value": "" });
    var invoice_header_3_panel1152 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ payment_term1148, due_date1149, paper_type1150, printed_disp1151 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var invoice_header_panel1153 = Ext.create('Ext.form.FieldSet',{ "bodyBorder": false, "border": false, "flex": 75, "frame": true, "hideCheckBoxLabels": true, "items": [ invoice_header_1_panel1143, invoice_header_2_panel1147, invoice_header_3_panel1152 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "title": "Header" });
    var total_base1154 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total excl. VAT", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total excl. VAT","(sales.Invoices.total_base) ") }, "name": "total_base", "selectOnFocus": true });
    var total_vat1155 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "VAT", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT","(sales.Invoices.total_vat) ") }, "name": "total_vat", "selectOnFocus": true });
    var total_incl1156 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total incl. VAT", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(sales.Invoices.total_incl) ") }, "name": "total_incl", "selectOnFocus": true });
    var workflow_buttons_disp1157 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(sales.Invoices.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var totals_panel1158 = Ext.create('Ext.form.FieldSet',{ "bodyBorder": false, "border": false, "flex": 25, "frame": true, "hideCheckBoxLabels": true, "items": [ total_base1154, total_vat1155, total_incl1156, workflow_buttons_disp1157 ], "labelWidth": 144, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "title": "Totals" });
    var general_1_panel1159 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ invoice_header_panel1153, totals_panel1158 ], "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var general_panel1188 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel1159 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var id1189 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(sales.Invoices.id) ") }, "name": "id", "readOnly": true });
    var user1190 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 44, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(sales.Invoices.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/user" }) }) });
    var language1191 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Language", "flex": 44, "hidden": false, "hiddenName": "languageHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Language","(sales.Invoices.language) ") }, "name": "language", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    var more_1_panel1192 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1189, user1190, language1191 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var intro1193 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Introductive Text", "flex": 83, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Introductive Text","(sales.Invoices.intro) ") }, "name": "intro", "selectOnFocus": true });
    var more_panel1194 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ more_1_panel1192, intro1193 ], "labelWidth": 162, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "More" });
    var journal1195 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Journal...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal</span>", "flex": 30, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(sales.Invoices.journal) The journal into which this voucher has been booked. This is a\nmandatory pointer to a Journal instance.") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/journal" }) }) });
    var accounting_period1196 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Accounting period</span>", "flex": 30, "hidden": false, "hiddenName": "accounting_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Accounting period","(sales.Invoices.accounting_period) The accounting period and fiscal year to which this entry is\nto be assigned to. The default value is determined from\nentry_date.") }, "name": "accounting_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/accounting_period" }) }) });
    var number1197 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(sales.Invoices.number) The sequence number of this voucher in the journal.") }, "name": "number", "selectOnFocus": true });
    var narration1198 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Narration</span>", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Narration","(sales.Invoices.narration) A short explanation which ascertains the subject matter of\nthis journal entry.") }, "maxLength": 200, "name": "narration", "selectOnFocus": true });
    var ledger_1_panel1199 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ journal1195, accounting_period1196, number1197, narration1198 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ledger_panel1201 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ ledger_1_panel1199 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Ledger" });
    var main_panel1202 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel1188, more_panel1194, ledger_panel1201 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel1202;
    this.before_row_edit = function(record) {
      match1146.setContextValue('journal', record ? record.data['journalHidden'] : undefined);
      match1146.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      journal1195.on('change',Lino.chooser_handler(match1146,'journal'));
      partner1141.on('change',Lino.chooser_handler(match1146,'partner'));
      Lino.sales.Invoices.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.sales.Invoices.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 52,
  default_record_id: -99999,
  initComponent : function() {
    var partner1203 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 60, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(sales.Invoices.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/Invoices/partner" }) }) });
    var entry_date1204 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 39, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(sales.Invoices.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var main_1_panel1205 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ partner1203, entry_date1204 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var subject1206 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Subject line", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Subject line","(sales.Invoices.subject) ") }, "maxLength": 200, "name": "subject", "selectOnFocus": true });
    var main_panel1207 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1205, subject1206 ], "labelWidth": 117, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1207;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.faculties.SkillTypes.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 84,
  default_record_id: -99999,
  initComponent : function() {
    var id1208 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(faculties.SkillTypes.id) ") }, "name": "id", "readOnly": true });
    var name1209 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(faculties.SkillTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1210 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(faculties.SkillTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1211 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(faculties.SkillTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_2_panel1212 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name1209, name_fr1210, name_de1211 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1213 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ id1208, main_2_panel1212 ], "labelWidth": 27, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1213;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.ledger.Journals.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 45,
  initComponent : function() {
    var name1214 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(ledger.Journals.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1215 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(ledger.Journals.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1216 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(ledger.Journals.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var ref1217 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(ledger.Journals.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var seqno1218 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(ledger.Journals.seqno) The sequence number of this item with its parent.") }, "name": "seqno", "selectOnFocus": true });
    var main_1_panel1219 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name1214, name_fr1215, name_de1216, ref1217, seqno1218 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var voucher_type1220 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Voucher type</span>", "flex": 33, "forceSelection": true, "hidden": false, "hiddenName": "voucher_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Voucher type","(ledger.Journals.voucher_type) Pointer to an item of VoucherTypes.") }, "name": "voucher_type", "selectOnFocus": true, "store": Lino.ledger.VoucherTypes });
    var journal_group1221 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal group</span>", "flex": 16, "forceSelection": true, "hidden": false, "hiddenName": "journal_groupHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal group","(ledger.Journals.journal_group) Pointer to an item of JournalGroups.") }, "name": "journal_group", "selectOnFocus": true, "store": Lino.ledger.JournalGroups });
    var build_method1222 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Build method", "flex": 22, "forceSelection": true, "hidden": false, "hiddenName": "build_methodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Build method","(ledger.Journals.build_method) ") }, "name": "build_method", "selectOnFocus": true, "store": [['','']].concat(Lino.printing.BuildMethods) });
    var template1223 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Template</span>", "flex": 22, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Template","(ledger.Journals.template) See PrintableType.template.") }, "name": "template", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Journals/template" }) }) });
    var id1224 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 5, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(ledger.Journals.id) ") }, "name": "id", "readOnly": true });
    var main_2_panel1225 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ voucher_type1220, journal_group1221, build_method1222, template1223, id1224 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var trade_type1226 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Trade type</span>", "flex": 35, "forceSelection": true, "hidden": false, "hiddenName": "trade_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Trade type","(ledger.Journals.trade_type) Pointer to TradeTypes.") }, "name": "trade_type", "selectOnFocus": true, "store": [['','']].concat(Lino.ledger.TradeTypes) });
    var account1227 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Account...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Account</span>", "flex": 32, "hidden": false, "hiddenName": "accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Account","(ledger.Journals.account) The account to use for the counter-movements generated by\nvouchers in this journal.") }, "name": "account", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Journals/account" }) }) });
    var partner1228 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Organization...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Organization</span>", "flex": 32, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Organization","(ledger.Journals.partner) The partner to use as default partner for all vouchers in this\njournal.") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ledger/Journals/partner" }) }) });
    var main_3_panel1229 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ trade_type1226, account1227, partner1228 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var dc1230 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Primary booking direction", "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Primary booking direction","(ledger.Journals.dc) Debit (checked) or Credit (not checked)") }, "name": "dc", "selectOnFocus": true });
    var force_sequence1231 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Force chronological sequence", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Force chronological sequence","(ledger.Journals.force_sequence) ") }, "name": "force_sequence", "selectOnFocus": true });
    var yearly_numbering1232 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Yearly numbering", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Yearly numbering","(ledger.Journals.yearly_numbering) Whether the\nnumber of\nvouchers should restart at 1 every year.") }, "name": "yearly_numbering", "selectOnFocus": true });
    var auto_fill_suggestions1233 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Fill suggestions", "checked": true, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Fill suggestions","(ledger.Journals.auto_fill_suggestions) Whether to automatically fill voucher item from due payments\nof the partner when entering a financial voucher.") }, "name": "auto_fill_suggestions", "selectOnFocus": true });
    var auto_check_clearings1234 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Check clearing", "checked": true, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Check clearing","(ledger.Journals.auto_check_clearings) Whether to automatically check and update the 'cleared' status\nof involved transactions when (de)registering a voucher of\nthis journal.") }, "name": "auto_check_clearings", "selectOnFocus": true });
    var must_declare1235 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "must declare", "checked": true, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("must declare","(ledger.Journals.must_declare) ") }, "name": "must_declare", "selectOnFocus": true });
    var main_4_panel1236 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ dc1230, force_sequence1231, yearly_numbering1232, auto_fill_suggestions1233, auto_check_clearings1234, must_declare1235 ], "labelWidth": 261, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var printed_name1237 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Printed document designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Printed document designation","(ledger.Journals.printed_name) ") }, "maxLength": 100, "name": "printed_name", "selectOnFocus": true });
    var printed_name_fr1238 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Printed document designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Printed document designation (fr)","(ledger.Journals.printed_name_fr) ") }, "maxLength": 100, "name": "printed_name_fr", "selectOnFocus": true });
    var printed_name_de1239 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Printed document designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Printed document designation (de)","(ledger.Journals.printed_name_de) ") }, "maxLength": 100, "name": "printed_name_de", "selectOnFocus": true });
    var main_5_panel1240 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ printed_name1237, printed_name_fr1238, printed_name_de1239 ], "labelWidth": 306, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1249 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1219, main_2_panel1225, main_3_panel1229, main_4_panel1236, main_5_panel1240 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1249;
    this.before_row_edit = function(record) {
      template1223.setContextValue('build_method', record ? record.data['build_methodHidden'] : undefined);
      template1223.setContextValue('voucher_type', record ? record.data['voucher_typeHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      build_method1222.on('change',Lino.chooser_handler(template1223,'build_method'));
      voucher_type1220.on('change',Lino.chooser_handler(template1223,'voucher_type'));
      Lino.ledger.Journals.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.ledger.Journals.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 45,
  default_record_id: -99999,
  initComponent : function() {
    var ref1250 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(ledger.Journals.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var name1251 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(ledger.Journals.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1252 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(ledger.Journals.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1253 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(ledger.Journals.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1254 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref1250, name1251, name_fr1252, name_de1253 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var journal_group1255 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal group</span>", "forceSelection": true, "hidden": false, "hiddenName": "journal_groupHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal group","(ledger.Journals.journal_group) Pointer to an item of JournalGroups.") }, "name": "journal_group", "selectOnFocus": true, "store": Lino.ledger.JournalGroups });
    var voucher_type1256 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Voucher type</span>", "forceSelection": true, "hidden": false, "hiddenName": "voucher_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Voucher type","(ledger.Journals.voucher_type) Pointer to an item of VoucherTypes.") }, "name": "voucher_type", "selectOnFocus": true, "store": Lino.ledger.VoucherTypes });
    var main_panel1257 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1254, journal_group1255, voucher_type1256 ], "labelWidth": 126, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1257;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.blogs.Entries.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 77,
  default_record_id: -99999,
  initComponent : function() {
    var title1258 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Heading", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Heading","(blogs.Entries.title) ") }, "maxLength": 200, "name": "title", "selectOnFocus": true });
    var entry_type1259 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Blog Entry Type...", "fieldLabel": "Blog Entry Type", "hidden": false, "hiddenName": "entry_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Blog Entry Type","(blogs.Entries.entry_type) ") }, "name": "entry_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.blogs.EntryTypes.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/blogs/Entries/entry_type" }) }) });
    var main_panel1260 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ title1258, entry_type1259 ], "labelWidth": 144, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1260;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.excerpts.Excerpts.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 87,
  default_record_id: -99999,
  initComponent : function() {
    var excerpt_type1261 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Excerpt Type...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Excerpt Type</span>", "flex": 50, "forceSelection": true, "hidden": false, "hiddenName": "excerpt_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Excerpt Type","(excerpts.Excerpts.excerpt_type) The type of this excerpt (ForeignKey to ExcerptType).") }, "name": "excerpt_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.excerpts.ExcerptTypes.detail,Lino.excerpts.ExcerptTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/excerpt_type" }) }) });
    var project1262 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 50, "hidden": false, "hiddenName": "projectHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(excerpts.Excerpts.project) ") }, "name": "project", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/project" }) }) });
    var main_1_panel1263 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ excerpt_type1261, project1262 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var company1264 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Organization...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Recipient (Organization)</span>", "flex": 50, "hidden": false, "hiddenName": "companyHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recipient (Organization)","(excerpts.Excerpts.company) The optional company of the recipient of this\nexcerpt.  See ContactRelated.company.") }, "name": "company", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/company" }) }) });
    var contact_person1265 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Recipient (Person)</span>", "flex": 50, "forceSelection": true, "hidden": false, "hiddenName": "contact_personHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recipient (Person)","(excerpts.Excerpts.contact_person) The optional contact person of the recipient of this\nexcerpt.  See ContactRelated.contact_person.") }, "name": "contact_person", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/contact_person" }) }) });
    var main_2_panel1266 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ company1264, contact_person1265 ], "labelWidth": 225, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1267 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1263, main_2_panel1266 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1267;
    this.before_row_edit = function(record) {
      excerpt_type1261.setContextValue('owner', record ? record.data['owner'] : undefined);
      contact_person1265.setContextValue('company', record ? record.data['companyHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      company1264.on('change',Lino.chooser_handler(contact_person1265,'company'));
      Lino.excerpts.Excerpts.InsertFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.sepa.AccountsByPartner.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 62,
  default_record_id: -99999,
  initComponent : function() {
    var iban1268 = new Lino.UppercaseTextField({ "allowBlank": false, "fieldLabel": "IBAN", "flex": 63, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("IBAN","(sepa.AccountsByPartner.iban) ") }, "maxLength": 34, "name": "iban", "selectOnFocus": true });
    var bic1269 = new Lino.UppercaseTextField({ "fieldLabel": "BIC", "flex": 36, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("BIC","(sepa.AccountsByPartner.bic) ") }, "maxLength": 11, "name": "bic", "selectOnFocus": true });
    var main_1_panel1270 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ iban1268, bic1269 ], "labelWidth": 45, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remark1271 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Remark", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(sepa.AccountsByPartner.remark) ") }, "maxLength": 200, "name": "remark", "selectOnFocus": true });
    var main_panel1272 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1270, remark1271 ], "labelWidth": 63, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1272;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.faculties.DemandsByDemander.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 82,
  default_record_id: -99999,
  initComponent : function() {
    var skill1273 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Skill...", "fieldLabel": "Skill", "hidden": false, "hiddenName": "skillHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Skill","(faculties.DemandsByDemander.skill) ") }, "name": "skill", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.faculties.Skills.detail,Lino.faculties.Skills.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/DemandsByDemander/skill" }) }) });
    var importance1274 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Importance</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Importance","(faculties.DemandsByDemander.importance) How important this skill is for this demand.") }, "name": "importance", "selectOnFocus": true, "value": 100 });
    var main_panel1275 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ skill1273, importance1274 ], "labelWidth": 99, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1275;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.notes.Notes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 79,
  initComponent : function() {
    var date745 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "Date", "flex": 14, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date","(notes.Notes.date) ") }, "name": "date", "selectOnFocus": true });
    var time746 = Ext.create('Lino.TimeField',{ "fieldLabel": "Time", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Time","(notes.Notes.time) ") }, "name": "time", "selectOnFocus": true });
    var event_type747 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Event Type...", "fieldLabel": "Event Type (Form)", "flex": 36, "hidden": false, "hiddenName": "event_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Event Type (Form)","(notes.Notes.event_type) ") }, "name": "event_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.notes.EventTypes.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/Notes/event_type" }) }) });
    var type748 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Note Type...", "fieldLabel": "Note Type (Content)", "flex": 36, "hidden": false, "hiddenName": "typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Note Type (Content)","(notes.Notes.type) ") }, "name": "type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.notes.NoteTypes.detail,Lino.notes.NoteTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/Notes/type" }) }) });
    var main_1_panel749 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ date745, time746, event_type747, type748 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var subject750 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Subject", "flex": 51, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Subject","(notes.Notes.subject) ") }, "maxLength": 200, "name": "subject", "selectOnFocus": true });
    var project751 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 48, "hidden": false, "hiddenName": "projectHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(notes.Notes.project) ") }, "name": "project", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/Notes/project" }) }) });
    var main_2_panel752 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ subject750, project751 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var company753 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Organization...", "fieldLabel": "Recipient (Organization)", "flex": 33, "hidden": false, "hiddenName": "companyHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recipient (Organization)","(notes.Notes.company) ") }, "name": "company", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/Notes/company" }) }) });
    var contact_person754 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "Recipient (Person)", "flex": 33, "forceSelection": true, "hidden": false, "hiddenName": "contact_personHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recipient (Person)","(notes.Notes.contact_person) ") }, "name": "contact_person", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/Notes/contact_person" }) }) });
    var contact_role755 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Function...", "fieldLabel": "represented as", "flex": 33, "hidden": false, "hiddenName": "contact_roleHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("represented as","(notes.Notes.contact_role) ") }, "name": "contact_role", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/Notes/contact_role" }) }) });
    var main_3_panel756 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ company753, contact_person754, contact_role755 ], "labelWidth": 225, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var id757 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(notes.Notes.id) ") }, "name": "id", "readOnly": true });
    var user758 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 25, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(notes.Notes.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/Notes/user" }) }) });
    var language759 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Language", "flex": 20, "hidden": false, "hiddenName": "languageHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Language","(notes.Notes.language) ") }, "name": "language", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    var build_time760 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "build time", "flex": 41, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("build time","(notes.Notes.build_time) ") }, "name": "build_time", "readOnly": true, "value": "<br>" });
    var main_4_panel761 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id757, user758, language759, build_time760 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var body762 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Body", "flex": 55, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Body","(notes.Notes.body) ") }, "name": "body", "selectOnFocus": true });
    var main_panel763 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel749, main_2_panel752, main_3_panel756, main_4_panel761, body762 ], "labelWidth": 45, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel763;
    this.before_row_edit = function(record) {
      contact_person754.setContextValue('company', record ? record.data['companyHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      company753.on('change',Lino.chooser_handler(contact_person754,'company'));
      Lino.notes.Notes.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.accounts.Accounts.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 41,
  default_record_id: -99999,
  initComponent : function() {
    var ref1276 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 38, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(accounts.Accounts.ref) An optional unique name which can be used to reference a given\naccount.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var group1277 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Account Group...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Account Group</span>", "flex": 36, "hidden": false, "hiddenName": "groupHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Account Group","(accounts.Accounts.group) The account group to which this account belongs.  Points to\nan instance of Group.  If this field is empty, the\naccount won't appear in certain reports.") }, "name": "group", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Groups.detail,Lino.accounts.Groups.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/accounts/Accounts/group" }) }) });
    var type1278 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Account type</span>", "flex": 25, "forceSelection": true, "hidden": false, "hiddenName": "typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Account type","(accounts.Accounts.type) The account type of this account.  This points to an item of\nCommonAccounts.") }, "name": "type", "selectOnFocus": true, "store": Lino.accounts.AccountTypes });
    var main_1_panel1279 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref1276, group1277, type1278 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var name1280 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Designation</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(accounts.Accounts.name) The multilingual designation of this account, as the users see\nit.") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1281 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(accounts.Accounts.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1282 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(accounts.Accounts.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_2_panel1283 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name1280, name_fr1281, name_de1282 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1284 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1279, main_2_panel1283 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1284;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.Rooms.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 30,
  default_record_id: -99999,
  initComponent : function() {
    var id1285 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(cal.Rooms.id) ") }, "name": "id", "readOnly": true });
    var name1286 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(cal.Rooms.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1287 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(cal.Rooms.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1288 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(cal.Rooms.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1289 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1285, name1286, name_fr1287, name_de1288 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var company1290 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Organization...", "fieldLabel": "Responsible", "hidden": false, "hiddenName": "companyHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Responsible","(cal.Rooms.company) ") }, "name": "company", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Rooms/company" }) }) });
    var contact_person1291 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "Contact person", "forceSelection": true, "hidden": false, "hiddenName": "contact_personHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Contact person","(cal.Rooms.contact_person) ") }, "name": "contact_person", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Rooms/contact_person" }) }) });
    var main_panel1292 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1289, company1290, contact_person1291 ], "labelWidth": 135, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1292;
    this.before_row_edit = function(record) {
      contact_person1291.setContextValue('company', record ? record.data['companyHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      company1290.on('change',Lino.chooser_handler(contact_person1291,'company'));
      Lino.cal.Rooms.InsertFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.faculties.SkillTypes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 84,
  initComponent : function() {
    var id1293 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(faculties.SkillTypes.id) ") }, "name": "id", "readOnly": true });
    var name1294 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(faculties.SkillTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1295 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(faculties.SkillTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1296 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(faculties.SkillTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1297 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1293, name1294, name_fr1295, name_de1296 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1314 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1297 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1314;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.LifeGroups.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 60,
  initComponent : function() {
    var ref1315 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Legacy file number</span>", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Legacy file number","(courses.LifeGroups.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "preferred_with": 6, "selectOnFocus": true });
    var line1316 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Activity line...", "fieldLabel": "Activity line", "flex": 21, "hidden": false, "hiddenName": "lineHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity line","(courses.LifeGroups.line) ") }, "name": "line", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Lines.detail,Lino.courses.Lines.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/LifeGroups/line" }) }) });
    var teacher1317 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Instructor", "flex": 21, "hidden": false, "hiddenName": "teacherHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Instructor","(courses.LifeGroups.teacher) ") }, "name": "teacher", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/LifeGroups/teacher" }) }) });
    var workflow_buttons_disp1318 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 32, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(courses.LifeGroups.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var general_1_panel1319 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref1315, line1316, teacher1317, workflow_buttons_disp1318 ], "labelWidth": 171, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var room1320 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Room...", "fieldLabel": "Room", "flex": 32, "hidden": false, "hiddenName": "roomHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Room","(courses.LifeGroups.room) ") }, "name": "room", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.Rooms.detail,Lino.cal.Rooms.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/LifeGroups/room" }) }) });
    var start_date1321 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(courses.LifeGroups.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var end_date1322 = Ext.create('Lino.DateField',{ "fieldLabel": "End Date", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Date","(courses.LifeGroups.end_date) ") }, "name": "end_date", "selectOnFocus": true });
    var start_time1323 = Ext.create('Lino.TimeField',{ "fieldLabel": "Start time", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start time","(courses.LifeGroups.start_time) ") }, "name": "start_time", "selectOnFocus": true });
    var end_time1324 = Ext.create('Lino.TimeField',{ "fieldLabel": "End Time", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Time","(courses.LifeGroups.end_time) ") }, "name": "end_time", "selectOnFocus": true });
    var general_2_panel1325 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ room1320, start_date1321, end_date1322, start_time1323, end_time1324 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var partner1326 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 48, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(courses.LifeGroups.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/LifeGroups/partner" }) }) });
    var name1327 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation", "flex": 51, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(courses.LifeGroups.name) ") }, "maxLength": 100, "name": "name", "selectOnFocus": true });
    var general_3_panel1328 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ partner1326, name1327 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remark1329 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remark", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(courses.LifeGroups.remark) ") }, "name": "remark", "selectOnFocus": true });
    var general_panel1330 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel1319, general_2_panel1325, general_3_panel1328, remark1329 ], "labelWidth": 63, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var enrolments_until1331 = Ext.create('Lino.DateField',{ "fieldLabel": "Enrolments until", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Enrolments until","(courses.LifeGroups.enrolments_until) ") }, "name": "enrolments_until", "selectOnFocus": true });
    var fee1332 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff...", "fieldLabel": "Default participation fee", "flex": 22, "forceSelection": true, "hidden": false, "hiddenName": "feeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Default participation fee","(courses.LifeGroups.fee) ") }, "name": "fee", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.Products.detail,Lino.products.Products.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/LifeGroups/fee" }) }) });
    var max_places1333 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Available places</span>", "flex": 14, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Available places","(courses.LifeGroups.max_places) Maximum number of participants") }, "name": "max_places", "selectOnFocus": true });
    var confirmed1334 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Confirmed", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Confirmed","(courses.LifeGroups.confirmed) ") }, "name": "confirmed", "readOnly": true });
    var free_places1335 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Free places", "flex": 14, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Free places","(courses.LifeGroups.free_places) ") }, "name": "free_places", "readOnly": true });
    var print_actions_disp1336 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Print", "flex": 22, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Print","(courses.LifeGroups.print_actions) ") }, "name": "print_actions", "readOnly": true, "value": "" });
    var enrolments_top_panel1337 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ enrolments_until1331, fee1332, max_places1333, confirmed1334, free_places1335, print_actions_disp1336 ], "labelWidth": 234, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var enrolments_panel1339 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ enrolments_top_panel1337 ], "labelWidth": 99, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Enrolments" });
    var every_unit1340 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Recurrency", "flex": 47, "forceSelection": true, "hidden": false, "hiddenName": "every_unitHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recurrency","(courses.LifeGroups.every_unit) ") }, "name": "every_unit", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.Recurrencies) });
    var every1341 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "Repeat every", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Repeat every","(courses.LifeGroups.every) ") }, "name": "every", "selectOnFocus": true });
    var max_date1342 = Ext.create('Lino.DateField',{ "fieldLabel": "Generate events until", "flex": 29, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Generate events until","(courses.LifeGroups.max_date) ") }, "name": "max_date", "selectOnFocus": true });
    var max_events1343 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Number of events", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Number of events","(courses.LifeGroups.max_events) ") }, "name": "max_events", "selectOnFocus": true });
    var events_1_panel1344 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ every_unit1340, every1341, max_date1342, max_events1343 ], "labelWidth": 198, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var monday1345 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Monday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Monday","(courses.LifeGroups.monday) ") }, "name": "monday", "selectOnFocus": true });
    var tuesday1346 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Tuesday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Tuesday","(courses.LifeGroups.tuesday) ") }, "name": "tuesday", "selectOnFocus": true });
    var wednesday1347 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Wednesday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Wednesday","(courses.LifeGroups.wednesday) ") }, "name": "wednesday", "selectOnFocus": true });
    var thursday1348 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Thursday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Thursday","(courses.LifeGroups.thursday) ") }, "name": "thursday", "selectOnFocus": true });
    var friday1349 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Friday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Friday","(courses.LifeGroups.friday) ") }, "name": "friday", "selectOnFocus": true });
    var saturday1350 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Saturday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Saturday","(courses.LifeGroups.saturday) ") }, "name": "saturday", "selectOnFocus": true });
    var sunday1351 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Sunday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Sunday","(courses.LifeGroups.sunday) ") }, "name": "sunday", "selectOnFocus": true });
    var events_2_panel1352 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ monday1345, tuesday1346, wednesday1347, thursday1348, friday1349, saturday1350, sunday1351 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var events_panel1354 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ events_1_panel1344, events_2_panel1352 ], "labelWidth": 153, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Events" });
    var state1358 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 14, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(courses.LifeGroups.state) The ChoiceList of the state field must have at least two items\nnamed \"draft\" and \"registered\".\nThere may be additional states.\nEvery state must have an extra attribute \"editable\".") }, "name": "state", "selectOnFocus": true, "store": Lino.courses.CourseStates });
    var user1359 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 26, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(courses.LifeGroups.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/LifeGroups/user" }) }) });
    var payment_term1360 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Payment Term...", "fieldLabel": "Payment Term", "flex": 26, "hidden": false, "hiddenName": "payment_termHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Payment Term","(courses.LifeGroups.payment_term) ") }, "name": "payment_term", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.PaymentTerms.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/LifeGroups/payment_term" }) }) });
    var paper_type1361 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Paper type...", "fieldLabel": "Paper type", "flex": 26, "hidden": false, "hiddenName": "paper_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Paper type","(courses.LifeGroups.paper_type) ") }, "name": "paper_type", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/LifeGroups/paper_type" }) }) });
    var id1362 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(courses.LifeGroups.id) ") }, "name": "id", "readOnly": true });
    var more_1_panel1363 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ state1358, user1359, payment_term1360, paper_type1361, id1362 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var more_panel1367 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ more_1_panel1363 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "More" });
    var main_panel1368 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel1330, enrolments_panel1339, events_panel1354, more_panel1367 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel1368;
    this.before_row_edit = function(record) {
      fee1332.setContextValue('line', record ? record.data['lineHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      line1316.on('change',Lino.chooser_handler(fee1332,'line'));
      Lino.courses.LifeGroups.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.products.Products.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 28,
  initComponent : function() {
    var name1369 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(products.Products.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1370 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(products.Products.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1371 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(products.Products.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var id1372 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(products.Products.id) ") }, "name": "id", "readOnly": true });
    var general_1_panel1373 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name1369, name_fr1370, name_de1371, id1372 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var cat1374 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff Category...", "fieldLabel": "Category", "flex": 38, "hidden": false, "hiddenName": "catHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Category","(products.Products.cat) ") }, "name": "cat", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.ProductCats.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/products/Products/cat" }) }) });
    var sales_price1375 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Sales price", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Sales price","(products.Products.sales_price) ") }, "name": "sales_price", "selectOnFocus": true });
    var number_of_events1376 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Number of events</span>", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Number of events","(products.Products.number_of_events) Number of calendar events paid per invoicing.") }, "name": "number_of_events", "selectOnFocus": true });
    var min_asset1377 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Invoice threshold</span>", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Invoice threshold","(products.Products.min_asset) Minimum quantity to pay in advance.") }, "name": "min_asset", "selectOnFocus": true, "value": 1 });
    var general_2_panel1378 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ cat1374, sales_price1375, number_of_events1376, min_asset1377 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var vat_class1379 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "VAT Class", "flex": 26, "forceSelection": true, "hidden": false, "hiddenName": "vat_classHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT Class","(products.Products.vat_class) ") }, "name": "vat_class", "selectOnFocus": true, "store": [['','']].concat(Lino.vat.VatClasses) });
    var sales_account1380 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Account...", "fieldLabel": "Sales Base account", "flex": 52, "hidden": false, "hiddenName": "sales_accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Sales Base account","(products.Products.sales_account) ") }, "name": "sales_account", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/products/Products/sales_account" }) }) });
    var delivery_unit1381 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "Delivery unit", "flex": 21, "forceSelection": true, "hidden": false, "hiddenName": "delivery_unitHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Delivery unit","(products.Products.delivery_unit) ") }, "name": "delivery_unit", "selectOnFocus": true, "store": Lino.products.DeliveryUnit, "value": "20" });
    var general_3_panel1382 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ vat_class1379, sales_account1380, delivery_unit1381 ], "labelWidth": 171, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var description1383 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Long description", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Long description","(products.Products.description) ") }, "name": "description", "selectOnFocus": true });
    var description_fr1384 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Long description (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Long description (fr)","(products.Products.description_fr) ") }, "name": "description_fr", "selectOnFocus": true });
    var description_de1385 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Long description (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Long description (de)","(products.Products.description_de) ") }, "name": "description_de", "selectOnFocus": true });
    var general_4_panel1386 = Ext.create('Ext.Panel',{ "border": false, "flex": 62, "frame": false, "hideCheckBoxLabels": true, "items": [ description1383, description_fr1384, description_de1385 ], "labelWidth": 198, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var general_panel1387 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel1373, general_2_panel1378, general_3_panel1382, general_4_panel1386 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var main_panel1458 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel1387 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel1458;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.products.ProductCats.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 27,
  initComponent : function() {
    var id1459 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(products.ProductCats.id) ") }, "name": "id", "readOnly": true });
    var name1460 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(products.ProductCats.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1461 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(products.ProductCats.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1462 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(products.ProductCats.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1463 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1459, name1460, name_fr1461, name_de1462 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var description1464 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "description", "flex": 5, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("description","(products.ProductCats.description) ") }, "name": "description", "region": "center", "selectOnFocus": true, "split": true });
    var main_panel1484 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1463, description1464 ], "labelWidth": 108, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1484;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.ana.Accounts.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 71,
  initComponent : function() {
    var ref507 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(ana.Accounts.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var designation508 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(ana.Accounts.designation) ") }, "maxLength": 200, "name": "designation", "selectOnFocus": true });
    var designation_fr509 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(ana.Accounts.designation_fr) ") }, "maxLength": 200, "name": "designation_fr", "selectOnFocus": true });
    var designation_de510 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(ana.Accounts.designation_de) ") }, "maxLength": 200, "name": "designation_de", "selectOnFocus": true });
    var main_1_panel511 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref507, designation508, designation_fr509, designation_de510 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var group512 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Analytical account group...", "fieldLabel": "Group", "flex": 80, "hidden": false, "hiddenName": "groupHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Group","(ana.Accounts.group) ") }, "name": "group", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ana.Groups.detail,Lino.ana.Groups.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Accounts/group" }) }) });
    var id513 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(ana.Accounts.id) ") }, "name": "id", "readOnly": true });
    var main_2_panel514 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ group512, id513 ], "labelWidth": 54, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel538 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel511, main_2_panel514 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel538;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.plausibility.Checkers.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  disable_editing: true,
  initComponent : function() {
    var value1485 = Ext.create('Ext.form.TextField',{ "fieldLabel": "value", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("value","(plausibility.Checkers.value) ") }, "maxLength": 20, "name": "value", "readOnly": true });
    var text1486 = Ext.create('Ext.form.TextField',{ "fieldLabel": "text", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("text","(plausibility.Checkers.text) ") }, "maxLength": 50, "name": "text", "readOnly": true });
    var main_1_panel1487 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ value1485, text1486 ], "labelWidth": 54, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1507 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1487 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1507;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.faculties.DemandsByDemander.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 82,
  initComponent : function() {
    var skill1508 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Skill...", "fieldLabel": "Skill", "hidden": false, "hiddenName": "skillHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Skill","(faculties.DemandsByDemander.skill) ") }, "name": "skill", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.faculties.Skills.detail,Lino.faculties.Skills.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/DemandsByDemander/skill" }) }) });
    var importance1509 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Importance</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Importance","(faculties.DemandsByDemander.importance) How important this skill is for this demand.") }, "name": "importance", "selectOnFocus": true, "value": 100 });
    var main_panel1510 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ skill1508, importance1509 ], "labelWidth": 99, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1510;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.about.About.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  disable_editing: true,
  initComponent : function() {
    var server_status_disp1512 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Server status", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Server status","(about.About.server_status) ") }, "name": "server_status", "readOnly": true, "value": "" });
    var main_panel1513 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ { "flex": 25, "html": "<div class=\"htmlText\"><span>This is <a href=\"http://tera.lino-framework.org/\" target=\"_blank\">Lino Tera for Lydia</a> 17.10.0 using <a href=\"http://www.lino-framework.org\" target=\"_blank\">Lino</a> 17.10.1, <a href=\"http://www.djangoproject.com\" target=\"_blank\">Django</a> 1.11.2, <a href=\"http://www.python.org/\" target=\"_blank\">Python</a> 2.7.12, <a href=\"http://babel.edgewall.org/\" target=\"_blank\">Babel</a> 2.4.0, <a href=\"http://jinja.pocoo.org/\" target=\"_blank\">Jinja</a> 2.9.6, <a href=\"http://labix.org/python-dateutil\" target=\"_blank\">python-dateutil</a> 2.6.0, <a href=\"http://getbootstrap.com\" target=\"_blank\">Bootstrap</a> 3.3.4, <a href=\"http://www.sencha.com\" target=\"_blank\">ExtJS</a> <a href=\"#\" onclick=\"alert('ExtJS client version is ' + Ext.version);\" title=\"Click to see ExtJS client version\">(version)</a>, <a href=\"http://www.famfamfam.com/lab/icons/silk/\" target=\"_blank\">Silk Icons</a> 1.3, <a href=\"http://appyframework.org/pod.html\" target=\"_blank\">Appy</a> 0.9.7 (2017/03/21 18:03)</span><p>Languages: en, fr, de</p><p>Server uptime : <b>18/10/2017 at 15:32</b> (UTC)</p><p>This is a Lino demo site.</p><p>We are running with simulated date set to Thursday, 12 March 2015.</p><p>Source timestamps:</p><ul><li>django : <b>27/06/2017 at 08:22</b></li><li>atelier : <b>13/10/2017 at 09:33</b></li><li>lino_tera : <b>13/10/2017 at 09:33</b></li><li>lino_extjs6 : <b>18/10/2017 at 11:56</b></li><li>lino_xl : <b>18/10/2017 at 15:30</b></li><li>lino : <b>18/10/2017 at 15:31</b></li></ul></div>", "xtype": "label" }, server_status_disp1512 ], "labelWidth": 126, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1513;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.accounts.Groups.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 42,
  initComponent : function() {
    var ref1514 = Ext.create('Ext.form.TextField',{ "fieldLabel": "ref", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ref","(accounts.Groups.ref) ") }, "maxLength": 20, "name": "ref", "selectOnFocus": true });
    var name1515 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(accounts.Groups.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1516 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(accounts.Groups.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1517 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(accounts.Groups.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1518 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref1514, name1515, name_fr1516, name_de1517 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var account_type1519 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Account type", "flex": 73, "forceSelection": true, "hidden": false, "hiddenName": "account_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Account type","(accounts.Groups.account_type) ") }, "name": "account_type", "selectOnFocus": true, "store": [['','']].concat(Lino.accounts.AccountTypes) });
    var id1520 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 26, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(accounts.Groups.id) ") }, "name": "id", "readOnly": true });
    var main_2_panel1521 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ account_type1519, id1520 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1569 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1518, main_2_panel1521 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1569;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.ledger.Situation.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  disable_editing: true,
  initComponent : function() {
    var body_htmlbox1570 = Ext.create('Lino.HtmlBoxPanel',{ "always_enabled": true, "bodyStyle": "overflow-x:hidden;", "containing_panel": this, "items": Ext.create('Ext.Component',{scrollable:true}), "layout": "fit", "listeners": { "render": Lino.quicktip_renderer(null,"(ledger.Situation.body) ") }, "name": "body", "value": "" });
    var main_panel1571 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ body_htmlbox1570 ], "labelWidth": 0, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1571;
    this.before_row_edit = function(record) {
      body_htmlbox1570.refresh();
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.Tasks.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 29,
  default_record_id: -99999,
  initComponent : function() {
    var summary804 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Short description", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Short description","(cal.Tasks.summary) ") }, "maxLength": 200, "name": "summary", "selectOnFocus": true });
    var user805 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 50, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(cal.Tasks.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Tasks/user" }) }) });
    var project806 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 50, "hidden": false, "hiddenName": "projectHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(cal.Tasks.project) ") }, "name": "project", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Tasks/project" }) }) });
    var main_2_panel807 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ user805, project806 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel808 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ summary804, main_2_panel807 ], "labelWidth": 162, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel808;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.excerpts.ExcerptTypes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 86,
  initComponent : function() {
    var id1572 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(excerpts.ExcerptTypes.id) ") }, "name": "id", "readOnly": true });
    var name1573 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Designation</span>", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(excerpts.ExcerptTypes.name) The designation of this excerpt type.\nOne field for every language.") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1574 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(excerpts.ExcerptTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1575 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(excerpts.ExcerptTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1576 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1572, name1573, name_fr1574, name_de1575 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var content_type1577 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a content type...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Model</span>", "flex": 15, "hidden": false, "hiddenName": "content_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Model","(excerpts.ExcerptTypes.content_type) The model that can issue printouts of this type.") }, "name": "content_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.gfks.ContentTypes.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/ExcerptTypes/content_type" }) }) });
    var build_method1578 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Build method</span>", "flex": 15, "forceSelection": true, "hidden": false, "hiddenName": "build_methodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Build method","(excerpts.ExcerptTypes.build_method) See lino.modlib.printing.mixins.PrintableType.build_method.") }, "name": "build_method", "selectOnFocus": true, "store": [['','']].concat(Lino.printing.BuildMethods) });
    var template1579 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Template</span>", "flex": 15, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Template","(excerpts.ExcerptTypes.template) The main template to be used when printing an excerpt of this type.") }, "name": "template", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/ExcerptTypes/template" }) }) });
    var body_template1580 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Body template</span>", "flex": 15, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Body template","(excerpts.ExcerptTypes.body_template) The body template to be used when         rendering a printable of this type. This is a list of files         with extension `.body.html`.") }, "name": "body_template", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/ExcerptTypes/body_template" }) }) });
    var email_template1581 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Email template</span>", "flex": 15, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Email template","(excerpts.ExcerptTypes.email_template) The name of the file to be used as template when creating an email from a mailable of this type.") }, "name": "email_template", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/ExcerptTypes/email_template" }) }) });
    var shortcut1582 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Excerpt shortcut</span>", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Excerpt shortcut","(excerpts.ExcerptTypes.shortcut) Optional pointer to a shortcut field.  If this is not empty, then\nthe given shortcut field will manage excerpts of this type.") }, "maxLength": 50, "name": "shortcut", "selectOnFocus": true });
    var main_2_panel1583 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ content_type1577, build_method1578, template1579, body_template1580, email_template1581, shortcut1582 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var primary1584 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Primary", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Primary","(excerpts.ExcerptTypes.primary) Whether this is the default type to use for this model. There's at most one primary type per model. Enabling this field will automatically make the other types non-primary.") }, "name": "primary", "selectOnFocus": true });
    var print_directly1585 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Print directly", "checked": true, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Print directly","(excerpts.ExcerptTypes.print_directly) ") }, "name": "print_directly", "selectOnFocus": true });
    var certifying1586 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Certifying", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Certifying","(excerpts.ExcerptTypes.certifying) Whether an excerpt of this type is a unique printout.") }, "name": "certifying", "selectOnFocus": true });
    var print_recipient1587 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Print recipient", "checked": true, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Print recipient","(excerpts.ExcerptTypes.print_recipient) Whether to print a recipient field in document.") }, "name": "print_recipient", "selectOnFocus": true });
    var backward_compat1588 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Backward compatible", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Backward compatible","(excerpts.ExcerptTypes.backward_compat) Check this to have `this` in template context point to owner instead of excerpt.") }, "name": "backward_compat", "selectOnFocus": true });
    var attach_to_email1589 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Attach to email", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Attach to email","(excerpts.ExcerptTypes.attach_to_email) Whether the printable file should be attached to the email\nwhen creating an email from a mailable of this type.\n") }, "name": "attach_to_email", "selectOnFocus": true });
    var main_3_panel1590 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ primary1584, print_directly1585, certifying1586, print_recipient1587, backward_compat1588, attach_to_email1589 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1626 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1576, main_2_panel1583, main_3_panel1590 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1626;
    this.before_row_edit = function(record) {
      template1579.setContextValue('build_method', record ? record.data['build_methodHidden'] : undefined);
      template1579.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
      body_template1580.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
      email_template1581.setContextValue('content_type', record ? record.data['content_typeHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      build_method1578.on('change',Lino.chooser_handler(template1579,'build_method'));
      content_type1577.on('change',Lino.chooser_handler(template1579,'content_type'));
      content_type1577.on('change',Lino.chooser_handler(body_template1580,'content_type'));
      content_type1577.on('change',Lino.chooser_handler(email_template1581,'content_type'));
      Lino.excerpts.ExcerptTypes.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Lines.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 61,
  default_record_id: -99999,
  initComponent : function() {
    var name855 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Designation</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(courses.Lines.name) The designation of this activity line as seen by the user\ne.g. when selecting the line.") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr856 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(courses.Lines.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de857 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(courses.Lines.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel858 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name855, name_fr856, name_de857 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ref859 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 51, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(courses.Lines.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var topic860 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Topic...", "fieldLabel": "Topic", "flex": 48, "hidden": false, "hiddenName": "topicHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Topic","(courses.Lines.topic) ") }, "name": "topic", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Topics.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Lines/topic" }) }) });
    var main_2_panel861 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref859, topic860 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var every_unit862 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Recurrency", "flex": 45, "forceSelection": true, "hidden": false, "hiddenName": "every_unitHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recurrency","(courses.Lines.every_unit) ") }, "name": "every_unit", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.Recurrencies) });
    var every863 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "Repeat every", "flex": 10, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Repeat every","(courses.Lines.every) ") }, "name": "every", "selectOnFocus": true, "value": 1 });
    var event_type864 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Calendar entry type...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Calendar entry type</span>", "flex": 43, "hidden": false, "hiddenName": "event_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Calendar entry type","(courses.Lines.event_type) The type of calendar entries to be generated. If this is empty, no calendar entries will be generated.") }, "name": "event_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.EventTypes.detail,Lino.cal.EventTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Lines/event_type" }) }) });
    var main_3_panel865 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ every_unit862, every863, event_type864 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var description866 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description","(courses.Lines.description) ") }, "name": "description", "selectOnFocus": true });
    var description_fr867 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description (fr)","(courses.Lines.description_fr) ") }, "name": "description_fr", "selectOnFocus": true });
    var description_de868 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description (de)","(courses.Lines.description_de) ") }, "name": "description_de", "selectOnFocus": true });
    var main_4_panel869 = Ext.create('Ext.Panel',{ "border": false, "flex": 62, "frame": false, "hideCheckBoxLabels": true, "items": [ description866, description_fr867, description_de868 ], "labelWidth": 153, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var main_panel870 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel858, main_2_panel861, main_3_panel865, main_4_panel869 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel870;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.bevats.Declarations.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 69,
  default_record_id: -99999,
  initComponent : function() {
    var entry_date1627 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(bevats.Declarations.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var start_period1628 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "Start period", "hidden": false, "hiddenName": "start_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start period","(bevats.Declarations.start_period) ") }, "name": "start_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/Declarations/start_period" }) }) });
    var end_period1629 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "End period", "hidden": false, "hiddenName": "end_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End period","(bevats.Declarations.end_period) ") }, "name": "end_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/bevats/Declarations/end_period" }) }) });
    var main_panel1630 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ entry_date1627, start_period1628, end_period1629 ], "labelWidth": 117, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1630;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Therapies.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 60,
  default_record_id: -99999,
  initComponent : function() {
    var line1631 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Activity line...", "fieldLabel": "Activity line", "flex": 50, "hidden": false, "hiddenName": "lineHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity line","(courses.Therapies.line) ") }, "name": "line", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Lines.detail,Lino.courses.Lines.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Therapies/line" }) }) });
    var partner1632 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 50, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(courses.Therapies.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Therapies/partner" }) }) });
    var main_1_panel1633 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ line1631, partner1632 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var start_date1634 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(courses.Therapies.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var main_panel1635 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1633, start_date1634 ], "labelWidth": 99, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1635;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.accounts.Groups.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 42,
  default_record_id: -99999,
  initComponent : function() {
    var name1636 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(accounts.Groups.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1637 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(accounts.Groups.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1638 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(accounts.Groups.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1639 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name1636, name_fr1637, name_de1638 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var account_type1640 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Account type", "flex": 40, "forceSelection": true, "hidden": false, "hiddenName": "account_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Account type","(accounts.Groups.account_type) ") }, "name": "account_type", "selectOnFocus": true, "store": [['','']].concat(Lino.accounts.AccountTypes) });
    var ref1641 = Ext.create('Ext.form.TextField',{ "fieldLabel": "ref", "flex": 60, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ref","(accounts.Groups.ref) ") }, "maxLength": 20, "name": "ref", "selectOnFocus": true });
    var main_2_panel1642 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ account_type1640, ref1641 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1643 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1639, main_2_panel1642 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1643;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.LifeGroups.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 60,
  default_record_id: -99999,
  initComponent : function() {
    var line1644 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Activity line...", "fieldLabel": "Activity line", "flex": 50, "hidden": false, "hiddenName": "lineHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity line","(courses.LifeGroups.line) ") }, "name": "line", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Lines.detail,Lino.courses.Lines.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/LifeGroups/line" }) }) });
    var partner1645 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 50, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(courses.LifeGroups.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/LifeGroups/partner" }) }) });
    var main_1_panel1646 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ line1644, partner1645 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var start_date1647 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(courses.LifeGroups.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var main_panel1648 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1646, start_date1647 ], "labelWidth": 99, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1648;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.humanlinks.Links.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 26,
  initComponent : function() {
    var parent1649 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Person...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Who is...</span>", "hidden": false, "hiddenName": "parentHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Who is...","(humanlinks.Links.parent) Pointer to the person who is \"parent\".") }, "name": "parent", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/humanlinks/Links/parent" }) }) });
    var type1650 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Parency type</span>", "forceSelection": true, "hidden": false, "hiddenName": "typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Parency type","(humanlinks.Links.type) The type of link.  Pointer to LinkTypes.") }, "name": "type", "selectOnFocus": true, "store": Lino.humanlinks.LinkTypes });
    var child1651 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">To whom...</span>", "hidden": false, "hiddenName": "childHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("To whom...","(humanlinks.Links.child) Pointer to the person who is \"child\".") }, "name": "child", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/humanlinks/Links/child" }) }) });
    var main_panel1652 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ parent1649, type1650, child1651 ], "labelWidth": 117, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1652;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.EnrolmentsByPupil.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 58,
  default_record_id: -99999,
  initComponent : function() {
    var course_area1653 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Layout", "forceSelection": true, "hidden": false, "hiddenName": "course_areaHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Layout","(courses.EnrolmentsByPupil.course_area) ") }, "name": "course_area", "readOnly": true, "store": [['','']].concat(Lino.courses.CourseAreas) });
    var course1654 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Activity...", "fieldLabel": "Activity", "forceSelection": true, "hidden": false, "hiddenName": "courseHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(courses.EnrolmentsByPupil.course) ") }, "name": "course", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/EnrolmentsByPupil/course" }) }) });
    var places1655 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Places used</span>", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Places used","(courses.EnrolmentsByPupil.places) The number of participants in this enrolment.") }, "name": "places", "selectOnFocus": true, "value": 1 });
    var option1656 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff...", "fieldLabel": "Option", "flex": 80, "forceSelection": true, "hidden": false, "hiddenName": "optionHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Option","(courses.EnrolmentsByPupil.option) ") }, "name": "option", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.Products.detail,Lino.products.Products.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/EnrolmentsByPupil/option" }) }) });
    var main_3_panel1657 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ places1655, option1656 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remark1658 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Remark", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(courses.EnrolmentsByPupil.remark) ") }, "maxLength": 200, "name": "remark", "selectOnFocus": true });
    var request_date1659 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "Date of request", "flex": 39, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date of request","(courses.EnrolmentsByPupil.request_date) ") }, "name": "request_date", "selectOnFocus": true });
    var user1660 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 60, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(courses.EnrolmentsByPupil.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/EnrolmentsByPupil/user" }) }) });
    var main_5_panel1661 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ request_date1659, user1660 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1662 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ course_area1653, course1654, main_3_panel1657, remark1658, main_5_panel1661 ], "labelWidth": 81, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1662;
    this.before_row_edit = function(record) {
      course1654.setContextValue('course_area', record ? record.data['course_areaHidden'] : undefined);
      course1654.setContextValue('request_date', record ? record.data['request_date'] : undefined);
      option1656.setContextValue('course', record ? record.data['courseHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      course_area1653.on('change',Lino.chooser_handler(course1654,'course_area'));
      request_date1659.on('change',Lino.chooser_handler(course1654,'request_date'));
      course1654.on('change',Lino.chooser_handler(option1656,'course'));
      Lino.courses.EnrolmentsByPupil.InsertFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.accounts.Accounts.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 41,
  initComponent : function() {
    var ref1548 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 13, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(accounts.Accounts.ref) An optional unique name which can be used to reference a given\naccount.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var name1549 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Designation</span>", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(accounts.Accounts.name) The multilingual designation of this account, as the users see\nit.") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1550 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(accounts.Accounts.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1551 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(accounts.Accounts.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1552 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref1548, name1549, name_fr1550, name_de1551 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var group1553 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Account Group...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Account Group</span>", "flex": 18, "hidden": false, "hiddenName": "groupHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Account Group","(accounts.Accounts.group) The account group to which this account belongs.  Points to\nan instance of Group.  If this field is empty, the\naccount won't appear in certain reports.") }, "name": "group", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Groups.detail,Lino.accounts.Groups.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/accounts/Accounts/group" }) }) });
    var type1554 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Account type</span>", "flex": 12, "forceSelection": true, "hidden": false, "hiddenName": "typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Account type","(accounts.Accounts.type) The account type of this account.  This points to an item of\nCommonAccounts.") }, "name": "type", "selectOnFocus": true, "store": Lino.accounts.AccountTypes });
    var id1555 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 4, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(accounts.Accounts.id) ") }, "name": "id", "readOnly": true });
    var default_amount1556 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Default amount</span>", "flex": 9, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Default amount","(accounts.Accounts.default_amount) The default amount to book in bank statements or journal\nentries when this account has been selected manually. The\ndefault booking direction is that of the type.") }, "name": "default_amount", "selectOnFocus": true });
    var common_account1557 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Common account", "flex": 23, "forceSelection": true, "hidden": false, "hiddenName": "common_accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Common account","(accounts.Accounts.common_account) ") }, "name": "common_account", "selectOnFocus": true, "store": [['','']].concat(Lino.accounts.CommonAccounts) });
    var vat_column1558 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "VAT column", "flex": 32, "forceSelection": true, "hidden": false, "hiddenName": "vat_columnHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT column","(accounts.Accounts.vat_column) ") }, "name": "vat_column", "selectOnFocus": true, "store": [['','']].concat(Lino.vat.VatColumns) });
    var main_2_panel1559 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ group1553, type1554, id1555, default_amount1556, common_account1557, vat_column1558 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var needs_partner1560 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Needs partner", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Needs partner","(accounts.Accounts.needs_partner) Whether bookings to this account need a partner specified.") }, "name": "needs_partner", "selectOnFocus": true });
    var clearable1561 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Clearable", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Clearable","(accounts.Accounts.clearable) ") }, "name": "clearable", "selectOnFocus": true });
    var purchases_allowed1562 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Purchases", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Purchases","(accounts.Accounts.purchases_allowed) ") }, "name": "purchases_allowed", "selectOnFocus": true });
    var needs_ana1563 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Needs analytical account", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Needs analytical account","(accounts.Accounts.needs_ana) ") }, "name": "needs_ana", "selectOnFocus": true });
    var ana_account1564 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Analytical account...", "fieldLabel": "Analytical account", "flex": 33, "hidden": false, "hiddenName": "ana_accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Analytical account","(accounts.Accounts.ana_account) ") }, "name": "ana_account", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ana.Accounts.detail,Lino.ana.Accounts.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/accounts/Accounts/ana_account" }) }) });
    var main_3_panel1565 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ needs_partner1560, clearable1561, purchases_allowed1562, needs_ana1563, ana_account1564 ], "labelWidth": 225, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1567 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1552, main_2_panel1559, main_3_panel1565 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1567;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.tera.Clients.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 89,
  initComponent : function() {
    var overview_htmlbox1663 = Ext.create('Lino.HtmlBoxPanel',{ "always_enabled": true, "bodyStyle": "overflow-x:hidden;", "containing_panel": this, "flex": 35, "items": Ext.create('Ext.Component',{scrollable:true}), "layout": "fit", "listeners": { "render": Lino.quicktip_renderer("Description","(tera.Clients.overview) ") }, "name": "overview", "title": "Description", "value": "" });
    var id1664 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 40, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(tera.Clients.id) ") }, "name": "id", "readOnly": true });
    var national_id1665 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">National ID</span>", "flex": 60, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("National ID","(tera.Clients.national_id) The SSIN. It is a nullable char field declared unique. It\nis not validated directly because that would cause problems\nwith legacy data where SSINs need manual control. See also\nBeIdCardHolderChecker.") }, "maxLength": 200, "name": "national_id", "selectOnFocus": true });
    var general2_1_panel1666 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1664, national_id1665 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var birth_date1667 = Ext.create('Lino.IncompleteDateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Birth date</span>", "flex": 37, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Birth date","(tera.Clients.birth_date) Uncomplete dates are allowed, e.g. \n\"00.00.1980\" means \"some day in 1980\", \n\"00.07.1980\" means \"in July 1980\"\nor \"23.07.0000\" means \"on a 23th of July\".") }, "name": "birth_date", "selectOnFocus": true });
    var age_disp1668 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Age", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Age","(tera.Clients.age) ") }, "name": "age", "readOnly": true, "value": "" });
    var gender1669 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Gender</span>", "flex": 31, "forceSelection": true, "hidden": false, "hiddenName": "genderHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Gender","(tera.Clients.gender) The sex of this person (male or female).") }, "name": "gender", "selectOnFocus": true, "store": [['','']].concat(Lino.system.Genders) });
    var general2_2_panel1670 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ birth_date1667, age_disp1668, gender1669 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var professional_state1671 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Professional situation", "forceSelection": true, "hidden": false, "hiddenName": "professional_stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Professional situation","(tera.Clients.professional_state) ") }, "name": "professional_state", "selectOnFocus": true, "store": [['','']].concat(Lino.tera.ProfessionalStates) });
    var client_state1672 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "State", "flex": 35, "forceSelection": true, "hidden": false, "hiddenName": "client_stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(tera.Clients.client_state) ") }, "name": "client_state", "selectOnFocus": true, "store": Lino.coachings.ClientStates });
    var user1673 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Primary coach", "flex": 64, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Primary coach","(tera.Clients.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/tera/Clients/user" }) }) });
    var general2_4_panel1674 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ client_state1672, user1673 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var obsoletes1675 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Client...", "fieldLabel": "Obsoletes", "flex": 40, "hidden": false, "hiddenName": "obsoletesHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Obsoletes","(tera.Clients.obsoletes) ") }, "name": "obsoletes", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.tera.Clients.detail,Lino.tera.Clients.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/tera/Clients/obsoletes" }) }) });
    var tariff1676 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "Client tariff", "flex": 20, "forceSelection": true, "hidden": false, "hiddenName": "tariffHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Client tariff","(tera.Clients.tariff) ") }, "name": "tariff", "selectOnFocus": true, "store": Lino.tera.PartnerTariffs, "value": "10" });
    var team1677 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Department...", "fieldLabel": "Department", "flex": 40, "hidden": false, "hiddenName": "teamHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Department","(tera.Clients.team) ") }, "name": "team", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.teams.Teams.detail,Lino.teams.Teams.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/tera/Clients/team" }) }) });
    var general2_5_panel1678 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ obsoletes1675, tariff1676, team1677 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var general2_panel1679 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 47, "frame": true, "hideCheckBoxLabels": true, "items": [ general2_1_panel1666, general2_2_panel1670, professional_state1671, general2_4_panel1674, general2_5_panel1678 ], "labelWidth": 207, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var image_htmlbox1680 = Ext.create('Lino.HtmlBoxPanel',{ "always_enabled": true, "bodyStyle": "overflow-x:hidden;", "containing_panel": this, "flex": 17, "items": Ext.create('Ext.Component',{scrollable:true}), "layout": "fit", "listeners": { "render": Lino.quicktip_renderer(null,"(tera.Clients.image) ") }, "name": "image", "value": "" });
    var general_1_panel1681 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ overview_htmlbox1663, general2_panel1679, image_htmlbox1680 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var general_panel1683 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel1681 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var first_name1684 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">First name</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("First name","(tera.Clients.first_name) The first name, also known as given name.") }, "maxLength": 200, "name": "first_name", "selectOnFocus": true });
    var middle_name1685 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Middle name</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Middle name","(tera.Clients.middle_name) A space-separated list of all middle names.") }, "maxLength": 200, "name": "middle_name", "selectOnFocus": true });
    var last_name1686 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Last name</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Last name","(tera.Clients.last_name) The last name, also known as family name.") }, "maxLength": 200, "name": "last_name", "selectOnFocus": true });
    var person_1_panel1687 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ first_name1684, middle_name1685, last_name1686 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var nationality1688 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Country...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Nationality</span>", "flex": 26, "hidden": false, "hiddenName": "nationalityHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Nationality","(tera.Clients.nationality) The nationality. This is a pointer to\ncountries.Country which should\ncontain also entries for refugee statuses.") }, "name": "nationality", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/tera/Clients/nationality" }) }) });
    var birth_country1689 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Country...", "fieldLabel": "Birth country", "flex": 35, "hidden": false, "hiddenName": "birth_countryHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Birth country","(tera.Clients.birth_country) ") }, "name": "birth_country", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/tera/Clients/birth_country" }) }) });
    var birth_place1690 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Birth place", "flex": 37, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Birth place","(tera.Clients.birth_place) ") }, "maxLength": 200, "name": "birth_place", "selectOnFocus": true });
    var person_2_panel1691 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ nationality1688, birth_country1689, birth_place1690 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var card_type1692 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "eID card type", "flex": 46, "forceSelection": true, "hidden": false, "hiddenName": "card_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("eID card type","(tera.Clients.card_type) ") }, "name": "card_type", "selectOnFocus": true, "store": [['','']].concat(Lino.beid.BeIdCardTypes) });
    var card_issuer1693 = Ext.create('Ext.form.TextField',{ "fieldLabel": "eID card issuer", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("eID card issuer","(tera.Clients.card_issuer) ") }, "maxLength": 50, "name": "card_issuer", "selectOnFocus": true });
    var card_valid_from1694 = Ext.create('Lino.DateField',{ "fieldLabel": "ID card valid from", "flex": 14, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID card valid from","(tera.Clients.card_valid_from) ") }, "name": "card_valid_from", "selectOnFocus": true });
    var card_valid_until1695 = Ext.create('Lino.DateField',{ "fieldLabel": "until", "flex": 14, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("until","(tera.Clients.card_valid_until) ") }, "name": "card_valid_until", "selectOnFocus": true });
    var person_3_panel1696 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ card_type1692, card_issuer1693, card_valid_from1694, card_valid_until1695 ], "labelWidth": 171, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var person_panel1709 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ person_1_panel1687, person_2_panel1691, person_3_panel1696 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Person" });
    var country1710 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Country...", "fieldLabel": "Country", "flex": 40, "forceSelection": true, "hidden": false, "hiddenName": "countryHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Country","(tera.Clients.country) ") }, "name": "country", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/tera/Clients/country" }) }) });
    var city1711 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Place...", "fieldLabel": "Locality", "flex": 40, "forceSelection": false, "hidden": false, "hiddenName": "cityHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Locality","(tera.Clients.city) ") }, "name": "city", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/tera/Clients/city" }) }) });
    var zip_code1712 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "Zip code", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Zip code","(tera.Clients.zip_code) ") }, "maxLength": 10, "name": "zip_code", "selectOnFocus": true });
    var address_1_panel1713 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ country1710, city1711, zip_code1712 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var addr11714 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Address line before street", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Address line before street","(tera.Clients.addr1) ") }, "maxLength": 200, "name": "addr1", "selectOnFocus": true });
    var street1715 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Street", "flex": 69, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Street","(tera.Clients.street) ") }, "maxLength": 200, "name": "street", "selectOnFocus": true });
    var street_no1716 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "No.", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(tera.Clients.street_no) ") }, "maxLength": 10, "name": "street_no", "selectOnFocus": true });
    var address_3_panel1717 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ street1715, street_no1716 ], "labelWidth": 63, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var addr21718 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Address line after street", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Address line after street","(tera.Clients.addr2) ") }, "maxLength": 200, "name": "addr2", "selectOnFocus": true });
    var address_panel1719 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 70, "frame": true, "hideCheckBoxLabels": true, "items": [ address_1_panel1713, addr11714, address_3_panel1717, addr21718 ], "labelWidth": 243, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var email1720 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">e-mail address</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(tera.Clients.email) The primary email address.") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    var phone1721 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Phone</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Phone","(tera.Clients.phone) The primary phone number.  Note that Lino does not ignore\nformatting characters in phone numbers when searching.  For\nexample, if you enter \"087/12.34.56\" as a phone number, then a\nsearch for phone number containing \"1234\" will not find it.") }, "maxLength": 200, "name": "phone", "selectOnFocus": true });
    var fax1722 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Fax", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Fax","(tera.Clients.fax) ") }, "maxLength": 200, "name": "fax", "selectOnFocus": true });
    var gsm1723 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">GSM</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("GSM","(tera.Clients.gsm) The primary mobile phone number.") }, "maxLength": 200, "name": "gsm", "selectOnFocus": true });
    var general3_panel1724 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 29, "frame": true, "hideCheckBoxLabels": true, "items": [ email1720, phone1721, fax1722, gsm1723 ], "labelWidth": 135, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var contact_1_panel1725 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ address_panel1719, general3_panel1724 ], "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var residence_notes1726 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Residential situation", "flex": 55, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Residential situation","(tera.Clients.residence_notes) ") }, "name": "residence_notes", "selectOnFocus": true });
    var contact_panel1727 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ contact_1_panel1725, residence_notes1726 ], "labelWidth": 198, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Residence" });
    var family_notes1728 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Family situation", "flex": 66, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Family situation","(tera.Clients.family_notes) ") }, "name": "family_notes", "selectOnFocus": true });
    var family_1_panel1730 = Ext.create('Ext.Panel',{ "border": false, "flex": 5, "frame": false, "hideCheckBoxLabels": true, "items": [ family_notes1728 ], "labelWidth": 198, "layout": { "align": "stretch", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var family_panel1751 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ family_1_panel1730 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Family" });
    var financial_notes1830 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Financial situation", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Financial situation","(tera.Clients.financial_notes) ") }, "name": "financial_notes", "selectOnFocus": true });
    var health_notes1831 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Health situation", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Health situation","(tera.Clients.health_notes) ") }, "name": "health_notes", "selectOnFocus": true });
    var misc_1_panel1832 = Ext.create('Ext.Panel',{ "border": false, "flex": 5, "frame": false, "hideCheckBoxLabels": true, "items": [ financial_notes1830, health_notes1831 ], "labelWidth": 180, "layout": { "align": "stretch", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var misc_panel1836 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ misc_1_panel1832 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Miscellaneous" });
    var main_panel1837 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel1683, person_panel1709, contact_panel1727, family_panel1751, misc_panel1836 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel1837;
    this.before_row_edit = function(record) {
      overview_htmlbox1663.refresh();
      image_htmlbox1680.refresh();
      city1711.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city1711.setContextValue('region', record ? record.data['regionHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      country1710.on('change',Lino.chooser_handler(city1711,'country'));
      Lino.tera.Clients.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
    // active_fields:
    city1711.on("change", function(){ this.save() }, this);
    zip_code1712.on("change", function(){ this.save() }, this);
  }
});


Ext.define('Lino.contacts.Companies.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 13,
  initComponent : function() {
    var overview_htmlbox1838 = Ext.create('Lino.HtmlBoxPanel',{ "always_enabled": true, "bodyStyle": "overflow-x:hidden;", "containing_panel": this, "flex": 50, "items": Ext.create('Ext.Component',{scrollable:true}), "layout": "fit", "listeners": { "render": Lino.quicktip_renderer("Description","(contacts.Companies.overview) ") }, "name": "overview", "title": "Description", "value": "" });
    var email1839 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">e-mail address</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(contacts.Companies.email) The primary email address.") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    var phone1840 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Phone</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Phone","(contacts.Companies.phone) The primary phone number.  Note that Lino does not ignore\nformatting characters in phone numbers when searching.  For\nexample, if you enter \"087/12.34.56\" as a phone number, then a\nsearch for phone number containing \"1234\" will not find it.") }, "maxLength": 200, "name": "phone", "selectOnFocus": true });
    var gsm1841 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">GSM</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("GSM","(contacts.Companies.gsm) The primary mobile phone number.") }, "maxLength": 200, "name": "gsm", "selectOnFocus": true });
    var fax1842 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Fax", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Fax","(contacts.Companies.fax) ") }, "maxLength": 200, "name": "fax", "selectOnFocus": true });
    var contact_box_panel1843 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 50, "frame": true, "hideCheckBoxLabels": true, "items": [ email1839, phone1840, gsm1841, fax1842 ], "labelWidth": 135, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var general_1_panel1844 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ overview_htmlbox1838, contact_box_panel1843 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remarks1845 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remarks", "flex": 62, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remarks","(contacts.Companies.remarks) ") }, "name": "remarks", "selectOnFocus": true });
    var bottom_box_1_panel1847 = Ext.create('Ext.Panel',{ "border": false, "flex": 55, "frame": false, "hideCheckBoxLabels": true, "items": [ remarks1845 ], "labelWidth": 198, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var general_panel1848 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel1844, bottom_box_1_panel1847 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var prefix1849 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Name prefix</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Name prefix","(contacts.Companies.prefix) An optional name prefix. For organisations this is inserted\nbefore the name, for persons this is inserted between first\nname and last name (see\nlino.mixins.human.Human.get_last_name_prefix()).") }, "maxLength": 200, "name": "prefix", "selectOnFocus": true });
    var name1850 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Name</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Name","(contacts.Companies.name) The full name of this partner. Used for alphabetic sorting.\nSubclasses may hide this field and fill it automatically,\ne.g. saving a Person will automatically set her\nname field to \"last_name, first_name\".") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var address_box_1_panel1851 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ prefix1849, name1850 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var street1852 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Street", "flex": 69, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Street","(contacts.Companies.street) ") }, "maxLength": 200, "name": "street", "selectOnFocus": true });
    var street_box1853 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "Box", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Box","(contacts.Companies.street_box) ") }, "maxLength": 10, "name": "street_box", "selectOnFocus": true });
    var address_box_2_panel1854 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ street1852, street_box1853 ], "labelWidth": 63, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var addr21855 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Address line after street", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Address line after street","(contacts.Companies.addr2) ") }, "maxLength": 200, "name": "addr2", "selectOnFocus": true });
    var country1856 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Country...", "fieldLabel": "Country", "flex": 40, "forceSelection": true, "hidden": false, "hiddenName": "countryHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Country","(contacts.Companies.country) ") }, "name": "country", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Companies/country" }) }) });
    var zip_code1857 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "Zip code", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Zip code","(contacts.Companies.zip_code) ") }, "maxLength": 10, "name": "zip_code", "selectOnFocus": true });
    var city1858 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Place...", "fieldLabel": "Locality", "flex": 40, "forceSelection": false, "hidden": false, "hiddenName": "cityHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Locality","(contacts.Companies.city) ") }, "name": "city", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Companies/city" }) }) });
    var address_box_4_panel1859 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ country1856, zip_code1857, city1858 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var address_box_panel1860 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ address_box_1_panel1851, address_box_2_panel1854, addr21855, address_box_4_panel1859 ], "labelWidth": 234, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var address_panel1883 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ address_box_panel1860 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Address" });
    var id1884 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(contacts.Companies.id) ") }, "name": "id", "readOnly": true });
    var language1885 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "flex": 30, "hidden": false, "hiddenName": "languageHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Language","(contacts.Companies.language) The language to use when communicating with this partner.") }, "name": "language", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    var type1886 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Organization type...", "fieldLabel": "Organization type", "flex": 30, "hidden": false, "hiddenName": "typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Organization type","(contacts.Companies.type) ") }, "name": "type", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Companies/type" }) }) });
    var vat_id1887 = Ext.create('Ext.form.TextField',{ "fieldLabel": "VAT id", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT id","(contacts.Companies.vat_id) ") }, "maxLength": 200, "name": "vat_id", "selectOnFocus": true });
    var more_1_panel1888 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1884, language1885, type1886, vat_id1887 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var addr11889 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Address line before street", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Address line before street","(contacts.Companies.addr1) ") }, "maxLength": 200, "name": "addr1", "selectOnFocus": true });
    var url1890 = Ext.create('Lino.URLField',{ "fieldLabel": "URL", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("URL","(contacts.Companies.url) ") }, "maxLength": 200, "name": "url", "selectOnFocus": true });
    var more_2_panel1891 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ addr11889, url1890 ], "labelWidth": 243, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var more_panel1917 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ more_1_panel1888, more_2_panel1891 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "More" });
    var invoice_recipient1918 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Invoicing address</span>", "flex": 48, "hidden": false, "hiddenName": "invoice_recipientHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Invoicing address","(contacts.Companies.invoice_recipient) Redirect to another partner all invoices which should go to this partner.") }, "name": "invoice_recipient", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Companies/invoice_recipient" }) }) });
    var vat_regime1919 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "VAT regime", "flex": 51, "forceSelection": true, "hidden": false, "hiddenName": "vat_regimeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT regime","(contacts.Companies.vat_regime) ") }, "name": "vat_regime", "selectOnFocus": true, "store": [['','']].concat(Lino.vat.VatRegimes) });
    var ledger_a_1_panel1920 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ invoice_recipient1918, vat_regime1919 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var payment_term1921 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Payment Term...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Payment Term</span>", "flex": 50, "hidden": false, "hiddenName": "payment_termHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Payment Term","(contacts.Companies.payment_term) The default payment term for sales invoices to this customer.") }, "name": "payment_term", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.PaymentTerms.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Companies/payment_term" }) }) });
    var paper_type1922 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Paper type...", "fieldLabel": "Paper type", "flex": 50, "hidden": false, "hiddenName": "paper_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Paper type","(contacts.Companies.paper_type) ") }, "name": "paper_type", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Companies/paper_type" }) }) });
    var ledger_a_2_panel1923 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ payment_term1921, paper_type1922 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ledger_a_panel1924 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 57, "frame": true, "hideCheckBoxLabels": true, "items": [ ledger_a_1_panel1920, ledger_a_2_panel1923 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var ledger_1_panel1926 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ledger_a_panel1924 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ledger_panel1960 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ ledger_1_panel1926 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Ledger" });
    var main_panel1961 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel1848, address_panel1883, more_panel1917, ledger_panel1960 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel1961;
    this.before_row_edit = function(record) {
      overview_htmlbox1838.refresh();
      city1858.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city1858.setContextValue('region', record ? record.data['regionHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      country1856.on('change',Lino.chooser_handler(city1858,'country'));
      Lino.contacts.Companies.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
    // active_fields:
    city1858.on("change", function(){ this.save() }, this);
    zip_code1857.on("change", function(){ this.save() }, this);
  }
});


Ext.define('Lino.invoicing.Plans.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 55,
  initComponent : function() {
    var user1962 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 23, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(invoicing.Plans.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/invoicing/Plans/user" }) }) });
    var journal1963 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Journal...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal</span>", "flex": 23, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(invoicing.Plans.journal) The journal where to create invoices.  When this field is\nempty, you can fill the plan with suggestions but cannot\nexecute the plan.") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/invoicing/Plans/journal" }) }) });
    var today1964 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "Invoicing date", "flex": 15, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Invoicing date","(invoicing.Plans.today) ") }, "name": "today", "selectOnFocus": true });
    var max_date1965 = Ext.create('Lino.DateField',{ "fieldLabel": "Invoiceables until", "flex": 15, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Invoiceables until","(invoicing.Plans.max_date) ") }, "name": "max_date", "selectOnFocus": true });
    var partner1966 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 23, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(invoicing.Plans.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/invoicing/Plans/partner" }) }) });
    var main_1_panel1967 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ user1962, journal1963, today1964, max_date1965, partner1966 ], "labelWidth": 171, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1983 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1967 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1983;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.excerpts.Excerpts.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 87,
  initComponent : function() {
    var id1610 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 10, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(excerpts.Excerpts.id) ") }, "name": "id", "readOnly": true });
    var excerpt_type1611 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Excerpt Type...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Excerpt Type</span>", "flex": 50, "forceSelection": true, "hidden": false, "hiddenName": "excerpt_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Excerpt Type","(excerpts.Excerpts.excerpt_type) The type of this excerpt (ForeignKey to ExcerptType).") }, "name": "excerpt_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.excerpts.ExcerptTypes.detail,Lino.excerpts.ExcerptTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/excerpt_type" }) }) });
    var project1612 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 40, "hidden": false, "hiddenName": "projectHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(excerpts.Excerpts.project) ") }, "name": "project", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/project" }) }) });
    var main_1_panel1613 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1610, excerpt_type1611, project1612 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var user1614 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 30, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(excerpts.Excerpts.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/user" }) }) });
    var build_method1615 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Build method", "flex": 69, "forceSelection": true, "hidden": false, "hiddenName": "build_methodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Build method","(excerpts.Excerpts.build_method) ") }, "name": "build_method", "selectOnFocus": true, "store": [['','']].concat(Lino.printing.BuildMethods) });
    var main_2_panel1616 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ user1614, build_method1615 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var company1617 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Organization...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Recipient (Organization)</span>", "flex": 33, "hidden": false, "hiddenName": "companyHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recipient (Organization)","(excerpts.Excerpts.company) The optional company of the recipient of this\nexcerpt.  See ContactRelated.company.") }, "name": "company", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/company" }) }) });
    var contact_person1618 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Recipient (Person)</span>", "flex": 33, "forceSelection": true, "hidden": false, "hiddenName": "contact_personHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recipient (Person)","(excerpts.Excerpts.contact_person) The optional contact person of the recipient of this\nexcerpt.  See ContactRelated.contact_person.") }, "name": "contact_person", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/excerpts/Excerpts/contact_person" }) }) });
    var language1619 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "flex": 33, "hidden": false, "hiddenName": "languageHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Language","(excerpts.Excerpts.language) The language used for printing this excerpt.") }, "name": "language", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    var main_3_panel1620 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ company1617, contact_person1618, language1619 ], "labelWidth": 225, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var owner_disp1621 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Controlled by</span>", "flex": 38, "hidden": false, "labelAlign": "top", "name": "owner", "readOnly": true });
    var build_time1622 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "build time", "flex": 61, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("build time","(excerpts.Excerpts.build_time) ") }, "name": "build_time", "readOnly": true, "value": "<br>" });
    var main_4_panel1623 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ owner_disp1621, build_time1622 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1624 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1613, main_2_panel1616, main_3_panel1620, main_4_panel1623 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1624;
    this.before_row_edit = function(record) {
      excerpt_type1611.setContextValue('owner', record ? record.data['owner'] : undefined);
      contact_person1618.setContextValue('company', record ? record.data['companyHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      owner_disp1621.on('change',Lino.chooser_handler(excerpt_type1611,'owner'));
      company1617.on('change',Lino.chooser_handler(contact_person1618,'company'));
      Lino.excerpts.Excerpts.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.users.Users.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 4,
  default_record_id: -99999,
  initComponent : function() {
    var username1984 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Username</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Username","(users.Users.username) Must be unique and cannot be empty.") }, "maxLength": 30, "name": "username", "selectOnFocus": true });
    var email1985 = Ext.create('Ext.form.TextField',{ "fieldLabel": "e-mail address", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(users.Users.email) ") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    var main_1_panel1986 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ username1984, email1985 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var first_name1987 = Ext.create('Ext.form.TextField',{ "fieldLabel": "First name", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("First name","(users.Users.first_name) ") }, "maxLength": 30, "name": "first_name", "selectOnFocus": true });
    var last_name1988 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Last name", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Last name","(users.Users.last_name) ") }, "maxLength": 30, "name": "last_name", "selectOnFocus": true });
    var main_2_panel1989 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ first_name1987, last_name1988 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var partner1990 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Partner</span>", "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(users.Users.partner) Pointer to the Partner instance related to\nthis user.") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/users/Users/partner" }) }) });
    var language1991 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Language", "flex": 47, "hidden": false, "hiddenName": "languageHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Language","(users.Users.language) ") }, "name": "language", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    var user_type1992 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">User type</span>", "flex": 52, "forceSelection": true, "hidden": false, "hiddenName": "user_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("User type","(users.Users.user_type) The user_type of a user is what defines her or his permissions.") }, "name": "user_type", "selectOnFocus": true, "store": [['','']].concat(Lino.users.UserTypes) });
    var main_4_panel1993 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ language1991, user_type1992 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1994 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1986, main_2_panel1989, partner1990, main_4_panel1993 ], "labelWidth": 72, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1994;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.teams.Teams.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 90,
  initComponent : function() {
    var id1995 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(teams.Teams.id) ") }, "name": "id", "readOnly": true });
    var name1996 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(teams.Teams.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1997 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(teams.Teams.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1998 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(teams.Teams.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1999 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1995, name1996, name_fr1997, name_de1998 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2051 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1999 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2051;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.households.Households.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 19,
  initComponent : function() {
    var type2052 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Household Type...", "fieldLabel": "Household Type", "flex": 29, "hidden": false, "hiddenName": "typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Household Type","(households.Households.type) ") }, "name": "type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.households.Types.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/households/Households/type" }) }) });
    var prefix2053 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Name prefix</span>", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Name prefix","(households.Households.prefix) An optional name prefix. For organisations this is inserted\nbefore the name, for persons this is inserted between first\nname and last name (see\nlino.mixins.human.Human.get_last_name_prefix()).") }, "maxLength": 200, "name": "prefix", "selectOnFocus": true });
    var name2054 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Name</span>", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Name","(households.Households.name) The full name of this partner. Used for alphabetic sorting.\nSubclasses may hide this field and fill it automatically,\ne.g. saving a Person will automatically set her\nname field to \"last_name, first_name\".") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var id2055 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(households.Households.id) ") }, "name": "id", "readOnly": true });
    var general_1_panel2056 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ type2052, prefix2053, name2054, id2055 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var country2057 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Country...", "fieldLabel": "Country", "flex": 40, "forceSelection": true, "hidden": false, "hiddenName": "countryHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Country","(households.Households.country) ") }, "name": "country", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/households/Households/country" }) }) });
    var region2058 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Place...", "fieldLabel": "County", "flex": 40, "forceSelection": true, "hidden": false, "hiddenName": "regionHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("County","(households.Households.region) ") }, "name": "region", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/households/Households/region" }) }) });
    var language2059 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "flex": 20, "hidden": false, "hiddenName": "languageHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Language","(households.Households.language) The language to use when communicating with this partner.") }, "name": "language", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    var box3_1_panel2060 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ country2057, region2058, language2059 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var city2061 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Place...", "fieldLabel": "Locality", "flex": 66, "forceSelection": false, "hidden": false, "hiddenName": "cityHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Locality","(households.Households.city) ") }, "name": "city", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/households/Households/city" }) }) });
    var zip_code2062 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "Zip code", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Zip code","(households.Households.zip_code) ") }, "maxLength": 10, "name": "zip_code", "selectOnFocus": true });
    var box3_2_panel2063 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ city2061, zip_code2062 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var street_prefix2064 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Street prefix", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Street prefix","(households.Households.street_prefix) ") }, "maxLength": 200, "name": "street_prefix", "selectOnFocus": true });
    var street2065 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Street", "flex": 36, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Street","(households.Households.street) ") }, "maxLength": 200, "name": "street", "selectOnFocus": true });
    var street_no2066 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "No.", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(households.Households.street_no) ") }, "maxLength": 10, "name": "street_no", "selectOnFocus": true });
    var street_box2067 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "Box", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Box","(households.Households.street_box) ") }, "maxLength": 10, "name": "street_box", "selectOnFocus": true });
    var box3_3_panel2068 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ street_prefix2064, street2065, street_no2066, street_box2067 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var addr22069 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Address line after street", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Address line after street","(households.Households.addr2) ") }, "maxLength": 200, "name": "addr2", "selectOnFocus": true });
    var box3_panel2070 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 62, "frame": true, "hideCheckBoxLabels": true, "items": [ box3_1_panel2060, box3_2_panel2063, box3_3_panel2068, addr22069 ], "labelWidth": 234, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var phone2071 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Phone</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Phone","(households.Households.phone) The primary phone number.  Note that Lino does not ignore\nformatting characters in phone numbers when searching.  For\nexample, if you enter \"087/12.34.56\" as a phone number, then a\nsearch for phone number containing \"1234\" will not find it.") }, "maxLength": 200, "name": "phone", "selectOnFocus": true });
    var gsm2072 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">GSM</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("GSM","(households.Households.gsm) The primary mobile phone number.") }, "maxLength": 200, "name": "gsm", "selectOnFocus": true });
    var email2073 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">e-mail address</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(households.Households.email) The primary email address.") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    var url2074 = Ext.create('Lino.URLField',{ "fieldLabel": "URL", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("URL","(households.Households.url) ") }, "maxLength": 200, "name": "url", "selectOnFocus": true });
    var box4_panel2075 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 37, "frame": true, "hideCheckBoxLabels": true, "items": [ phone2071, gsm2072, email2073, url2074 ], "labelWidth": 135, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var address_box_panel2076 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ box3_panel2070, box4_panel2075 ], "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var general_panel2097 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel2056, address_box_panel2076 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var main_panel2101 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel2097 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel2101;
    this.before_row_edit = function(record) {
      region2058.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city2061.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city2061.setContextValue('region', record ? record.data['regionHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      country2057.on('change',Lino.chooser_handler(region2058,'country'));
      country2057.on('change',Lino.chooser_handler(city2061,'country'));
      region2058.on('change',Lino.chooser_handler(city2061,'region'));
      Lino.households.Households.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
    // active_fields:
    city2061.on("change", function(){ this.save() }, this);
    zip_code2062.on("change", function(){ this.save() }, this);
  }
});


Ext.define('Lino.contacts.Persons.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 14,
  initComponent : function() {
    var overview_htmlbox2102 = Ext.create('Lino.HtmlBoxPanel',{ "always_enabled": true, "bodyStyle": "overflow-x:hidden;", "containing_panel": this, "flex": 50, "items": Ext.create('Ext.Component',{scrollable:true}), "layout": "fit", "listeners": { "render": Lino.quicktip_renderer("Description","(contacts.Persons.overview) ") }, "name": "overview", "title": "Description", "value": "" });
    var email2103 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">e-mail address</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(contacts.Persons.email) The primary email address.") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    var phone2104 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Phone</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Phone","(contacts.Persons.phone) The primary phone number.  Note that Lino does not ignore\nformatting characters in phone numbers when searching.  For\nexample, if you enter \"087/12.34.56\" as a phone number, then a\nsearch for phone number containing \"1234\" will not find it.") }, "maxLength": 200, "name": "phone", "selectOnFocus": true });
    var gsm2105 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">GSM</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("GSM","(contacts.Persons.gsm) The primary mobile phone number.") }, "maxLength": 200, "name": "gsm", "selectOnFocus": true });
    var contact_box_panel2106 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 50, "frame": true, "hideCheckBoxLabels": true, "items": [ email2103, phone2104, gsm2105 ], "labelWidth": 135, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var general_1_panel2107 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ overview_htmlbox2102, contact_box_panel2106 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remarks2108 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remarks", "flex": 62, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remarks","(contacts.Persons.remarks) ") }, "name": "remarks", "selectOnFocus": true });
    var bottom_box_1_panel2110 = Ext.create('Ext.Panel',{ "border": false, "flex": 62, "frame": false, "hideCheckBoxLabels": true, "items": [ remarks2108 ], "labelWidth": 198, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var general_panel2111 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel2107, bottom_box_1_panel2110 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var last_name2112 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Last name</span>", "flex": 46, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Last name","(contacts.Persons.last_name) The last name, also known as family name.") }, "maxLength": 200, "name": "last_name", "selectOnFocus": true });
    var first_name2113 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">First name</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("First name","(contacts.Persons.first_name) The first name, also known as given name.") }, "maxLength": 200, "name": "first_name", "selectOnFocus": true });
    var gender2114 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Gender</span>", "flex": 20, "forceSelection": true, "hidden": false, "hiddenName": "genderHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Gender","(contacts.Persons.gender) The sex of this person (male or female).") }, "name": "gender", "selectOnFocus": true, "store": [['','']].concat(Lino.system.Genders) });
    var address_box_1_panel2115 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ last_name2112, first_name2113, gender2114 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var street2116 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Street", "flex": 69, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Street","(contacts.Persons.street) ") }, "maxLength": 200, "name": "street", "selectOnFocus": true });
    var street_box2117 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "Box", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Box","(contacts.Persons.street_box) ") }, "maxLength": 10, "name": "street_box", "selectOnFocus": true });
    var address_box_2_panel2118 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ street2116, street_box2117 ], "labelWidth": 63, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var country2119 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Country...", "fieldLabel": "Country", "flex": 40, "forceSelection": true, "hidden": false, "hiddenName": "countryHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Country","(contacts.Persons.country) ") }, "name": "country", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Persons/country" }) }) });
    var zip_code2120 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "Zip code", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Zip code","(contacts.Persons.zip_code) ") }, "maxLength": 10, "name": "zip_code", "selectOnFocus": true });
    var city2121 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Place...", "fieldLabel": "Locality", "flex": 40, "forceSelection": false, "hidden": false, "hiddenName": "cityHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Locality","(contacts.Persons.city) ") }, "name": "city", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Persons/city" }) }) });
    var address_box_3_panel2122 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ country2119, zip_code2120, city2121 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var birth_date2123 = Ext.create('Lino.IncompleteDateField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Birth date</span>", "flex": 54, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Birth date","(contacts.Persons.birth_date) Uncomplete dates are allowed, e.g. \n\"00.00.1980\" means \"some day in 1980\", \n\"00.07.1980\" means \"in July 1980\"\nor \"23.07.0000\" means \"on a 23th of July\".") }, "name": "birth_date", "selectOnFocus": true });
    var age_disp2124 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Age", "flex": 45, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Age","(contacts.Persons.age) ") }, "name": "age", "readOnly": true, "value": "" });
    var address_box_4_panel2125 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ birth_date2123, age_disp2124 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var address_box_panel2126 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ address_box_1_panel2115, address_box_2_panel2118, address_box_3_panel2122, address_box_4_panel2125 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var address_panel2138 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ address_box_panel2126 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Address" });
    var invoice_recipient2139 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Invoicing address</span>", "flex": 48, "hidden": false, "hiddenName": "invoice_recipientHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Invoicing address","(contacts.Persons.invoice_recipient) Redirect to another partner all invoices which should go to this partner.") }, "name": "invoice_recipient", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Persons/invoice_recipient" }) }) });
    var vat_regime2140 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "VAT regime", "flex": 51, "forceSelection": true, "hidden": false, "hiddenName": "vat_regimeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT regime","(contacts.Persons.vat_regime) ") }, "name": "vat_regime", "selectOnFocus": true, "store": [['','']].concat(Lino.vat.VatRegimes) });
    var ledger_a_1_panel2141 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ invoice_recipient2139, vat_regime2140 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var payment_term2142 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Payment Term...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Payment Term</span>", "flex": 50, "hidden": false, "hiddenName": "payment_termHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Payment Term","(contacts.Persons.payment_term) The default payment term for sales invoices to this customer.") }, "name": "payment_term", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.PaymentTerms.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Persons/payment_term" }) }) });
    var paper_type2143 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Paper type...", "fieldLabel": "Paper type", "flex": 50, "hidden": false, "hiddenName": "paper_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Paper type","(contacts.Persons.paper_type) ") }, "name": "paper_type", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Persons/paper_type" }) }) });
    var ledger_a_2_panel2144 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ payment_term2142, paper_type2143 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ledger_a_panel2145 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 57, "frame": true, "hideCheckBoxLabels": true, "items": [ ledger_a_1_panel2141, ledger_a_2_panel2144 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var ledger_1_panel2147 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ledger_a_panel2145 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ledger_panel2149 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ ledger_1_panel2147 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Ledger" });
    var id2150 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 10, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(contacts.Persons.id) ") }, "name": "id", "readOnly": true });
    var language2151 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "flex": 43, "hidden": false, "hiddenName": "languageHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Language","(contacts.Persons.language) The language to use when communicating with this partner.") }, "name": "language", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    var url2152 = Ext.create('Lino.URLField',{ "fieldLabel": "URL", "flex": 45, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("URL","(contacts.Persons.url) ") }, "maxLength": 200, "name": "url", "selectOnFocus": true });
    var more_1_panel2153 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2150, language2151, url2152 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var addr12154 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Address line before street", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Address line before street","(contacts.Persons.addr1) ") }, "maxLength": 200, "name": "addr1", "selectOnFocus": true });
    var addr22155 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Address line after street", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Address line after street","(contacts.Persons.addr2) ") }, "maxLength": 200, "name": "addr2", "selectOnFocus": true });
    var more_2_panel2156 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ addr12154, addr22155 ], "labelWidth": 243, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var more_panel2182 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ more_1_panel2153, more_2_panel2156 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "More" });
    var main_panel2183 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel2111, address_panel2138, ledger_panel2149, more_panel2182 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel2183;
    this.before_row_edit = function(record) {
      overview_htmlbox2102.refresh();
      city2121.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city2121.setContextValue('region', record ? record.data['regionHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      country2119.on('change',Lino.chooser_handler(city2121,'country'));
      Lino.contacts.Persons.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
    // active_fields:
    city2121.on("change", function(){ this.save() }, this);
    zip_code2120.on("change", function(){ this.save() }, this);
  }
});


Ext.define('Lino.countries.Places.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 7,
  initComponent : function() {
    var name2184 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(countries.Places.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2185 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(countries.Places.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2186 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(countries.Places.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var country2187 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Country...", "fieldLabel": "Country", "flex": 24, "hidden": false, "hiddenName": "countryHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Country","(countries.Places.country) ") }, "name": "country", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/countries/Places/country" }) }) });
    var main_1_panel2188 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2184, name_fr2185, name_de2186, country2187 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var type2189 = Ext.create('Lino.RemoteComboFieldElement',{ "fieldLabel": "Place Type", "flex": 22, "forceSelection": true, "hidden": false, "hiddenName": "typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Place Type","(countries.Places.type) ") }, "name": "type", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/countries/Places/type" }) }) });
    var parent2190 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Place...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Part of</span>", "flex": 45, "hidden": false, "hiddenName": "parentHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Part of","(countries.Places.parent) The superordinate geographic place of which this place is a part.") }, "name": "parent", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/countries/Places/parent" }) }) });
    var zip_code2191 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(8), "fieldLabel": "zip code", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("zip code","(countries.Places.zip_code) ") }, "maxLength": 8, "name": "zip_code", "selectOnFocus": true });
    var id2192 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(countries.Places.id) ") }, "name": "id", "readOnly": true });
    var main_2_panel2193 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ type2189, parent2190, zip_code2191, id2192 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2310 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2188, main_2_panel2193 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2310;
    this.before_row_edit = function(record) {
      type2189.setContextValue('country', record ? record.data['countryHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      country2187.on('change',Lino.chooser_handler(type2189,'country'));
      Lino.countries.Places.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.ledger.PaymentTerms.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 47,
  initComponent : function() {
    var ref2311 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 51, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(ledger.PaymentTerms.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var months2312 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Months</span>", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Months","(ledger.PaymentTerms.months) Number of months to add to voucher_date.") }, "name": "months", "selectOnFocus": true, "value": 0 });
    var days2313 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Days</span>", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Days","(ledger.PaymentTerms.days) Number of days to add to voucher_date.") }, "name": "days", "selectOnFocus": true, "value": 0 });
    var end_of_month2314 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "End of month", "checked": false, "flex": 24, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End of month","(ledger.PaymentTerms.end_of_month) Whether to move voucher_date to the end of month.") }, "name": "end_of_month", "selectOnFocus": true });
    var main_1_panel2315 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref2311, months2312, days2313, end_of_month2314 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var name2316 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(ledger.PaymentTerms.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2317 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(ledger.PaymentTerms.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2318 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(ledger.PaymentTerms.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_2_panel2319 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2316, name_fr2317, name_de2318 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var printed_text2320 = Ext.create('Ext.form.TextArea',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Printed text</span>", "flex": 33, "growMax": 2000, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Printed text","(ledger.PaymentTerms.printed_text) Used in sales/VatProductInvoice/trailer.html as\nfollows:") }, "name": "printed_text", "selectOnFocus": true });
    var printed_text_fr2321 = Ext.create('Ext.form.TextArea',{ "fieldLabel": "Printed text (fr)", "flex": 33, "growMax": 2000, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Printed text (fr)","(ledger.PaymentTerms.printed_text_fr) ") }, "name": "printed_text_fr", "selectOnFocus": true });
    var printed_text_de2322 = Ext.create('Ext.form.TextArea',{ "fieldLabel": "Printed text (de)", "flex": 33, "growMax": 2000, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Printed text (de)","(ledger.PaymentTerms.printed_text_de) ") }, "name": "printed_text_de", "selectOnFocus": true });
    var main_3_panel2323 = Ext.create('Ext.Panel',{ "border": false, "flex": 71, "frame": false, "hideCheckBoxLabels": true, "items": [ printed_text2320, printed_text_fr2321, printed_text_de2322 ], "labelWidth": 162, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var main_panel2324 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2315, main_2_panel2319, main_3_panel2323 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2324;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.RecurrentEvents.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 31,
  default_record_id: -99999,
  initComponent : function() {
    var name2325 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Designation</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(cal.RecurrentEvents.name) See lino.utils.mldbc.mixins.BabelNamed.name.") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2326 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(cal.RecurrentEvents.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2327 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(cal.RecurrentEvents.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2328 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2325, name_fr2326, name_de2327 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var start_date2329 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(cal.RecurrentEvents.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var end_date2330 = Ext.create('Lino.DateField',{ "fieldLabel": "End Date", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Date","(cal.RecurrentEvents.end_date) ") }, "name": "end_date", "selectOnFocus": true });
    var every_unit2331 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Recurrency</span>", "flex": 31, "forceSelection": true, "hidden": false, "hiddenName": "every_unitHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recurrency","(cal.RecurrentEvents.every_unit) Inherited from RecurrentSet.every_unit.") }, "name": "every_unit", "selectOnFocus": true, "store": Lino.cal.Recurrencies });
    var event_type2332 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Calendar entry type...", "fieldLabel": "Calendar entry type", "flex": 29, "hidden": false, "hiddenName": "event_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Calendar entry type","(cal.RecurrentEvents.event_type) ") }, "name": "event_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.EventTypes.detail,Lino.cal.EventTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/RecurrentEvents/event_type" }) }) });
    var main_2_panel2333 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date2329, end_date2330, every_unit2331, event_type2332 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2334 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2328, main_2_panel2333 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2334;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.Calendars.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 38,
  initComponent : function() {
    var name2335 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(cal.Calendars.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2336 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(cal.Calendars.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2337 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(cal.Calendars.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var color2338 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "color", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("color","(cal.Calendars.color) ") }, "name": "color", "selectOnFocus": true });
    var id2339 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(cal.Calendars.id) ") }, "name": "id", "readOnly": true });
    var main_1_panel2340 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2335, name_fr2336, name_de2337, color2338, id2339 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var description2341 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description","(cal.Calendars.description) ") }, "name": "description", "selectOnFocus": true });
    var main_2_panel2351 = Ext.create('Ext.Panel',{ "border": false, "flex": 83, "frame": false, "hideCheckBoxLabels": true, "items": [ description2341 ], "labelWidth": 108, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var main_panel2352 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2340, main_2_panel2351 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2352;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.teams.Teams.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 90,
  default_record_id: -99999,
  initComponent : function() {
    var name2353 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(teams.Teams.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2354 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(teams.Teams.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2355 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(teams.Teams.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2356 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2353, name_fr2354, name_de2355 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2357 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2356 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2357;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.coachings.CoachingEndings.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 21,
  initComponent : function() {
    var id2358 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(coachings.CoachingEndings.id) ") }, "name": "id", "readOnly": true });
    var name2359 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(coachings.CoachingEndings.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2360 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(coachings.CoachingEndings.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2361 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(coachings.CoachingEndings.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var seqno2362 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(coachings.CoachingEndings.seqno) The sequence number of this item with its parent.") }, "name": "seqno", "selectOnFocus": true });
    var main_1_panel2363 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2358, name2359, name_fr2360, name_de2361, seqno2362 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2377 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2363 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2377;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.vat.InvoicesByJournal.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 49,
  default_record_id: -99999,
  initComponent : function() {
    var partner2378 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(vat.InvoicesByJournal.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/InvoicesByJournal/partner" }) }) });
    var entry_date2379 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 52, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(vat.InvoicesByJournal.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var total_incl2380 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total incl. VAT", "flex": 48, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(vat.InvoicesByJournal.total_incl) ") }, "name": "total_incl", "selectOnFocus": true });
    var main_2_panel2381 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ entry_date2379, total_incl2380 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2382 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ partner2378, main_2_panel2381 ], "labelWidth": 72, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2382;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.ana.Invoices.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 70,
  initComponent : function() {
    var id2383 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 13, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(ana.Invoices.id) ") }, "name": "id", "readOnly": true });
    var entry_date2384 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 34, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(ana.Invoices.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var partner2385 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 52, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(ana.Invoices.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/partner" }) }) });
    var topleft_1_panel2386 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2383, entry_date2384, partner2385 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var payment_term2387 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Payment Term...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Payment Term</span>", "flex": 26, "hidden": false, "hiddenName": "payment_termHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Payment Term","(ana.Invoices.payment_term) See lino_xl.lib.ledger.mixins.PartnerRelated.payment_term") }, "name": "payment_term", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.PaymentTerms.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/payment_term" }) }) });
    var due_date2388 = Ext.create('Lino.DateField',{ "fieldLabel": "Due date", "flex": 17, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Due date","(ana.Invoices.due_date) ") }, "name": "due_date", "selectOnFocus": true });
    var your_ref2389 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Your reference", "flex": 28, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Your reference","(ana.Invoices.your_ref) ") }, "maxLength": 200, "name": "your_ref", "selectOnFocus": true });
    var vat_regime2390 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "VAT regime", "flex": 28, "forceSelection": true, "hidden": false, "hiddenName": "vat_regimeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT regime","(ana.Invoices.vat_regime) ") }, "name": "vat_regime", "selectOnFocus": true, "store": Lino.vat.VatRegimes });
    var topleft_2_panel2391 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ payment_term2387, due_date2388, your_ref2389, vat_regime2390 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var workflow_buttons_disp2392 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 60, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(ana.Invoices.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var user2393 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 40, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(ana.Invoices.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/user" }) }) });
    var topleft_3_panel2394 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ workflow_buttons_disp2392, user2393 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var topleft_panel2395 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 75, "frame": true, "hideCheckBoxLabels": true, "items": [ topleft_1_panel2386, topleft_2_panel2391, topleft_3_panel2394 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var total_base2396 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total excl. VAT", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total excl. VAT","(ana.Invoices.total_base) ") }, "name": "total_base", "selectOnFocus": true });
    var total_vat2397 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "VAT", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT","(ana.Invoices.total_vat) ") }, "name": "total_vat", "selectOnFocus": true });
    var total_incl2398 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total incl. VAT", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(ana.Invoices.total_incl) ") }, "name": "total_incl", "selectOnFocus": true });
    var totals_panel2399 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 25, "frame": true, "hideCheckBoxLabels": true, "items": [ total_base2396, total_vat2397, total_incl2398 ], "labelWidth": 144, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var general_1_panel2400 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ topleft_panel2395, totals_panel2399 ], "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var general_panel2402 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel2400 ], "labelWidth": 72, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var journal2403 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Journal...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal</span>", "flex": 30, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(ana.Invoices.journal) The journal into which this voucher has been booked. This is a\nmandatory pointer to a Journal instance.") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/journal" }) }) });
    var accounting_period2404 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Accounting period</span>", "flex": 30, "hidden": false, "hiddenName": "accounting_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Accounting period","(ana.Invoices.accounting_period) The accounting period and fiscal year to which this entry is\nto be assigned to. The default value is determined from\nentry_date.") }, "name": "accounting_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/ana/Invoices/accounting_period" }) }) });
    var number2405 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(ana.Invoices.number) The sequence number of this voucher in the journal.") }, "name": "number", "selectOnFocus": true });
    var narration2406 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Narration</span>", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Narration","(ana.Invoices.narration) A short explanation which ascertains the subject matter of\nthis journal entry.") }, "maxLength": 200, "name": "narration", "selectOnFocus": true });
    var ledger_1_panel2407 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ journal2403, accounting_period2404, number2405, narration2406 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ledger_panel2409 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ ledger_1_panel2407 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Ledger" });
    var main_panel2410 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel2402, ledger_panel2409 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel2410;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.households.Types.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 20,
  initComponent : function() {
    var name2411 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(households.Types.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2412 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(households.Types.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2413 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(households.Types.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2414 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2411, name_fr2412, name_de2413 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2453 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2414 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2453;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.coachings.ClientContactTypes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 24,
  initComponent : function() {
    var id2454 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(coachings.ClientContactTypes.id) ") }, "name": "id", "readOnly": true });
    var name2455 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(coachings.ClientContactTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2456 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(coachings.ClientContactTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2457 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(coachings.ClientContactTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2458 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2454, name2455, name_fr2456, name_de2457 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var main_panel2508 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2458 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2508;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.vat.Invoices.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 49,
  initComponent : function() {
    var id2509 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 8, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(vat.Invoices.id) ") }, "name": "id", "readOnly": true });
    var entry_date2510 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 22, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(vat.Invoices.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var partner2511 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 34, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(vat.Invoices.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/Invoices/partner" }) }) });
    var user2512 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 34, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(vat.Invoices.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/Invoices/user" }) }) });
    var general_1_panel2513 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2509, entry_date2510, partner2511, user2512 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var due_date2514 = Ext.create('Lino.DateField',{ "fieldLabel": "Due date", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Due date","(vat.Invoices.due_date) ") }, "name": "due_date", "selectOnFocus": true });
    var your_ref2515 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Your reference", "flex": 38, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Your reference","(vat.Invoices.your_ref) ") }, "maxLength": 200, "name": "your_ref", "selectOnFocus": true });
    var vat_regime2516 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "VAT regime", "flex": 38, "forceSelection": true, "hidden": false, "hiddenName": "vat_regimeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT regime","(vat.Invoices.vat_regime) ") }, "name": "vat_regime", "selectOnFocus": true, "store": Lino.vat.VatRegimes });
    var general_2_panel2517 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ due_date2514, your_ref2515, vat_regime2516 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var total_base2519 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total excl. VAT", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total excl. VAT","(vat.Invoices.total_base) ") }, "name": "total_base", "selectOnFocus": true });
    var total_vat2520 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "VAT", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT","(vat.Invoices.total_vat) ") }, "name": "total_vat", "selectOnFocus": true });
    var total_incl2521 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total incl. VAT", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(vat.Invoices.total_incl) ") }, "name": "total_incl", "selectOnFocus": true });
    var workflow_buttons_disp2522 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(vat.Invoices.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var totals_panel2523 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 25, "frame": true, "hideCheckBoxLabels": true, "items": [ total_base2519, total_vat2520, total_incl2521, workflow_buttons_disp2522 ], "labelWidth": 144, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var general_3_panel2524 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ totals_panel2523 ], "labelWidth": 72, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var general_panel2525 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel2513, general_2_panel2517, general_3_panel2524 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var journal2526 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Journal...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal</span>", "flex": 30, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(vat.Invoices.journal) The journal into which this voucher has been booked. This is a\nmandatory pointer to a Journal instance.") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/Invoices/journal" }) }) });
    var accounting_period2527 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Accounting period</span>", "flex": 30, "hidden": false, "hiddenName": "accounting_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Accounting period","(vat.Invoices.accounting_period) The accounting period and fiscal year to which this entry is\nto be assigned to. The default value is determined from\nentry_date.") }, "name": "accounting_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/Invoices/accounting_period" }) }) });
    var number2528 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(vat.Invoices.number) The sequence number of this voucher in the journal.") }, "name": "number", "selectOnFocus": true });
    var narration2529 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Narration</span>", "flex": 31, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Narration","(vat.Invoices.narration) A short explanation which ascertains the subject matter of\nthis journal entry.") }, "maxLength": 200, "name": "narration", "selectOnFocus": true });
    var ledger_1_panel2530 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ journal2526, accounting_period2527, number2528, narration2529 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ledger_panel2532 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ ledger_1_panel2530 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Ledger" });
    var main_panel2533 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel2525, ledger_panel2532 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel2533;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.GuestRoles.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 37,
  initComponent : function() {
    var id2534 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(cal.GuestRoles.id) ") }, "name": "id", "readOnly": true });
    var name2535 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(cal.GuestRoles.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2536 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(cal.GuestRoles.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2537 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(cal.GuestRoles.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2538 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2534, name2535, name_fr2536, name_de2537 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2564 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2538 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2564;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.sales.InvoiceItems.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 51,
  default_record_id: -99999,
  initComponent : function() {
    var product1181 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff...", "fieldLabel": "Tariff", "flex": 58, "hidden": false, "hiddenName": "productHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Tariff","(sales.InvoiceItems.product) ") }, "name": "product", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.Products.detail,Lino.products.Products.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/sales/InvoiceItems/product" }) }) });
    var discount1182 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Discount", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Discount","(sales.InvoiceItems.discount) ") }, "name": "discount", "selectOnFocus": true });
    var qty1183 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(6), "fieldLabel": "Quantity", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Quantity","(sales.InvoiceItems.qty) ") }, "maxLength": 6, "name": "qty", "selectOnFocus": true });
    var main_1_panel1184 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ product1181, discount1182, qty1183 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var title1185 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Heading", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Heading","(sales.InvoiceItems.title) ") }, "maxLength": 200, "name": "title", "selectOnFocus": true });
    var main_panel1186 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1184, title1185 ], "labelWidth": 72, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1186;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.finan.BankStatements.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 65,
  default_record_id: -99999,
  initComponent : function() {
    var entry_date2565 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(finan.BankStatements.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var balance12566 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Old balance</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Old balance","(finan.BankStatements.balance1) The old (or start) balance.") }, "name": "balance1", "selectOnFocus": true, "value": 0 });
    var main_panel2567 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ entry_date2565, balance12566 ], "labelWidth": 108, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2567;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.notes.NoteTypes.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 81,
  default_record_id: -99999,
  initComponent : function() {
    var name2568 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(notes.NoteTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2569 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(notes.NoteTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2570 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(notes.NoteTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2571 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2568, name_fr2569, name_de2570 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var build_method2572 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Build method", "forceSelection": true, "hidden": false, "hiddenName": "build_methodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Build method","(notes.NoteTypes.build_method) ") }, "name": "build_method", "selectOnFocus": true, "store": [['','']].concat(Lino.printing.BuildMethods) });
    var main_panel2573 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2571, build_method2572 ], "labelWidth": 117, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2573;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.topics.Topics.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 75,
  default_record_id: -99999,
  initComponent : function() {
    var topic_group468 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Topic group...", "fieldLabel": "Topic group", "hidden": false, "hiddenName": "topic_groupHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Topic group","(topics.Topics.topic_group) ") }, "name": "topic_group", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.topics.TopicGroups.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/topics/Topics/topic_group" }) }) });
    var name469 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(topics.Topics.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr470 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(topics.Topics.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de471 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(topics.Topics.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_2_panel472 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name469, name_fr470, name_de471 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel473 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ topic_group468, main_2_panel472 ], "labelWidth": 108, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel473;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Slots.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 56,
  initComponent : function() {
    var name2574 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Name", "flex": 56, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Name","(courses.Slots.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var start_time2575 = Ext.create('Lino.TimeField',{ "fieldLabel": "Start Time", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start Time","(courses.Slots.start_time) ") }, "name": "start_time", "selectOnFocus": true });
    var end_time2576 = Ext.create('Lino.TimeField',{ "fieldLabel": "End Time", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Time","(courses.Slots.end_time) ") }, "name": "end_time", "selectOnFocus": true });
    var main_1_panel2577 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2574, start_time2575, end_time2576 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2629 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2577 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2629;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.EventTypes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 32,
  initComponent : function() {
    var name2630 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(cal.EventTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2631 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(cal.EventTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2632 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(cal.EventTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2633 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2630, name_fr2631, name_de2632 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var event_label2634 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry label</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry label","(cal.EventTypes.event_label) Default text for summary of new entries.") }, "maxLength": 200, "name": "event_label", "selectOnFocus": true });
    var event_label_fr2635 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Entry label (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry label (fr)","(cal.EventTypes.event_label_fr) ") }, "maxLength": 200, "name": "event_label_fr", "selectOnFocus": true });
    var event_label_de2636 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Entry label (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry label (de)","(cal.EventTypes.event_label_de) ") }, "maxLength": 200, "name": "event_label_de", "selectOnFocus": true });
    var main_2_panel2637 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ event_label2634, event_label_fr2635, event_label_de2636 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var start_date2638 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 56, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(cal.EventTypes.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var max_days2639 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Maximum days</span>", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Maximum days","(cal.EventTypes.max_days) The maximal number of days allowed as duration.") }, "name": "max_days", "selectOnFocus": true, "value": 1 });
    var id2640 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(cal.EventTypes.id) ") }, "name": "id", "readOnly": true });
    var main_3_panel2641 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date2638, max_days2639, id2640 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var email_template2642 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Email template</span>", "flex": 50, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Email template","(cal.EventTypes.email_template) The name of the file to be used as template when creating an email from a mailable of this type.") }, "name": "email_template", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/EventTypes/email_template" }) }) });
    var attach_to_email2643 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Attach to email", "checked": false, "flex": 50, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Attach to email","(cal.EventTypes.attach_to_email) Whether the printable file should be attached to the email\nwhen creating an email from a mailable of this type.\n") }, "name": "attach_to_email", "selectOnFocus": true });
    var main_4_panel2644 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ email_template2642, attach_to_email2643 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var is_appointment2645 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Appointment", "checked": true, "flex": 28, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Appointment","(cal.EventTypes.is_appointment) Whether entries of this type should be considered\n\"appointments\" (i.e. whose time and place have been agreed\nupon with other users or external parties).") }, "name": "is_appointment", "selectOnFocus": true });
    var all_rooms2646 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Locks all rooms", "checked": false, "flex": 28, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Locks all rooms","(cal.EventTypes.all_rooms) ") }, "name": "all_rooms", "selectOnFocus": true });
    var locks_user2647 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Locks the user", "checked": false, "flex": 28, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Locks the user","(cal.EventTypes.locks_user) Whether calendar entries of this type make the user\nunavailable for other locking events at the same time.") }, "name": "locks_user", "selectOnFocus": true });
    var max_conflicting2648 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Simultaneous entries</span>", "flex": 14, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Simultaneous entries","(cal.EventTypes.max_conflicting) How many conflicting events should be tolerated.") }, "name": "max_conflicting", "selectOnFocus": true, "value": 1 });
    var main_5_panel2649 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ is_appointment2645, all_rooms2646, locks_user2647, max_conflicting2648 ], "labelWidth": 189, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2725 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2633, main_2_panel2637, main_3_panel2641, main_4_panel2644, main_5_panel2649 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2725;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Enrolments.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 58,
  initComponent : function() {
    var id1414 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(courses.Enrolments.id) ") }, "name": "id", "readOnly": true });
    var course1415 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 25, "forceSelection": true, "hidden": false, "hiddenName": "courseHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(courses.Enrolments.course) ") }, "name": "course", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Enrolments/course" }) }) });
    var pupil1416 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Person...", "fieldLabel": "Person", "flex": 25, "forceSelection": false, "hidden": false, "hiddenName": "pupilHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Person","(courses.Enrolments.pupil) ") }, "name": "pupil", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Enrolments/pupil" }) }) });
    var request_date1417 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "Date of request", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date of request","(courses.Enrolments.request_date) ") }, "name": "request_date", "selectOnFocus": true });
    var user1418 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 25, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(courses.Enrolments.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Enrolments/user" }) }) });
    var main_1_panel1419 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id1414, course1415, pupil1416, request_date1417, user1418 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var start_date1420 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 17, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(courses.Enrolments.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var end_date1421 = Ext.create('Lino.DateField',{ "fieldLabel": "End date", "flex": 17, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End date","(courses.Enrolments.end_date) ") }, "name": "end_date", "selectOnFocus": true });
    var places1422 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Places used</span>", "flex": 10, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Places used","(courses.Enrolments.places) The number of participants in this enrolment.") }, "name": "places", "selectOnFocus": true, "value": 1 });
    var fee1423 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff...", "fieldLabel": "Tariff", "flex": 27, "forceSelection": true, "hidden": false, "hiddenName": "feeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Tariff","(courses.Enrolments.fee) ") }, "name": "fee", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.Products.detail,Lino.products.Products.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Enrolments/fee" }) }) });
    var free_events1424 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Free events</span>", "flex": 10, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Free events","(courses.Enrolments.free_events) Number of events to add for first invoicing for this enrolment.") }, "name": "free_events", "selectOnFocus": true });
    var amount1425 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Amount", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Amount","(courses.Enrolments.amount) ") }, "name": "amount", "selectOnFocus": true });
    var main_2_panel1426 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date1420, end_date1421, places1422, fee1423, free_events1424, amount1425 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remark1427 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Remark", "flex": 18, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(courses.Enrolments.remark) ") }, "maxLength": 200, "name": "remark", "selectOnFocus": true });
    var workflow_buttons_disp1428 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 27, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(courses.Enrolments.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var printed_disp1429 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Printed", "flex": 27, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Printed","(courses.Enrolments.printed) ") }, "name": "printed", "readOnly": true, "value": "" });
    var invoicing_info_disp1430 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Invoicing info", "flex": 27, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Invoicing info","(courses.Enrolments.invoicing_info) ") }, "name": "invoicing_info", "readOnly": true, "value": "" });
    var main_3_panel1431 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ remark1427, workflow_buttons_disp1428, printed_disp1429, invoicing_info_disp1430 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var confirmation_details1432 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Confirmation details", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Confirmation details","(courses.Enrolments.confirmation_details) ") }, "name": "confirmation_details", "selectOnFocus": true });
    var main_4_panel1434 = Ext.create('Ext.Panel',{ "border": false, "flex": 50, "frame": false, "hideCheckBoxLabels": true, "items": [ confirmation_details1432 ], "labelWidth": 189, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var main_panel1435 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1419, main_2_panel1426, main_3_panel1431, main_4_panel1434 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1435;
    this.before_row_edit = function(record) {
      course1415.setContextValue('course_area', record ? record.data['course_areaHidden'] : undefined);
      course1415.setContextValue('request_date', record ? record.data['request_date'] : undefined);
      pupil1416.setContextValue('course', record ? record.data['courseHidden'] : undefined);
      fee1423.setContextValue('course', record ? record.data['courseHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      request_date1417.on('change',Lino.chooser_handler(course1415,'request_date'));
      course1415.on('change',Lino.chooser_handler(pupil1416,'course'));
      course1415.on('change',Lino.chooser_handler(fee1423,'course'));
      Lino.courses.Enrolments.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.countries.Countries.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 6,
  initComponent : function() {
    var isocode2726 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(4), "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">ISO code</span>", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ISO code","(countries.Countries.isocode)         The two-letter code for this country as defined by ISO 3166-1.\n        For countries that no longer exist it may be a 4-letter code.") }, "maxLength": 4, "name": "isocode", "readOnly": true });
    var name2727 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(countries.Countries.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2728 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(countries.Countries.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2729 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 25, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(countries.Countries.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var short_code2730 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(4), "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Short code</span>", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Short code","(countries.Countries.short_code) A short abbreviation for regional usage. Obsolete.") }, "maxLength": 4, "name": "short_code", "selectOnFocus": true });
    var main_1_panel2731 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ isocode2726, name2727, name_fr2728, name_de2729, short_code2730 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2747 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2731 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2747;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.Events.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 33,
  default_record_id: -99999,
  initComponent : function() {
    var start_date2717 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(cal.Events.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var start_time2718 = Ext.create('Lino.TimeField',{ "fieldLabel": "Start time", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start time","(cal.Events.start_time) ") }, "name": "start_time", "selectOnFocus": true });
    var end_date2719 = Ext.create('Lino.DateField',{ "fieldLabel": "End Date", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Date","(cal.Events.end_date) ") }, "name": "end_date", "selectOnFocus": true });
    var end_time2720 = Ext.create('Lino.TimeField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">End Time</span>", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Time","(cal.Events.end_time) These four fields define the duration of this entry.\nOnly start_date is mandatory.") }, "name": "end_time", "selectOnFocus": true });
    var main_1_panel2721 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date2717, start_time2718, end_date2719, end_time2720 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var summary2722 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Short description</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Short description","(cal.Events.summary) A one-line descriptive text.") }, "maxLength": 200, "name": "summary", "selectOnFocus": true });
    var main_panel2723 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2721, summary2722 ], "labelWidth": 162, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2723;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.Calendars.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 38,
  default_record_id: -99999,
  initComponent : function() {
    var name2748 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(cal.Calendars.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2749 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(cal.Calendars.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2750 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(cal.Calendars.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2751 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2748, name_fr2749, name_de2750 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var color2752 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "color", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("color","(cal.Calendars.color) ") }, "name": "color", "selectOnFocus": true });
    var main_panel2753 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2751, color2752 ], "labelWidth": 54, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2753;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.EventTypes.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 32,
  default_record_id: -99999,
  initComponent : function() {
    var name2754 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(cal.EventTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2755 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(cal.EventTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2756 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(cal.EventTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2757 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2754, name_fr2755, name_de2756 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var event_label2758 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry label</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry label","(cal.EventTypes.event_label) Default text for summary of new entries.") }, "maxLength": 200, "name": "event_label", "selectOnFocus": true });
    var event_label_fr2759 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Entry label (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry label (fr)","(cal.EventTypes.event_label_fr) ") }, "maxLength": 200, "name": "event_label_fr", "selectOnFocus": true });
    var event_label_de2760 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Entry label (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry label (de)","(cal.EventTypes.event_label_de) ") }, "maxLength": 200, "name": "event_label_de", "selectOnFocus": true });
    var main_2_panel2761 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ event_label2758, event_label_fr2759, event_label_de2760 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2762 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2757, main_2_panel2761 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2762;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.vat.Invoices.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 49,
  default_record_id: -99999,
  initComponent : function() {
    var journal2763 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Journal...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal</span>", "flex": 50, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(vat.Invoices.journal) The journal into which this voucher has been booked. This is a\nmandatory pointer to a Journal instance.") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/Invoices/journal" }) }) });
    var partner2764 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 50, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(vat.Invoices.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/vat/Invoices/partner" }) }) });
    var main_1_panel2765 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ journal2763, partner2764 ], "labelWidth": 72, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var entry_date2766 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 52, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(vat.Invoices.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var total_incl2767 = Ext.create('Ext.form.NumberField',{ "allowBlank": true, "decimalPrecision": 2, "decimalSeparator": ",", "fieldLabel": "Total incl. VAT", "flex": 48, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Total incl. VAT","(vat.Invoices.total_incl) ") }, "name": "total_incl", "selectOnFocus": true });
    var main_2_panel2768 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ entry_date2766, total_incl2767 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2769 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2765, main_2_panel2768 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2769;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.contacts.Companies.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 13,
  default_record_id: -99999,
  initComponent : function() {
    var name2770 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Name</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Name","(contacts.Companies.name) The full name of this partner. Used for alphabetic sorting.\nSubclasses may hide this field and fill it automatically,\ne.g. saving a Person will automatically set her\nname field to \"last_name, first_name\".") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var email2771 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">e-mail address</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(contacts.Companies.email) The primary email address.") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    var type2772 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Organization type...", "fieldLabel": "Organization type", "flex": 80, "hidden": false, "hiddenName": "typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Organization type","(contacts.Companies.type) ") }, "name": "type", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Companies/type" }) }) });
    var id2773 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(contacts.Companies.id) ") }, "name": "id", "readOnly": true });
    var main_3_panel2774 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ type2772, id2773 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2775 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ name2770, email2771, main_3_panel2774 ], "labelWidth": 135, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2775;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.contacts.Partners.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 16,
  initComponent : function() {
    var overview_htmlbox2255 = Ext.create('Lino.HtmlBoxPanel',{ "always_enabled": true, "bodyStyle": "overflow-x:hidden;", "containing_panel": this, "flex": 50, "items": Ext.create('Ext.Component',{scrollable:true}), "layout": "fit", "listeners": { "render": Lino.quicktip_renderer("Description","(contacts.Partners.overview) ") }, "name": "overview", "title": "Description", "value": "" });
    var email2256 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">e-mail address</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(contacts.Partners.email) The primary email address.") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    var phone2257 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Phone</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Phone","(contacts.Partners.phone) The primary phone number.  Note that Lino does not ignore\nformatting characters in phone numbers when searching.  For\nexample, if you enter \"087/12.34.56\" as a phone number, then a\nsearch for phone number containing \"1234\" will not find it.") }, "maxLength": 200, "name": "phone", "selectOnFocus": true });
    var gsm2258 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">GSM</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("GSM","(contacts.Partners.gsm) The primary mobile phone number.") }, "maxLength": 200, "name": "gsm", "selectOnFocus": true });
    var contact_box_panel2259 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 50, "frame": true, "hideCheckBoxLabels": true, "items": [ email2256, phone2257, gsm2258 ], "labelWidth": 135, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var general_1_panel2260 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ overview_htmlbox2255, contact_box_panel2259 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remarks2261 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remarks", "flex": 62, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remarks","(contacts.Partners.remarks) ") }, "name": "remarks", "selectOnFocus": true });
    var bottom_box_1_panel2263 = Ext.create('Ext.Panel',{ "border": false, "flex": 62, "frame": false, "hideCheckBoxLabels": true, "items": [ remarks2261 ], "labelWidth": 198, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var general_panel2264 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel2260, bottom_box_1_panel2263 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var prefix2265 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Name prefix</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Name prefix","(contacts.Partners.prefix) An optional name prefix. For organisations this is inserted\nbefore the name, for persons this is inserted between first\nname and last name (see\nlino.mixins.human.Human.get_last_name_prefix()).") }, "maxLength": 200, "name": "prefix", "selectOnFocus": true });
    var name2266 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Name</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Name","(contacts.Partners.name) The full name of this partner. Used for alphabetic sorting.\nSubclasses may hide this field and fill it automatically,\ne.g. saving a Person will automatically set her\nname field to \"last_name, first_name\".") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var address_box_1_panel2267 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ prefix2265, name2266 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var street2268 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Street", "flex": 69, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Street","(contacts.Partners.street) ") }, "maxLength": 200, "name": "street", "selectOnFocus": true });
    var street_box2269 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "Box", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Box","(contacts.Partners.street_box) ") }, "maxLength": 10, "name": "street_box", "selectOnFocus": true });
    var address_box_2_panel2270 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ street2268, street_box2269 ], "labelWidth": 63, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var addr22271 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Address line after street", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Address line after street","(contacts.Partners.addr2) ") }, "maxLength": 200, "name": "addr2", "selectOnFocus": true });
    var country2272 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Country...", "fieldLabel": "Country", "flex": 40, "forceSelection": true, "hidden": false, "hiddenName": "countryHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Country","(contacts.Partners.country) ") }, "name": "country", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Countries.detail,Lino.countries.Countries.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Partners/country" }) }) });
    var zip_code2273 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "Zip code", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Zip code","(contacts.Partners.zip_code) ") }, "maxLength": 10, "name": "zip_code", "selectOnFocus": true });
    var city2274 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Place...", "fieldLabel": "Locality", "flex": 40, "forceSelection": false, "hidden": false, "hiddenName": "cityHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Locality","(contacts.Partners.city) ") }, "name": "city", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.countries.Places.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Partners/city" }) }) });
    var address_box_4_panel2275 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ country2272, zip_code2273, city2274 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var address_box_panel2276 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ address_box_1_panel2267, address_box_2_panel2270, addr22271, address_box_4_panel2275 ], "labelWidth": 234, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var address_panel2278 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ address_box_panel2276 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Address" });
    var id2279 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(contacts.Partners.id) ") }, "name": "id", "readOnly": true });
    var language2280 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Language</span>", "flex": 80, "hidden": false, "hiddenName": "languageHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Language","(contacts.Partners.language) The language to use when communicating with this partner.") }, "name": "language", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    var more_1_panel2281 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2279, language2280 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var addr12282 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Address line before street", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Address line before street","(contacts.Partners.addr1) ") }, "maxLength": 200, "name": "addr1", "selectOnFocus": true });
    var url2283 = Ext.create('Lino.URLField',{ "fieldLabel": "URL", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("URL","(contacts.Partners.url) ") }, "maxLength": 200, "name": "url", "selectOnFocus": true });
    var more_2_panel2284 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ addr12282, url2283 ], "labelWidth": 243, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var more_panel2288 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ more_1_panel2281, more_2_panel2284 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "More" });
    var invoice_recipient2289 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Invoicing address</span>", "flex": 48, "hidden": false, "hiddenName": "invoice_recipientHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Invoicing address","(contacts.Partners.invoice_recipient) Redirect to another partner all invoices which should go to this partner.") }, "name": "invoice_recipient", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Partners/invoice_recipient" }) }) });
    var vat_regime2290 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "VAT regime", "flex": 51, "forceSelection": true, "hidden": false, "hiddenName": "vat_regimeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("VAT regime","(contacts.Partners.vat_regime) ") }, "name": "vat_regime", "selectOnFocus": true, "store": [['','']].concat(Lino.vat.VatRegimes) });
    var ledger_a_1_panel2291 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ invoice_recipient2289, vat_regime2290 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var payment_term2292 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Payment Term...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Payment Term</span>", "flex": 50, "hidden": false, "hiddenName": "payment_termHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Payment Term","(contacts.Partners.payment_term) The default payment term for sales invoices to this customer.") }, "name": "payment_term", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.PaymentTerms.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Partners/payment_term" }) }) });
    var paper_type2293 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Paper type...", "fieldLabel": "Paper type", "flex": 50, "hidden": false, "hiddenName": "paper_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Paper type","(contacts.Partners.paper_type) ") }, "name": "paper_type", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/contacts/Partners/paper_type" }) }) });
    var ledger_a_2_panel2294 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ payment_term2292, paper_type2293 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ledger_a_panel2295 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "flex": 57, "frame": true, "hideCheckBoxLabels": true, "items": [ ledger_a_1_panel2291, ledger_a_2_panel2294 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var ledger_1_panel2297 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ledger_a_panel2295 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var ledger_panel2299 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ ledger_1_panel2297 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Ledger" });
    var main_panel2300 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel2264, address_panel2278, more_panel2288, ledger_panel2299 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel2300;
    this.before_row_edit = function(record) {
      overview_htmlbox2255.refresh();
      city2274.setContextValue('country', record ? record.data['countryHidden'] : undefined);
      city2274.setContextValue('region', record ? record.data['regionHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      country2272.on('change',Lino.chooser_handler(city2274,'country'));
      Lino.contacts.Partners.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
    // active_fields:
    city2274.on("change", function(){ this.save() }, this);
    zip_code2273.on("change", function(){ this.save() }, this);
  }
});


Ext.define('Lino.countries.Countries.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 6,
  default_record_id: -99999,
  initComponent : function() {
    var isocode2776 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(4), "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">ISO code</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ISO code","(countries.Countries.isocode)         The two-letter code for this country as defined by ISO 3166-1.\n        For countries that no longer exist it may be a 4-letter code.") }, "maxLength": 4, "name": "isocode", "readOnly": true });
    var short_code2777 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(4), "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Short code</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Short code","(countries.Countries.short_code) A short abbreviation for regional usage. Obsolete.") }, "maxLength": 4, "name": "short_code", "selectOnFocus": true });
    var main_1_panel2778 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ isocode2776, short_code2777 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var name2779 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(countries.Countries.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2780 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(countries.Countries.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2781 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(countries.Countries.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_2_panel2782 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2779, name_fr2780, name_de2781 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2783 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2778, main_2_panel2782 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2783;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Enrolments.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 58,
  default_record_id: -99999,
  initComponent : function() {
    var request_date1436 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "Date of request", "flex": 39, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date of request","(courses.Enrolments.request_date) ") }, "name": "request_date", "selectOnFocus": true });
    var user1437 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 60, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(courses.Enrolments.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Enrolments/user" }) }) });
    var main_1_panel1438 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ request_date1436, user1437 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var course1439 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 50, "forceSelection": true, "hidden": false, "hiddenName": "courseHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(courses.Enrolments.course) ") }, "name": "course", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Enrolments/course" }) }) });
    var pupil1440 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Person...", "fieldLabel": "Person", "flex": 50, "forceSelection": false, "hidden": false, "hiddenName": "pupilHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Person","(courses.Enrolments.pupil) ") }, "name": "pupil", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Enrolments/pupil" }) }) });
    var main_2_panel1441 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ course1439, pupil1440 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remark1442 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Remark", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(courses.Enrolments.remark) ") }, "maxLength": 200, "name": "remark", "selectOnFocus": true });
    var main_panel1443 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1438, main_2_panel1441, remark1442 ], "labelWidth": 63, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1443;
    this.before_row_edit = function(record) {
      course1439.setContextValue('course_area', record ? record.data['course_areaHidden'] : undefined);
      course1439.setContextValue('request_date', record ? record.data['request_date'] : undefined);
      pupil1440.setContextValue('course', record ? record.data['courseHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      request_date1436.on('change',Lino.chooser_handler(course1439,'request_date'));
      course1439.on('change',Lino.chooser_handler(pupil1440,'course'));
      Lino.courses.Enrolments.InsertFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.topics.Topics.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 75,
  initComponent : function() {
    var id444 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 4, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(topics.Topics.id) ") }, "name": "id", "readOnly": true });
    var ref445 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Reference</span>", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Reference","(topics.Topics.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "selectOnFocus": true });
    var name446 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(topics.Topics.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr447 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(topics.Topics.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de448 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(topics.Topics.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var topic_group449 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Topic group...", "fieldLabel": "Topic group", "flex": 18, "hidden": false, "hiddenName": "topic_groupHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Topic group","(topics.Topics.topic_group) ") }, "name": "topic_group", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.topics.TopicGroups.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/topics/Topics/topic_group" }) }) });
    var main_1_panel450 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id444, ref445, name446, name_fr447, name_de448, topic_group449 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var description451 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Long description", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Long description","(topics.Topics.description) ") }, "name": "description", "selectOnFocus": true });
    var description_fr452 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Long description (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Long description (fr)","(topics.Topics.description_fr) ") }, "name": "description_fr", "selectOnFocus": true });
    var description_de453 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Long description (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Long description (de)","(topics.Topics.description_de) ") }, "name": "description_de", "selectOnFocus": true });
    var main_2_panel454 = Ext.create('Ext.Panel',{ "border": false, "flex": 5, "frame": false, "hideCheckBoxLabels": true, "items": [ description451, description_fr452, description_de453 ], "labelWidth": 198, "layout": { "align": "stretch", "type": "hbox" }, "region": "center", "scrollable": false, "split": true });
    var main_panel467 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel450, main_2_panel454 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel467;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.Events.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 33,
  initComponent : function() {
    var event_type2687 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Calendar entry type...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Calendar entry type</span>", "flex": 32, "hidden": false, "hiddenName": "event_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Calendar entry type","(cal.Events.event_type) The type of this entry. Every calendar entry should have this\nfield pointing to a given EventType, which holds\nextended configurable information about this entry.") }, "name": "event_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.EventTypes.detail,Lino.cal.EventTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Events/event_type" }) }) });
    var summary2688 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Short description</span>", "flex": 34, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Short description","(cal.Events.summary) A one-line descriptive text.") }, "maxLength": 200, "name": "summary", "selectOnFocus": true });
    var user2689 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Responsible user</span>", "flex": 32, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Responsible user","(cal.Events.user) The responsible user.") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Events/user" }) }) });
    var main_1_panel2690 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ event_type2687, summary2688, user2689 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var start_date2691 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 61, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(cal.Events.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var start_time2692 = Ext.create('Lino.TimeField',{ "fieldLabel": "Start time", "flex": 38, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start time","(cal.Events.start_time) ") }, "name": "start_time", "selectOnFocus": true });
    var start_panel2693 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "flex": 33, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date2691, start_time2692 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var end_date2694 = Ext.create('Lino.DateField',{ "fieldLabel": "End Date", "flex": 61, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Date","(cal.Events.end_date) ") }, "name": "end_date", "selectOnFocus": true });
    var end_time2695 = Ext.create('Lino.TimeField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">End Time</span>", "flex": 38, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Time","(cal.Events.end_time) These four fields define the duration of this entry.\nOnly start_date is mandatory.") }, "name": "end_time", "selectOnFocus": true });
    var end_panel2696 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "flex": 33, "frame": false, "hideCheckBoxLabels": true, "items": [ end_date2694, end_time2695 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var assigned_to2697 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Assigned to</span>", "flex": 32, "hidden": false, "hiddenName": "assigned_toHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Assigned to","(cal.Events.assigned_to) Another user who is expected to take responsibility for this\nentry.") }, "name": "assigned_to", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Events/assigned_to" }) }) });
    var main_2_panel2698 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_panel2693, end_panel2696, assigned_to2697 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var room2699 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Room...", "fieldLabel": "Room", "flex": 25, "hidden": false, "hiddenName": "roomHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Room","(cal.Events.room) ") }, "name": "room", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.Rooms.detail,Lino.cal.Rooms.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Events/room" }) }) });
    var project2700 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 25, "hidden": false, "hiddenName": "projectHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(cal.Events.project) ") }, "name": "project", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Events/project" }) }) });
    var owner_disp2701 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "Controlled by", "flex": 12, "hidden": false, "labelAlign": "top", "name": "owner", "readOnly": true });
    var workflow_buttons_disp2702 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 37, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(cal.Events.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var main_3_panel2703 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ room2699, project2700, owner_disp2701, workflow_buttons_disp2702 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2716 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2690, main_2_panel2698, main_3_panel2703 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2716;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.Guests.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 35,
  initComponent : function() {
    var event2550 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Calendar entry...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Calendar entry</span>", "flex": 33, "hidden": false, "hiddenName": "eventHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Calendar entry","(cal.Guests.event) The calendar event to which this presence applies.") }, "name": "event", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.OneEvent.detail,Lino.cal.OneEvent.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Guests/event" }) }) });
    var partner2551 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Person...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Person</span>", "flex": 33, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Person","(cal.Guests.partner) The partner to which this presence applies.") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Guests/partner" }) }) });
    var role2552 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Guest Role...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Role</span>", "flex": 33, "hidden": false, "hiddenName": "roleHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Role","(cal.Guests.role) The role of this partner in this presence.") }, "name": "role", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.GuestRoles.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Guests/role" }) }) });
    var main_1_panel2553 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ event2550, partner2551, role2552 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var state2554 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 16, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(cal.Guests.state) The state of this presence.") }, "name": "state", "selectOnFocus": true, "store": Lino.cal.GuestStates });
    var remark2555 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Remark", "flex": 34, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(cal.Guests.remark) ") }, "maxLength": 200, "name": "remark", "selectOnFocus": true });
    var workflow_buttons_disp2556 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 49, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(cal.Guests.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var main_2_panel2557 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ state2554, remark2555, workflow_buttons_disp2556 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2558 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2553, main_2_panel2557 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2558;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.faculties.Demands.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 82,
  initComponent : function() {
    var demander1027 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "Demander", "hidden": false, "hiddenName": "demanderHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Demander","(faculties.Demands.demander) ") }, "name": "demander", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/Demands/demander" }) }) });
    var skill1028 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Skill...", "fieldLabel": "Skill", "hidden": false, "hiddenName": "skillHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Skill","(faculties.Demands.skill) ") }, "name": "skill", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.faculties.Skills.detail,Lino.faculties.Skills.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/Demands/skill" }) }) });
    var importance1029 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Importance</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Importance","(faculties.Demands.importance) How important this skill is for this demand.") }, "name": "importance", "selectOnFocus": true, "value": 100 });
    var id1030 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(faculties.Demands.id) ") }, "name": "id", "readOnly": true });
    var main_3_panel1031 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ importance1029, id1030 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1032 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ demander1027, skill1028, main_3_panel1031 ], "labelWidth": 81, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1032;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.Guests.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 35,
  default_record_id: -99999,
  initComponent : function() {
    var event2559 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Calendar entry...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Calendar entry</span>", "hidden": false, "hiddenName": "eventHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Calendar entry","(cal.Guests.event) The calendar event to which this presence applies.") }, "name": "event", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.OneEvent.detail,Lino.cal.OneEvent.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Guests/event" }) }) });
    var partner2560 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Person...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Person</span>", "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Person","(cal.Guests.partner) The partner to which this presence applies.") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Guests/partner" }) }) });
    var role2561 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Guest Role...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Role</span>", "hidden": false, "hiddenName": "roleHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Role","(cal.Guests.role) The role of this partner in this presence.") }, "name": "role", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.GuestRoles.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Guests/role" }) }) });
    var main_panel2562 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ event2559, partner2560, role2561 ], "labelWidth": 135, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2562;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.Rooms.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 30,
  initComponent : function() {
    var id2784 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(cal.Rooms.id) ") }, "name": "id", "readOnly": true });
    var name2785 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(cal.Rooms.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2786 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(cal.Rooms.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2787 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(cal.Rooms.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2788 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2784, name2785, name_fr2786, name_de2787 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var company2789 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Organization...", "fieldLabel": "Responsible", "flex": 50, "hidden": false, "hiddenName": "companyHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Responsible","(cal.Rooms.company) ") }, "name": "company", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Companies.detail,Lino.contacts.Companies.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Rooms/company" }) }) });
    var contact_person2790 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "Contact person", "flex": 50, "forceSelection": true, "hidden": false, "hiddenName": "contact_personHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Contact person","(cal.Rooms.contact_person) ") }, "name": "contact_person", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Rooms/contact_person" }) }) });
    var main_2_panel2791 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ company2789, contact_person2790 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var description2792 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description", "flex": 41, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description","(cal.Rooms.description) ") }, "name": "description", "selectOnFocus": true });
    var main_panel2831 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2788, main_2_panel2791, description2792 ], "labelWidth": 108, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2831;
    this.before_row_edit = function(record) {
      contact_person2790.setContextValue('company', record ? record.data['companyHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      company2789.on('change',Lino.chooser_handler(contact_person2790,'company'));
      Lino.cal.Rooms.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.contacts.Persons.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 14,
  default_record_id: -99999,
  initComponent : function() {
    var first_name2832 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">First name</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("First name","(contacts.Persons.first_name) The first name, also known as given name.") }, "maxLength": 200, "name": "first_name", "selectOnFocus": true });
    var last_name2833 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Last name</span>", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Last name","(contacts.Persons.last_name) The last name, also known as family name.") }, "maxLength": 200, "name": "last_name", "selectOnFocus": true });
    var main_1_panel2834 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ first_name2832, last_name2833 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var gender2835 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Gender</span>", "flex": 30, "forceSelection": true, "hidden": false, "hiddenName": "genderHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Gender","(contacts.Persons.gender) The sex of this person (male or female).") }, "name": "gender", "selectOnFocus": true, "store": [['','']].concat(Lino.system.Genders) });
    var email2836 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">e-mail address</span>", "flex": 70, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(contacts.Persons.email) The primary email address.") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    var main_2_panel2837 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ gender2835, email2836 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel2838 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2834, main_2_panel2837 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2838;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.contacts.Partners.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 16,
  default_record_id: -99999,
  initComponent : function() {
    var name2301 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Name</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Name","(contacts.Partners.name) The full name of this partner. Used for alphabetic sorting.\nSubclasses may hide this field and fill it automatically,\ne.g. saving a Person will automatically set her\nname field to \"last_name, first_name\".") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var email2302 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">e-mail address</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(contacts.Partners.email) The primary email address.") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    var main_panel2303 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ name2301, email2302 ], "labelWidth": 135, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2303;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.cal.Tasks.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 29,
  initComponent : function() {
    var start_date789 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(cal.Tasks.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var due_date790 = Ext.create('Lino.DateField',{ "fieldLabel": "Due date", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Due date","(cal.Tasks.due_date) ") }, "name": "due_date", "selectOnFocus": true });
    var id791 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 8, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(cal.Tasks.id) ") }, "name": "id", "readOnly": true });
    var workflow_buttons_disp792 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 49, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(cal.Tasks.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var main_1_panel793 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date789, due_date790, id791, workflow_buttons_disp792 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var summary794 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Short description", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Short description","(cal.Tasks.summary) ") }, "maxLength": 200, "name": "summary", "selectOnFocus": true });
    var user795 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 50, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(cal.Tasks.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Tasks/user" }) }) });
    var project796 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Activity...", "fieldLabel": "Activity", "flex": 50, "hidden": false, "hiddenName": "projectHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity","(cal.Tasks.project) ") }, "name": "project", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Activities.detail,Lino.courses.Activities.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/Tasks/project" }) }) });
    var main_3_panel797 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ user795, project796 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var owner_disp798 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "Controlled by", "flex": 20, "hidden": false, "labelAlign": "top", "name": "owner", "readOnly": true });
    var created799 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Created</span>", "flex": 40, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Created","(cal.Tasks.created) The timestame when this object was created.") }, "name": "created", "readOnly": true, "value": "<br>" });
    var modified800 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "Modified", "flex": 40, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Modified","(cal.Tasks.modified) ") }, "name": "modified", "readOnly": true, "value": "<br>" });
    var main_4_panel801 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ owner_disp798, created799, modified800 ], "labelWidth": 126, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var description802 = Ext.create('Ext.form.TextArea',{ "fieldLabel": "Description", "flex": 45, "growMax": 2000, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description","(cal.Tasks.description) ") }, "name": "description", "selectOnFocus": true });
    var main_panel803 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel793, summary794, main_3_panel797, main_4_panel801, description802 ], "labelWidth": 162, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel803;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.humanlinks.Links.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 26,
  default_record_id: -99999,
  initComponent : function() {
    var parent2839 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Person...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Who is...</span>", "hidden": false, "hiddenName": "parentHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Who is...","(humanlinks.Links.parent) Pointer to the person who is \"parent\".") }, "name": "parent", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/humanlinks/Links/parent" }) }) });
    var type2840 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Parency type</span>", "forceSelection": true, "hidden": false, "hiddenName": "typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Parency type","(humanlinks.Links.type) The type of link.  Pointer to LinkTypes.") }, "name": "type", "selectOnFocus": true, "store": Lino.humanlinks.LinkTypes });
    var child2841 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Person...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">To whom...</span>", "hidden": false, "hiddenName": "childHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("To whom...","(humanlinks.Links.child) Pointer to the person who is \"child\".") }, "name": "child", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/humanlinks/Links/child" }) }) });
    var main_panel2842 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ parent2839, type2840, child2841 ], "labelWidth": 117, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2842;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.Therapies.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 60,
  initComponent : function() {
    var ref2843 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Legacy file number</span>", "flex": 23, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Legacy file number","(courses.Therapies.ref) The reference. This must be either empty or unique.") }, "maxLength": 40, "name": "ref", "preferred_with": 6, "selectOnFocus": true });
    var line2844 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Activity line...", "fieldLabel": "Activity line", "flex": 21, "hidden": false, "hiddenName": "lineHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Activity line","(courses.Therapies.line) ") }, "name": "line", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.courses.Lines.detail,Lino.courses.Lines.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Therapies/line" }) }) });
    var teacher2845 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Instructor", "flex": 21, "hidden": false, "hiddenName": "teacherHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Instructor","(courses.Therapies.teacher) ") }, "name": "teacher", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Therapies/teacher" }) }) });
    var workflow_buttons_disp2846 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 32, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(courses.Therapies.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var general_1_panel2847 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ ref2843, line2844, teacher2845, workflow_buttons_disp2846 ], "labelWidth": 171, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var room2848 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Room...", "fieldLabel": "Room", "flex": 32, "hidden": false, "hiddenName": "roomHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Room","(courses.Therapies.room) ") }, "name": "room", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.Rooms.detail,Lino.cal.Rooms.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Therapies/room" }) }) });
    var start_date2849 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(courses.Therapies.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var end_date2850 = Ext.create('Lino.DateField',{ "fieldLabel": "End Date", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Date","(courses.Therapies.end_date) ") }, "name": "end_date", "selectOnFocus": true });
    var start_time2851 = Ext.create('Lino.TimeField',{ "fieldLabel": "Start time", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start time","(courses.Therapies.start_time) ") }, "name": "start_time", "selectOnFocus": true });
    var end_time2852 = Ext.create('Lino.TimeField',{ "fieldLabel": "End Time", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Time","(courses.Therapies.end_time) ") }, "name": "end_time", "selectOnFocus": true });
    var general_2_panel2853 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ room2848, start_date2849, end_date2850, start_time2851, end_time2852 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var partner2854 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "Partner", "flex": 48, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(courses.Therapies.partner) ") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Therapies/partner" }) }) });
    var name2855 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation", "flex": 51, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(courses.Therapies.name) ") }, "maxLength": 100, "name": "name", "selectOnFocus": true });
    var general_3_panel2856 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ partner2854, name2855 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remark2857 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remark", "flex": 50, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(courses.Therapies.remark) ") }, "name": "remark", "selectOnFocus": true });
    var general_panel2858 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel2847, general_2_panel2853, general_3_panel2856, remark2857 ], "labelWidth": 63, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var enrolments_until2859 = Ext.create('Lino.DateField',{ "fieldLabel": "Enrolments until", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Enrolments until","(courses.Therapies.enrolments_until) ") }, "name": "enrolments_until", "selectOnFocus": true });
    var fee2860 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff...", "fieldLabel": "Default participation fee", "flex": 22, "forceSelection": true, "hidden": false, "hiddenName": "feeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Default participation fee","(courses.Therapies.fee) ") }, "name": "fee", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.Products.detail,Lino.products.Products.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Therapies/fee" }) }) });
    var max_places2861 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Available places</span>", "flex": 14, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Available places","(courses.Therapies.max_places) Maximum number of participants") }, "name": "max_places", "selectOnFocus": true });
    var confirmed2862 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Confirmed", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Confirmed","(courses.Therapies.confirmed) ") }, "name": "confirmed", "readOnly": true });
    var free_places2863 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Free places", "flex": 14, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Free places","(courses.Therapies.free_places) ") }, "name": "free_places", "readOnly": true });
    var print_actions_disp2864 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Print", "flex": 22, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Print","(courses.Therapies.print_actions) ") }, "name": "print_actions", "readOnly": true, "value": "" });
    var enrolments_top_panel2865 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ enrolments_until2859, fee2860, max_places2861, confirmed2862, free_places2863, print_actions_disp2864 ], "labelWidth": 234, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var enrolments_panel2867 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ enrolments_top_panel2865 ], "labelWidth": 99, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Enrolments" });
    var every_unit2868 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Recurrency", "flex": 47, "forceSelection": true, "hidden": false, "hiddenName": "every_unitHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recurrency","(courses.Therapies.every_unit) ") }, "name": "every_unit", "selectOnFocus": true, "store": [['','']].concat(Lino.cal.Recurrencies) });
    var every2869 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "Repeat every", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Repeat every","(courses.Therapies.every) ") }, "name": "every", "selectOnFocus": true });
    var max_date2870 = Ext.create('Lino.DateField',{ "fieldLabel": "Generate events until", "flex": 29, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Generate events until","(courses.Therapies.max_date) ") }, "name": "max_date", "selectOnFocus": true });
    var max_events2871 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Number of events", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Number of events","(courses.Therapies.max_events) ") }, "name": "max_events", "selectOnFocus": true });
    var events_1_panel2872 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ every_unit2868, every2869, max_date2870, max_events2871 ], "labelWidth": 198, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var monday2873 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Monday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Monday","(courses.Therapies.monday) ") }, "name": "monday", "selectOnFocus": true });
    var tuesday2874 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Tuesday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Tuesday","(courses.Therapies.tuesday) ") }, "name": "tuesday", "selectOnFocus": true });
    var wednesday2875 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Wednesday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Wednesday","(courses.Therapies.wednesday) ") }, "name": "wednesday", "selectOnFocus": true });
    var thursday2876 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Thursday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Thursday","(courses.Therapies.thursday) ") }, "name": "thursday", "selectOnFocus": true });
    var friday2877 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Friday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Friday","(courses.Therapies.friday) ") }, "name": "friday", "selectOnFocus": true });
    var saturday2878 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Saturday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Saturday","(courses.Therapies.saturday) ") }, "name": "saturday", "selectOnFocus": true });
    var sunday2879 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Sunday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Sunday","(courses.Therapies.sunday) ") }, "name": "sunday", "selectOnFocus": true });
    var events_2_panel2880 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ monday2873, tuesday2874, wednesday2875, thursday2876, friday2877, saturday2878, sunday2879 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var events_panel2882 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ events_1_panel2872, events_2_panel2880 ], "labelWidth": 153, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "Events" });
    var state2886 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">State</span>", "flex": 14, "forceSelection": true, "hidden": false, "hiddenName": "stateHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("State","(courses.Therapies.state) The ChoiceList of the state field must have at least two items\nnamed \"draft\" and \"registered\".\nThere may be additional states.\nEvery state must have an extra attribute \"editable\".") }, "name": "state", "selectOnFocus": true, "store": Lino.courses.CourseStates });
    var user2887 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 26, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(courses.Therapies.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Therapies/user" }) }) });
    var payment_term2888 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Payment Term...", "fieldLabel": "Payment Term", "flex": 26, "hidden": false, "hiddenName": "payment_termHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Payment Term","(courses.Therapies.payment_term) ") }, "name": "payment_term", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.PaymentTerms.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Therapies/payment_term" }) }) });
    var paper_type2889 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Paper type...", "fieldLabel": "Paper type", "flex": 26, "hidden": false, "hiddenName": "paper_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Paper type","(courses.Therapies.paper_type) ") }, "name": "paper_type", "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/Therapies/paper_type" }) }) });
    var id2890 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 6, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(courses.Therapies.id) ") }, "name": "id", "readOnly": true });
    var more_1_panel2891 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ state2886, user2887, payment_term2888, paper_type2889, id2890 ], "labelWidth": 117, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var more_panel2895 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ more_1_panel2891 ], "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "More" });
    var main_panel2896 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel2858, enrolments_panel2867, events_panel2882, more_panel2895 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel2896;
    this.before_row_edit = function(record) {
      fee2860.setContextValue('line', record ? record.data['lineHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      line2844.on('change',Lino.chooser_handler(fee2860,'line'));
      Lino.courses.Therapies.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.faculties.Skills.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 85,
  default_record_id: -99999,
  initComponent : function() {
    var name1036 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(faculties.Skills.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr1037 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(faculties.Skills.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de1038 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(faculties.Skills.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel1039 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name1036, name_fr1037, name_de1038 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var parent1040 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Skill...", "fieldLabel": "Parent skill", "hidden": false, "hiddenName": "parentHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Parent skill","(faculties.Skills.parent) ") }, "name": "parent", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.faculties.Skills.detail,Lino.faculties.Skills.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/faculties/Skills/parent" }) }) });
    var main_panel1041 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel1039, parent1040 ], "labelWidth": 117, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1041;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.notes.EventTypes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 80,
  initComponent : function() {
    var id2897 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(notes.EventTypes.id) ") }, "name": "id", "readOnly": true });
    var name2898 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(notes.EventTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2899 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(notes.EventTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2900 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(notes.EventTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2901 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2897, name2898, name_fr2899, name_de2900 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var remark2902 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remark", "flex": 3, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(notes.EventTypes.remark) ") }, "name": "remark", "region": "center", "selectOnFocus": true, "split": true });
    var main_panel2928 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2901, remark2902 ], "labelWidth": 63, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2928;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.properties.PropTypes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 10,
  initComponent : function() {
    var id2929 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 5, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(properties.PropTypes.id) ") }, "name": "id", "readOnly": true });
    var name2930 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(properties.PropTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2931 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(properties.PropTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2932 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 21, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(properties.PropTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var choicelist2933 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Choices List", "flex": 20, "hidden": false, "hiddenName": "choicelistHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Choices List","(properties.PropTypes.choicelist) ") }, "name": "choicelist", "selectOnFocus": true, "store": [ [ "countries.PlaceTypes", "PlaceTypes" ], [ "plausibility.Checkers", "Plausibility checkers" ], [ "printing.BuildMethods", "BuildMethods" ], [ "properties.DoYouLike", "DoYouLike" ], [ "properties.HowWell", "HowWell" ], [ "system.Genders", "Genders" ], [ "system.PeriodEvents", "Observed events" ], [ "system.YesNo", "Yes or no" ], [ "users.UserTypes", "User types" ] ] });
    var default_value2934 = Ext.create('Lino.RemoteComboFieldElement',{ "fieldLabel": "default value", "flex": 10, "forceSelection": true, "hidden": false, "hiddenName": "default_valueHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("default value","(properties.PropTypes.default_value) ") }, "name": "default_value", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/properties/PropTypes/default_value" }) }) });
    var main_1_panel2935 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2929, name2930, name_fr2931, name_de2932, choicelist2933, default_value2934 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var main_panel2958 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2935 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2958;
    this.before_row_edit = function(record) {
      default_value2934.setContextValue('choicelist', record ? record.data['choicelistHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      choicelist2933.on('change',Lino.chooser_handler(default_value2934,'choicelist'));
      Lino.properties.PropTypes.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.blogs.Entries.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 77,
  initComponent : function() {
    var title2959 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Heading", "flex": 55, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Heading","(blogs.Entries.title) ") }, "maxLength": 200, "name": "title", "selectOnFocus": true });
    var entry_type2960 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Blog Entry Type...", "fieldLabel": "Blog Entry Type", "flex": 31, "hidden": false, "hiddenName": "entry_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Blog Entry Type","(blogs.Entries.entry_type) ") }, "name": "entry_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.blogs.EntryTypes.detail,null)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/blogs/Entries/entry_type" }) }) });
    var id2961 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 13, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(blogs.Entries.id) ") }, "name": "id", "readOnly": true });
    var main_1_panel2962 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ title2959, entry_type2960, id2961 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var pub_date2963 = Ext.create('Lino.DateField',{ "fieldLabel": "Publication date", "flex": 18, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Publication date","(blogs.Entries.pub_date) ") }, "name": "pub_date", "selectOnFocus": true });
    var pub_time2964 = Ext.create('Lino.TimeField',{ "fieldLabel": "Publication time", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Publication time","(blogs.Entries.pub_time) ") }, "name": "pub_time", "selectOnFocus": true });
    var user2965 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 14, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(blogs.Entries.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/blogs/Entries/user" }) }) });
    var language2966 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Language", "flex": 14, "hidden": false, "hiddenName": "languageHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Language","(blogs.Entries.language) ") }, "name": "language", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    var owner_disp2967 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "Controlled by", "flex": 14, "hidden": false, "labelAlign": "top", "name": "owner", "readOnly": true });
    var add_interest2968 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Topic...", "fieldLabel": "Add interest", "flex": 28, "hidden": false, "hiddenName": "add_interestHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Add interest","(blogs.Entries.add_interest) ") }, "name": "add_interest", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.topics.Topics.detail,Lino.topics.Topics.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/blogs/Entries/add_interest" }) }) });
    var main_2_panel2969 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ pub_date2963, pub_time2964, user2965, language2966, owner_disp2967, add_interest2968 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var body2970 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Body", "flex": 75, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Body","(blogs.Entries.body) ") }, "name": "body", "selectOnFocus": true });
    var main_3_panel2972 = Ext.create('Ext.Panel',{ "border": false, "flex": 71, "frame": false, "hideCheckBoxLabels": true, "items": [ body2970 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var main_panel2973 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2962, main_2_panel2969, main_3_panel2972 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2973;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.users.Users.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 4,
  initComponent : function() {
    var username2026 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Username</span>", "flex": 34, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Username","(users.Users.username) Must be unique and cannot be empty.") }, "maxLength": 30, "name": "username", "selectOnFocus": true });
    var user_type2027 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">User type</span>", "flex": 32, "forceSelection": true, "hidden": false, "hiddenName": "user_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("User type","(users.Users.user_type) The user_type of a user is what defines her or his permissions.") }, "name": "user_type", "selectOnFocus": true, "store": [['','']].concat(Lino.users.UserTypes) });
    var partner2028 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Partner...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Partner</span>", "flex": 32, "hidden": false, "hiddenName": "partnerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Partner","(users.Users.partner) Pointer to the Partner instance related to\nthis user.") }, "name": "partner", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Partners.detail,Lino.contacts.Partners.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/users/Users/partner" }) }) });
    var box1_1_panel2029 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ username2026, user_type2027, partner2028 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var first_name2030 = Ext.create('Ext.form.TextField',{ "fieldLabel": "First name", "flex": 39, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("First name","(users.Users.first_name) ") }, "maxLength": 30, "name": "first_name", "selectOnFocus": true });
    var last_name2031 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Last name", "flex": 39, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Last name","(users.Users.last_name) ") }, "maxLength": 30, "name": "last_name", "selectOnFocus": true });
    var initials2032 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(10), "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Initials</span>", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Initials","(users.Users.initials) The nickname or initials of this user. This does not need to\nbe unique but should provide a reasonably identifying\nfunction.") }, "maxLength": 10, "name": "initials", "selectOnFocus": true });
    var box1_2_panel2033 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ first_name2030, last_name2031, initials2032 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var email2034 = Ext.create('Ext.form.TextField',{ "fieldLabel": "e-mail address", "flex": 29, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("e-mail address","(users.Users.email) ") }, "maxLength": 254, "name": "email", "selectOnFocus": true });
    var language2035 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Language", "flex": 28, "hidden": false, "hiddenName": "languageHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Language","(users.Users.language) ") }, "name": "language", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    var timezone2036 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "Time zone", "flex": 14, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Time zone","(users.Users.timezone) ") }, "name": "timezone", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/users/Users/timezone" }) }) });
    var team2037 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Department...", "fieldLabel": "Department", "flex": 28, "hidden": false, "hiddenName": "teamHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Department","(users.Users.team) ") }, "name": "team", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.teams.Teams.detail,Lino.teams.Teams.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/users/Users/team" }) }) });
    var box1_3_panel2038 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ email2034, language2035, timezone2036, team2037 ], "labelWidth": 135, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var id2039 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 13, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(users.Users.id) ") }, "name": "id", "readOnly": true });
    var created2040 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Created</span>", "flex": 43, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Created","(users.Users.created) The timestame when this object was created.") }, "name": "created", "readOnly": true, "value": "<br>" });
    var modified2041 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "Modified", "flex": 43, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Modified","(users.Users.modified) ") }, "name": "modified", "readOnly": true, "value": "<br>" });
    var box1_4_panel2042 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2039, created2040, modified2041 ], "labelWidth": 81, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var box1_panel2043 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ box1_1_panel2029, box1_2_panel2033, box1_3_panel2038, box1_4_panel2042 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    var remarks2044 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remarks", "flex": 66, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remarks","(users.Users.remarks) ") }, "name": "remarks", "selectOnFocus": true });
    var main_2_panel2048 = Ext.create('Ext.Panel',{ "border": false, "flex": 55, "frame": false, "hideCheckBoxLabels": true, "items": [ remarks2044 ], "labelWidth": 72, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var main_panel2049 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ box1_panel2043, main_2_panel2048 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel2049;
    this.before_row_edit = function(record) {
      timezone2036.setContextValue('partner', record ? record.data['partnerHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      partner2028.on('change',Lino.chooser_handler(timezone2036,'partner'));
      Lino.users.Users.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
    // active_fields:
    partner2028.on("change", function(){ this.save() }, this);
  }
});


Ext.define('Lino.cal.RecurrentEvents.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 31,
  initComponent : function() {
    var name2974 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Designation</span>", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(cal.RecurrentEvents.name) See lino.utils.mldbc.mixins.BabelNamed.name.") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr2975 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(cal.RecurrentEvents.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de2976 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(cal.RecurrentEvents.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel2977 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ name2974, name_fr2975, name_de2976 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var id2978 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 11, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(cal.RecurrentEvents.id) ") }, "name": "id", "readOnly": true });
    var user2979 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 44, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(cal.RecurrentEvents.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/RecurrentEvents/user" }) }) });
    var event_type2980 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Calendar entry type...", "fieldLabel": "Calendar entry type", "flex": 44, "hidden": false, "hiddenName": "event_typeHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Calendar entry type","(cal.RecurrentEvents.event_type) ") }, "name": "event_type", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.cal.EventTypes.detail,Lino.cal.EventTypes.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/cal/RecurrentEvents/event_type" }) }) });
    var main_2_panel2981 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id2978, user2979, event_type2980 ], "labelWidth": 180, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var start_date2982 = Ext.create('Lino.DateField',{ "fieldLabel": "Start date", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start date","(cal.RecurrentEvents.start_date) ") }, "name": "start_date", "selectOnFocus": true });
    var start_time2983 = Ext.create('Lino.TimeField',{ "fieldLabel": "Start time", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Start time","(cal.RecurrentEvents.start_time) ") }, "name": "start_time", "selectOnFocus": true });
    var end_date2984 = Ext.create('Lino.DateField',{ "fieldLabel": "End Date", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Date","(cal.RecurrentEvents.end_date) ") }, "name": "end_date", "selectOnFocus": true });
    var end_time2985 = Ext.create('Lino.TimeField',{ "fieldLabel": "End Time", "flex": 19, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("End Time","(cal.RecurrentEvents.end_time) ") }, "name": "end_time", "selectOnFocus": true });
    var main_3_panel2986 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ start_date2982, start_time2983, end_date2984, end_time2985 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var every_unit2987 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Recurrency</span>", "flex": 67, "forceSelection": true, "hidden": false, "hiddenName": "every_unitHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Recurrency","(cal.RecurrentEvents.every_unit) Inherited from RecurrentSet.every_unit.") }, "name": "every_unit", "selectOnFocus": true, "store": Lino.cal.Recurrencies });
    var every2988 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "Repeat every", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Repeat every","(cal.RecurrentEvents.every) ") }, "name": "every", "selectOnFocus": true, "value": 1 });
    var max_events2989 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "Number of events", "flex": 16, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Number of events","(cal.RecurrentEvents.max_events) ") }, "name": "max_events", "selectOnFocus": true });
    var main_4_panel2990 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ every_unit2987, every2988, max_events2989 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var monday2991 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Monday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Monday","(cal.RecurrentEvents.monday) ") }, "name": "monday", "selectOnFocus": true });
    var tuesday2992 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Tuesday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Tuesday","(cal.RecurrentEvents.tuesday) ") }, "name": "tuesday", "selectOnFocus": true });
    var wednesday2993 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Wednesday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Wednesday","(cal.RecurrentEvents.wednesday) ") }, "name": "wednesday", "selectOnFocus": true });
    var thursday2994 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Thursday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Thursday","(cal.RecurrentEvents.thursday) ") }, "name": "thursday", "selectOnFocus": true });
    var friday2995 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Friday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Friday","(cal.RecurrentEvents.friday) ") }, "name": "friday", "selectOnFocus": true });
    var saturday2996 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Saturday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Saturday","(cal.RecurrentEvents.saturday) ") }, "name": "saturday", "selectOnFocus": true });
    var sunday2997 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Sunday", "checked": false, "flex": 14, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Sunday","(cal.RecurrentEvents.sunday) ") }, "name": "sunday", "selectOnFocus": true });
    var main_5_panel2998 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ monday2991, tuesday2992, wednesday2993, thursday2994, friday2995, saturday2996, sunday2997 ], "labelWidth": 90, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var description2999 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Description", "flex": 66, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Description","(cal.RecurrentEvents.description) ") }, "name": "description", "selectOnFocus": true });
    var main_6_panel3001 = Ext.create('Ext.Panel',{ "border": false, "flex": 50, "frame": false, "hideCheckBoxLabels": true, "items": [ description2999 ], "labelWidth": 153, "layout": { "align": "stretch", "type": "hbox" }, "scrollable": false });
    var main_panel3002 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel2977, main_2_panel2981, main_3_panel2986, main_4_panel2990, main_5_panel2998, main_6_panel3001 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel3002;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.plausibility.Problems.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 88,
  disable_editing: true,
  initComponent : function() {
    var checker1499 = Ext.create('Lino.ChoicesFieldElement',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Checker</span>", "forceSelection": true, "hidden": false, "hiddenName": "checkerHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Checker","(plausibility.Problems.checker) The Checker which reported\nthis problem.") }, "name": "checker", "selectOnFocus": true, "store": Lino.plausibility.Checkers });
    var owner_disp1500 = Ext.create('Ext.form.DisplayField',{ "fieldLabel": "Database object", "hidden": false, "labelAlign": "top", "name": "owner", "readOnly": true });
    var message1501 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Message</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Message","(plausibility.Problems.message) The message text. This is a concatenation of all messages that\nwere yeld by the checker.") }, "maxLength": 250, "name": "message", "selectOnFocus": true });
    var user1502 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Responsible</span>", "flex": 66, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Responsible","(plausibility.Problems.user) The user reponsible\nfor fixing this problem.") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/plausibility/Problems/user" }) }) });
    var id1503 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 33, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(plausibility.Problems.id) ") }, "name": "id", "readOnly": true });
    var main_4_panel1504 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ user1502, id1503 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel1505 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ checker1499, owner_disp1500, message1501, main_4_panel1504 ], "labelWidth": 144, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel1505;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.properties.PropGroups.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 9,
  initComponent : function() {
    var id3003 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(properties.PropGroups.id) ") }, "name": "id", "readOnly": true });
    var name3004 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(properties.PropGroups.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr3005 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(properties.PropGroups.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de3006 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(properties.PropGroups.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel3007 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id3003, name3004, name_fr3005, name_de3006 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel3019 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel3007 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel3019;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.notes.NoteTypes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 81,
  initComponent : function() {
    var id3020 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(notes.NoteTypes.id) ") }, "name": "id", "readOnly": true });
    var name3021 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(notes.NoteTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr3022 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(notes.NoteTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de3023 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(notes.NoteTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel3024 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id3020, name3021, name_fr3022, name_de3023 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var build_method3025 = Ext.create('Lino.ChoicesFieldElement',{ "fieldLabel": "Build method", "flex": 38, "forceSelection": true, "hidden": false, "hiddenName": "build_methodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Build method","(notes.NoteTypes.build_method) ") }, "name": "build_method", "selectOnFocus": true, "store": [['','']].concat(Lino.printing.BuildMethods) });
    var template3026 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "Template", "flex": 16, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Template","(notes.NoteTypes.template) ") }, "name": "template", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/NoteTypes/template" }) }) });
    var special_type3027 = Ext.create('Ext.form.TextField',{ "boxMinWidth": Lino.chars2width(5), "fieldLabel": "Special note type", "flex": 10, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Special note type","(notes.NoteTypes.special_type) ") }, "maxLength": 5, "name": "special_type", "selectOnFocus": true });
    var email_template3028 = Ext.create('Lino.SimpleRemoteComboFieldElement',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Email template</span>", "flex": 16, "forceSelection": true, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Email template","(notes.NoteTypes.email_template) The name of the file to be used as template when creating an email from a mailable of this type.") }, "name": "email_template", "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/notes/NoteTypes/email_template" }) }) });
    var attach_to_email3029 = Ext.create('Ext.form.Checkbox',{ "boxLabel": "Attach to email", "checked": false, "flex": 16, "hidden": false, "hideLabel": true, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Attach to email","(notes.NoteTypes.attach_to_email) Whether the printable file should be attached to the email\nwhen creating an email from a mailable of this type.\n") }, "name": "attach_to_email", "selectOnFocus": true });
    var main_2_panel3030 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ build_method3025, template3026, special_type3027, email_template3028, attach_to_email3029 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remark3031 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remark", "flex": 41, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(notes.NoteTypes.remark) ") }, "name": "remark", "selectOnFocus": true });
    var main_panel3057 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel3024, main_2_panel3030, remark3031 ], "labelWidth": 63, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel3057;
    this.before_row_edit = function(record) {
      template3026.setContextValue('build_method', record ? record.data['build_methodHidden'] : undefined);
    }
    this.onRender = function(ct, position) {
      build_method3025.on('change',Lino.chooser_handler(template3026,'build_method'));
      Lino.notes.NoteTypes.DetailFormPanel.superclass.onRender.call(this, ct, position);
    }
  this.callSuper();
  }
});


Ext.define('Lino.blogs.EntryTypes.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 78,
  initComponent : function() {
    var id3058 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(blogs.EntryTypes.id) ") }, "name": "id", "readOnly": true });
    var name3059 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "fieldLabel": "Designation", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation","(blogs.EntryTypes.name) ") }, "maxLength": 200, "name": "name", "selectOnFocus": true });
    var name_fr3060 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (fr)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (fr)","(blogs.EntryTypes.name_fr) ") }, "maxLength": 200, "name": "name_fr", "selectOnFocus": true });
    var name_de3061 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Designation (de)", "flex": 30, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Designation (de)","(blogs.EntryTypes.name_de) ") }, "maxLength": 200, "name": "name_de", "selectOnFocus": true });
    var main_1_panel3062 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ id3058, name3059, name_fr3060, name_de3061 ], "labelWidth": 153, "layout": { "align": "stretchmax", "type": "hbox" }, "region": "north", "scrollable": false, "split": true });
    var remark3063 = Ext.create('Ext.form.HtmlEditor',{ "enableFont": false, "fieldLabel": "Remark", "flex": 5, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(blogs.EntryTypes.remark) ") }, "name": "remark", "region": "center", "selectOnFocus": true, "split": true });
    var main_panel3082 = Lino.VBorderPanel({ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ main_1_panel3062, remark3063 ], "labelWidth": 63, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel3082;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.courses.EnrolmentsByLifeGroup.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 58,
  default_record_id: -99999,
  initComponent : function() {
    var pupil3083 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Person...", "fieldLabel": "Person", "forceSelection": false, "hidden": false, "hiddenName": "pupilHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Person","(courses.EnrolmentsByLifeGroup.pupil) ") }, "name": "pupil", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.contacts.Persons.detail,Lino.contacts.Persons.insert)}, "pageSize": 20, "preferred_width": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/EnrolmentsByLifeGroup/pupil" }) }) });
    var places3084 = Ext.create('Ext.form.NumberField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Places used</span>", "flex": 20, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Places used","(courses.EnrolmentsByLifeGroup.places) The number of participants in this enrolment.") }, "name": "places", "selectOnFocus": true, "value": 1 });
    var option3085 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Tariff...", "fieldLabel": "Option", "flex": 80, "forceSelection": true, "hidden": false, "hiddenName": "optionHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Option","(courses.EnrolmentsByLifeGroup.option) ") }, "name": "option", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.products.Products.detail,Lino.products.Products.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/EnrolmentsByLifeGroup/option" }) }) });
    var main_2_panel3086 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ places3084, option3085 ], "labelWidth": 108, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var remark3087 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Remark", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Remark","(courses.EnrolmentsByLifeGroup.remark) ") }, "maxLength": 200, "name": "remark", "selectOnFocus": true });
    var request_date3088 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "Date of request", "flex": 39, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Date of request","(courses.EnrolmentsByLifeGroup.request_date) ") }, "name": "request_date", "selectOnFocus": true });
    var user3089 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 60, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(courses.EnrolmentsByLifeGroup.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/courses/EnrolmentsByLifeGroup/user" }) }) });
    var main_4_panel3090 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ request_date3088, user3089 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var main_panel3091 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ pupil3083, main_2_panel3086, remark3087, main_4_panel3090 ], "labelWidth": 63, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel3091;
    this.before_row_edit = function(record) {
      var bp = this.get_base_params();
      pupil3083.setContextValue('mk',bp['mk']);
      pupil3083.setContextValue('mt',bp['mt']);
      var bp = this.get_base_params();
      option3085.setContextValue('mk',bp['mk']);
      option3085.setContextValue('mt',bp['mt']);
    }
  this.callSuper();
  }
});


Ext.define('Lino.finan.FinancialVouchers.DetailFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  content_type: 67,
  initComponent : function() {
    var entry_date3092 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "flex": 26, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(finan.FinancialVouchers.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var number3093 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">No.</span>", "flex": 12, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("No.","(finan.FinancialVouchers.number) The sequence number of this voucher in the journal.") }, "name": "number", "selectOnFocus": true });
    var workflow_buttons_disp3094 = Ext.create('Ext.form.DisplayField',{ "always_enabled": true, "fieldLabel": "Workflow", "flex": 61, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Workflow","(finan.FinancialVouchers.workflow_buttons) ") }, "name": "workflow_buttons", "readOnly": true, "value": "" });
    var general_1_panel3095 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ entry_date3092, number3093, workflow_buttons_disp3094 ], "labelWidth": 99, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var narration3096 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Narration</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Narration","(finan.FinancialVouchers.narration) A short explanation which ascertains the subject matter of\nthis journal entry.") }, "maxLength": 200, "name": "narration", "selectOnFocus": true });
    var general_panel3098 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ general_1_panel3095, narration3096 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "General" });
    var journal3099 = Ext.create('Lino.TwinCombo',{ "allowBlank": false, "emptyText": "Select a Journal...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Journal</span>", "flex": 30, "forceSelection": true, "hidden": false, "hiddenName": "journalHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Journal","(finan.FinancialVouchers.journal) The journal into which this voucher has been booked. This is a\nmandatory pointer to a Journal instance.") }, "name": "journal", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.ledger.Journals.detail,Lino.ledger.Journals.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/FinancialVouchers/journal" }) }) });
    var accounting_period3100 = Ext.create('Lino.RemoteComboFieldElement',{ "emptyText": "Select a Accounting period...", "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Accounting period</span>", "flex": 30, "hidden": false, "hiddenName": "accounting_periodHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Accounting period","(finan.FinancialVouchers.accounting_period) The accounting period and fiscal year to which this entry is\nto be assigned to. The default value is determined from\nentry_date.") }, "name": "accounting_period", "pageSize": 20, "preferred_width": 10, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/FinancialVouchers/accounting_period" }) }) });
    var user3101 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a User...", "fieldLabel": "Author", "flex": 30, "hidden": false, "hiddenName": "userHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Author","(finan.FinancialVouchers.user) ") }, "name": "user", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.users.Users.detail,Lino.users.Users.insert)}, "pageSize": 20, "preferred_width": 15, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/FinancialVouchers/user" }) }) });
    var id3102 = Ext.create('Ext.form.NumberField',{ "fieldLabel": "ID", "flex": 7, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("ID","(finan.FinancialVouchers.id) ") }, "name": "id", "readOnly": true });
    var more_1_panel3103 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ journal3099, accounting_period3100, user3101, id3102 ], "labelWidth": 162, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var item_account3104 = Ext.create('Lino.TwinCombo',{ "emptyText": "Select a Account...", "fieldLabel": "Default account", "flex": 48, "hidden": false, "hiddenName": "item_accountHidden", "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Default account","(finan.FinancialVouchers.item_account) ") }, "name": "item_account", "onTrigger2Click": function(e){ Lino.show_fk_detail(this,Lino.accounts.Accounts.detail,Lino.accounts.Accounts.insert)}, "pageSize": 20, "selectOnFocus": true, "store": Ext.create('Lino.ComplexRemoteComboStore',{ "autoLoad": true, "proxy": Ext.create('Ext.data.HttpProxy',{ "method": "GET", "reader": { "idProperty": "this.ls_id_property", "keepRawData": "true", "rootProperty": "rows", "totalProperty": "count", "type": "json" }, "url": "/choices/finan/FinancialVouchers/item_account" }) }) });
    var item_remark3105 = Ext.create('Ext.form.TextField',{ "fieldLabel": "Your reference", "flex": 51, "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Your reference","(finan.FinancialVouchers.item_remark) ") }, "maxLength": 200, "name": "item_remark", "selectOnFocus": true });
    var more_2_panel3106 = Ext.create('Ext.Panel',{ "autoHeight": true, "border": false, "frame": false, "hideCheckBoxLabels": true, "items": [ item_account3104, item_remark3105 ], "labelWidth": 144, "layout": { "align": "stretchmax", "type": "hbox" }, "scrollable": false });
    var more_panel3108 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ more_1_panel3103, more_2_panel3106 ], "labelWidth": 90, "layout": { "align": "stretch", "type": "vbox" }, "listeners": { "activate": Lino.on_tab_activate }, "scrollable": false, "title": "More" });
    var main_panel3109 = Ext.create('Ext.TabPanel',{ "activeTab": 0, "bodyBorder": false, "border": false, "enableTabScroll": true, "frame": true, "hideCheckBoxLabels": true, "items": [ general_panel3098, more_panel3108 ], "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false, "split": true });
    this.items = main_panel3109;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});


Ext.define('Lino.finan.FinancialVouchers.InsertFormPanel' , { extend : 'Lino.FormPanel',
  layout: 'fit',
  auto_save: true,
  autoHeight: true,
  content_type: 67,
  default_record_id: -99999,
  initComponent : function() {
    var entry_date3110 = Ext.create('Lino.DateField',{ "allowBlank": false, "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Entry date</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Entry date","(finan.FinancialVouchers.entry_date) The date of the journal entry, i.e. when this voucher is to\njournalized or booked.") }, "name": "entry_date", "selectOnFocus": true });
    var narration3111 = Ext.create('Ext.form.TextField',{ "fieldLabel": "<span style=\"border-bottom: 1px dotted #000000;\">Narration</span>", "hidden": false, "labelAlign": "top", "listeners": { "render": Lino.quicktip_renderer("Narration","(finan.FinancialVouchers.narration) A short explanation which ascertains the subject matter of\nthis journal entry.") }, "maxLength": 200, "name": "narration", "selectOnFocus": true });
    var main_panel3112 = Ext.create('Ext.Panel',{ "bodyBorder": false, "border": false, "frame": true, "hideCheckBoxLabels": true, "items": [ entry_date3110, narration3111 ], "labelWidth": 99, "layout": { "align": "stretch", "type": "vbox" }, "scrollable": false });
    this.items = main_panel3112;
    this.before_row_edit = function(record) {
    }
  this.callSuper();
  }
});

Lino.users.Users.change_password = Ext.create('Lino.WindowAction',{ "draggable": true, "height": true, "maximizable": true, "maximized": false, "modal": true, "width": Lino.chars2width(50) }, function(){
  var p = { "hide_top_toolbar": true, "is_main_window": true };
  return Ext.create('Lino.users.Users.change_password_ActionFormPanel',{});
});
Lino.users.UsersOverview.sign_in = Ext.create('Lino.WindowAction',{ "draggable": true, "height": true, "maximizable": true, "maximized": false, "modal": true, "width": Lino.chars2width(50) }, function(){
  var p = { "hide_top_toolbar": true, "is_main_window": true };
  return Ext.create('Lino.users.UsersOverview.sign_in_ActionFormPanel',{});
});

// js_render_GridPanel_class users.UsersOverview
Ext.define('Lino.users.UsersOverview.GridPanel' , { extend : 'Lino.GridPanel',
  disabled_fields_index : 6,
  viewConfig : { "emptyText": "No data to display.", "getRowClass": Lino.getRowClass },
  ls_url : "/users/UsersOverview",
  ls_bbar_actions : [ { "auto_save": true, "iconCls": "x-tbar-html", "itemId": "show_as_html", "menu_item_text": "HTML", "overflowText": "HTML", "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','show_as_html','GET',Lino.get_current_grid_config), "tooltip": "Show this table in Bootstrap3 interface" }, { "iconCls": "x-tbar-page_white_acrobat", "menu": [ { "auto_save": true, "itemId": "as_pdf", "menu_item_text": "Table (landscape)", "overflowText": "Table (landscape)", "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','as_pdf','GET',Lino.get_current_grid_config), "text": "Table (landscape)", "tooltip": "Show this table as a pdf document" }, { "auto_save": true, "itemId": "as_pdf_p", "menu_item_text": "Table (portrait)", "overflowText": "Table (portrait)", "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','as_pdf_p','GET',Lino.get_current_grid_config), "text": "Table (portrait)", "tooltip": "Show this table as a pdf document" } ], "menu_item_text": "Table (landscape)", "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','as_pdf','GET',Lino.get_current_grid_config), "text": null, "xtype": "splitbutton" }, { "auto_save": true, "iconCls": "x-tbar-page_excel", "itemId": "export_excel", "menu_item_text": "Export to .xls", "overflowText": "Export to .xls", "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','export_excel','GET',Lino.get_current_grid_config), "tooltip": "Export this table as an .xls document" }, { "auto_save": true, "iconCls": "x-tbar-application_form", "itemId": "detail", "menu_item_text": "Detail", "overflowText": "Detail", "panel_btn_handler": Lino.show_detail, "tooltip": "Detail" }, { "auto_save": true, "itemId": "sign_out", "menu_item_text": "Sign out", "overflowText": "Sign out", "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','sign_out','GET',null), "text": "Sign out" }, { "auto_save": true, "itemId": "change_password", "menu_item_text": "Change password", "overflowText": "Change password", "panel_btn_handler": Lino.param_action_handler(Lino.users.Users.change_password), "text": " <font size=\"4\">\u2731</font>" }, { "auto_save": true, "itemId": "sign_in", "menu_item_text": "Sign in", "overflowText": "Sign in", "panel_btn_handler": Lino.param_action_handler(Lino.users.UsersOverview.sign_in), "text": "Sign in" } ],
  cell_edit : true,
  title : "Users",
  page_length : 20,
  params_panel_hidden : true,
  stripeRows : true,
  forceFit : true,
  ls_store_fields : [ { "name": "username" }, { "name": "user_type" }, 'user_typeHidden', { "name": "language" }, 'languageHidden', { "name": "id", "type": "int" }, { "name": "disabled_fields" }, { "name": "disable_editing" } ],
  pk_index : 5,
  ls_grid_configs : [  ],
  content_type : 4,
  ls_id_property : "id",
  gc_name : 0,
  initComponent : function() {
    this.ls_detail_handler = Lino.users.UsersOverview.detail;
    this.ls_insert_handler = Lino.users.UsersOverview.insert;
    var ww = this.containing_window;
    var username3113 = Ext.create('Ext.form.TextField',{ "allowBlank": false, "hidden": false, "labelAlign": "top", "maxLength": 30, "selectOnFocus": true });
    var user_type3114 = Ext.create('Lino.ChoicesFieldElement',{ "forceSelection": true, "hidden": false, "labelAlign": "top", "selectOnFocus": true, "store": [['','']].concat(Lino.users.UserTypes) });
    var language3115 = Ext.create('Lino.ChoicesFieldElement',{ "hidden": false, "labelAlign": "top", "selectOnFocus": true, "store": [ [ "en", "English" ], [ "fr", "French" ], [ "de", "German" ] ] });
    this.before_row_edit = function(record) {
    };
    this.ls_columns = [ { "colIndex": 0, "dataIndex": "username", "editable": true, "editor": username3113, "filter": { "type": "string" }, "header": "Username", "listeners": { "render": Lino.quicktip_renderer("","(users.UsersOverview.username) Must be unique and cannot be empty.") }, "sortable": true, "width": Lino.chars2width(22) }, { "colIndex": 1, "dataIndex": "user_type", "editable": true, "editor": user_type3114, "filter": { "options": [ "000 (Anonymous)", "100 (Secretary)", "200 (Therapist)", "900 (Administrator)" ], "type": "list" }, "header": "User type", "listeners": { "render": Lino.quicktip_renderer("","(users.UsersOverview.user_type) The user_type of a user is what defines her or his permissions.") }, "sortable": true, "width": Lino.chars2width(23) }, { "colIndex": 2, "dataIndex": "language", "editable": true, "editor": language3115, "filter": { "type": "string" }, "header": "Language", "listeners": { "render": Lino.quicktip_renderer("","(users.UsersOverview.language) ") }, "sortable": true, "width": Lino.chars2width(21) } ];
this.callSuper();
  }
});

Lino.users.UsersOverview.show_as_html = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "show_as_html", params, Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};
Lino.users.UsersOverview.as_pdf = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "as_pdf", params, Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};
Lino.users.UsersOverview.as_pdf_p = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "as_pdf_p", params, Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};
Lino.users.UsersOverview.export_excel = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "export_excel", params, Lino.get_current_grid_config);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};
Lino.users.UsersOverview.submit_detail = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "submit_detail", params, null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};

Ext.define('Lino.users.UsersOverview.insertPanel' , { extend : 'Lino.users.Users.InsertFormPanel',
  empty_title: "New",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_insert",
  ls_bbar_actions: [  ],
  ls_url: "/users/UsersOverview",
  action_name: "insert",
  default_record_id: -99999,
  initComponent : function() {
    this.ls_detail_handler = Lino.users.UsersOverview.detail;
    this.ls_insert_handler = Lino.users.UsersOverview.insert;
    this.callSuper();
  }
});

Lino.users.UsersOverview.insert = Ext.create('Lino.WindowAction',{ "draggable": true, "height": true, "maximizable": true, "maximized": false, "modal": true, "width": Lino.chars2width(60) }, function(){
  var p = { "hide_top_toolbar": true, "is_main_window": true };
  return Ext.create('Lino.users.UsersOverview.insertPanel',{p});
});
Lino.users.UsersOverview.grid_put = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "grid_put", params, null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};
Lino.users.UsersOverview.grid_post = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "grid_post", params, null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};
Lino.users.UsersOverview.submit_insert = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "submit_insert", params, null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};

Ext.define('Lino.users.UsersOverview.detailPanel' , { extend : 'Lino.users.Users.DetailFormPanel',
  empty_title: "Detail",
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [ { "auto_save": true, "itemId": "sign_out", "menu_item_text": "Sign out", "overflowText": "Sign out", "panel_btn_handler": Lino.list_action_handler('/users/UsersOverview','sign_out','GET',null), "text": "Sign out" }, { "auto_save": true, "itemId": "change_password", "menu_item_text": "Change password", "overflowText": "Change password", "panel_btn_handler": Lino.param_action_handler(Lino.users.Users.change_password), "text": " <font size=\"4\">\u2731</font>" }, { "auto_save": true, "itemId": "sign_in", "menu_item_text": "Sign in", "overflowText": "Sign in", "panel_btn_handler": Lino.param_action_handler(Lino.users.UsersOverview.sign_in), "text": "Sign in" } ],
  ls_url: "/users/UsersOverview",
  action_name: "detail",
  initComponent : function() {
    this.ls_detail_handler = Lino.users.UsersOverview.detail;
    this.ls_insert_handler = Lino.users.UsersOverview.insert;
    this.callSuper();
  }
});

Lino.users.UsersOverview.detail = Ext.create('Lino.WindowAction',{  }, function(){
  var p = { "is_main_window": true };
  return Ext.create('Lino.users.UsersOverview.detailPanel',{p});
});
Lino.users.UsersOverview.delete_selected = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "delete_selected", params, null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};
Lino.users.UsersOverview.grid = Ext.create('Lino.WindowAction',{  }, function(){
  var p = { "is_main_window": true };
  p.params_panel = Ext.create('Lino.users.Users.ParamsPanel',{});
  return Ext.create('Lino.users.UsersOverview.GridPanel',{p});
});
Lino.users.UsersOverview.validate = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "validate", params, null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};
Lino.users.UsersOverview.sign_out = function(rp, is_main, pk, params) { 
  var h = function() { 
    Lino.run_row_action(rp, is_main, "/users/UsersOverview", "GET", pk, "sign_out", params, null);
  };
  var panel = Ext.getCmp(rp);
  if(panel) panel.do_when_clean(true, h); else h();
};

Ext.define('Lino.about.About.showPanel' , { extend : 'Lino.about.About.DetailFormPanel',
  empty_title: "About",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [  ],
  ls_url: "/about/About",
  initComponent : function() {
    this.ls_detail_handler = Lino.about.About.show;
    this.callSuper();
  }
});

Lino.about.About.show = Ext.create('Lino.WindowAction',{ "draggable": true, "height": Lino.rows2height(20), "maximizable": true, "maximized": false, "modal": true, "width": Lino.chars2width(60) }, function(){
  var p = { "hide_top_toolbar": true, "is_main_window": true };
  return Ext.create('Lino.about.About.showPanel',{p});
});

Ext.define('Lino.about.About.showPanel' , { extend : 'Lino.about.About.DetailFormPanel',
  empty_title: "About",
  hide_navigator: true,
  params_panel_hidden: true,
  save_action_name: "submit_detail",
  ls_bbar_actions: [  ],
  ls_url: "/about/About",
  initComponent : function() {
    this.ls_detail_handler = Lino.about.About.show;
    this.callSuper();
  }
});

Lino.about.About.show = Ext.create('Lino.WindowAction',{ "draggable": true, "height": Lino.rows2height(20), "maximizable": true, "maximized": false, "modal": true, "width": Lino.chars2width(60) }, function(){
  var p = { "hide_top_toolbar": true, "is_main_window": true };
  return Ext.create('Lino.about.About.showPanel',{p});
});
